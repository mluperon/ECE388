
UI Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  000008e6  0000097a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800172  00800172  000009ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017fd  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b0c  00000000  00000000  000022d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000823  00000000  00000000  00002de5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00003608  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005eb  00000000  00000000  000037b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000889  00000000  00000000  00003da3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000462c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 48 02 	jmp	0x490	; 0x490 <__vector_4>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e6 ee       	ldi	r30, 0xE6	; 230
  c8:	f8 e0       	ldi	r31, 0x08	; 8
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 37       	cpi	r26, 0x72	; 114
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a2 e7       	ldi	r26, 0x72	; 114
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ae 39       	cpi	r26, 0x9E	; 158
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 89 01 	call	0x312	; 0x312 <main>
  ea:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <lcdCommand>:


//*******************************************************
void lcdCommand( unsigned char cmnd )
{
  LCD_DPRT = cmnd;			
  f2:	8b b9       	out	0x0b, r24	; 11
  LCD_CPRT &= ~ (1<<LCD_RS);
  f4:	70 98       	cbi	0x0e, 0	; 14
  LCD_CPRT &= ~ (1<<LCD_RW);
  f6:	71 98       	cbi	0x0e, 1	; 14
  LCD_CPRT |= (1<<LCD_EN);	
  f8:	72 9a       	sbi	0x0e, 2	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	85 e0       	ldi	r24, 0x05	; 5
  fc:	8a 95       	dec	r24
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcdCommand+0xa>
 100:	00 00       	nop
  _delay_us(1);				
  LCD_CPRT &= ~ (1<<LCD_EN);
 102:	72 98       	cbi	0x0e, 2	; 14
 104:	8f e8       	ldi	r24, 0x8F	; 143
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcdCommand+0x16>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <lcdCommand+0x1c>
 10e:	00 00       	nop
 110:	08 95       	ret

00000112 <lcdData>:
}

//*******************************************************
void lcdData( unsigned char data )
{
  LCD_DPRT = data;			
 112:	8b b9       	out	0x0b, r24	; 11
  LCD_CPRT |= (1<<LCD_RS);	
 114:	70 9a       	sbi	0x0e, 0	; 14
  LCD_CPRT &= ~ (1<<LCD_RW);
 116:	71 98       	cbi	0x0e, 1	; 14
  LCD_CPRT |= (1<<LCD_EN);	
 118:	72 9a       	sbi	0x0e, 2	; 14
 11a:	85 e0       	ldi	r24, 0x05	; 5
 11c:	8a 95       	dec	r24
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcdData+0xa>
 120:	00 00       	nop
  _delay_us(1);				
  LCD_CPRT &= ~ (1<<LCD_EN);
 122:	72 98       	cbi	0x0e, 2	; 14
 124:	8f e8       	ldi	r24, 0x8F	; 143
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcdData+0x16>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcdData+0x1c>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <lcd_init>:
}

//*******************************************************
void lcd_init()
{
  LCD_DDDR = 0xFF;
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	8a b9       	out	0x0a, r24	; 10
  LCD_CDDR = 0xFF;
 136:	8d b9       	out	0x0d, r24	; 13
 
  LCD_CPRT &=~(1<<LCD_EN);	
 138:	72 98       	cbi	0x0e, 2	; 14
 13a:	8f e3       	ldi	r24, 0x3F	; 63
 13c:	9f e1       	ldi	r25, 0x1F	; 31
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_init+0xc>
 142:	00 c0       	rjmp	.+0      	; 0x144 <lcd_init+0x12>
 144:	00 00       	nop
  _delay_us(2000);			
  lcdCommand(0x38);			
 146:	88 e3       	ldi	r24, 0x38	; 56
 148:	0e 94 79 00 	call	0xf2	; 0xf2 <lcdCommand>
  lcdCommand(0x0E);			
 14c:	8e e0       	ldi	r24, 0x0E	; 14
 14e:	0e 94 79 00 	call	0xf2	; 0xf2 <lcdCommand>
  lcdCommand(0x0C);
 152:	8c e0       	ldi	r24, 0x0C	; 12
 154:	0e 94 79 00 	call	0xf2	; 0xf2 <lcdCommand>
  lcdCommand(0x01); //clear
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 79 00 	call	0xf2	; 0xf2 <lcdCommand>
 15e:	8f e3       	ldi	r24, 0x3F	; 63
 160:	9f e1       	ldi	r25, 0x1F	; 31
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_init+0x30>
 166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_init+0x36>
 168:	00 00       	nop
  _delay_us(2000);			
  lcdCommand(0x06);			
 16a:	86 e0       	ldi	r24, 0x06	; 6
 16c:	0e 94 79 00 	call	0xf2	; 0xf2 <lcdCommand>
 170:	08 95       	ret

00000172 <lcd_gotoxy>:
}

//*******************************************************
void lcd_gotoxy(unsigned char x, unsigned char y)
{  
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	00 d0       	rcall	.+0      	; 0x178 <lcd_gotoxy+0x6>
 178:	00 d0       	rcall	.+0      	; 0x17a <lcd_gotoxy+0x8>
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 unsigned char firstCharAdr[]={0x80,0xC0,0x94,0xD4};//table 12-5  
 17e:	90 e8       	ldi	r25, 0x80	; 128
 180:	99 83       	std	Y+1, r25	; 0x01
 182:	90 ec       	ldi	r25, 0xC0	; 192
 184:	9a 83       	std	Y+2, r25	; 0x02
 186:	94 e9       	ldi	r25, 0x94	; 148
 188:	9b 83       	std	Y+3, r25	; 0x03
 18a:	94 ed       	ldi	r25, 0xD4	; 212
 18c:	9c 83       	std	Y+4, r25	; 0x04
 lcdCommand(firstCharAdr[y-1] + x - 1);
 18e:	fe 01       	movw	r30, r28
 190:	e6 0f       	add	r30, r22
 192:	f1 1d       	adc	r31, r1
 194:	81 50       	subi	r24, 0x01	; 1
 196:	90 81       	ld	r25, Z
 198:	89 0f       	add	r24, r25
 19a:	0e 94 79 00 	call	0xf2	; 0xf2 <lcdCommand>
 19e:	8f e8       	ldi	r24, 0x8F	; 143
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_gotoxy+0x30>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_gotoxy+0x36>
 1a8:	00 00       	nop
 _delay_us(100);	
}
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	0f 90       	pop	r0
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <lcd_print>:

//*******************************************************
void lcd_print( char * str )
{
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	fc 01       	movw	r30, r24
  unsigned char i = 0 ;
  while(str[i]!=0)
 1c0:	80 81       	ld	r24, Z
 1c2:	88 23       	and	r24, r24
 1c4:	59 f0       	breq	.+22     	; 0x1dc <lcd_print+0x24>
 1c6:	8f 01       	movw	r16, r30
 1c8:	c0 e0       	ldi	r28, 0x00	; 0
  {
    lcdData(str[i]);
 1ca:	0e 94 89 00 	call	0x112	; 0x112 <lcdData>
    i++ ;
 1ce:	cf 5f       	subi	r28, 0xFF	; 255

//*******************************************************
void lcd_print( char * str )
{
  unsigned char i = 0 ;
  while(str[i]!=0)
 1d0:	f8 01       	movw	r30, r16
 1d2:	ec 0f       	add	r30, r28
 1d4:	f1 1d       	adc	r31, r1
 1d6:	80 81       	ld	r24, Z
 1d8:	81 11       	cpse	r24, r1
 1da:	f7 cf       	rjmp	.-18     	; 0x1ca <lcd_print+0x12>
  {
    lcdData(str[i]);
    i++ ;
  }
}
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	08 95       	ret

000001e4 <ftoa>:
 */ 

#ifndef FLOATCONVERT_H_
#define FLOATCONVERT_H_
void ftoa(int n, char* res)
{
 1e4:	ef 92       	push	r14
 1e6:	ff 92       	push	r15
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
 1f4:	2b 97       	sbiw	r28, 0x0b	; 11
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	f8 94       	cli
 1fa:	de bf       	out	0x3e, r29	; 62
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	8c 01       	movw	r16, r24
 202:	9b 01       	movw	r18, r22
	char numbers[11] = "0123456789";
 204:	8b e0       	ldi	r24, 0x0B	; 11
 206:	e2 e0       	ldi	r30, 0x02	; 2
 208:	f1 e0       	ldi	r31, 0x01	; 1
 20a:	de 01       	movw	r26, r28
 20c:	11 96       	adiw	r26, 0x01	; 1
 20e:	01 90       	ld	r0, Z+
 210:	0d 92       	st	X+, r0
 212:	8a 95       	dec	r24
 214:	e1 f7       	brne	.-8      	; 0x20e <ftoa+0x2a>
	int power = 0;

	if (n < 10)
 216:	0a 30       	cpi	r16, 0x0A	; 10
 218:	11 05       	cpc	r17, r1
 21a:	0c f4       	brge	.+2      	; 0x21e <ftoa+0x3a>
 21c:	5a c0       	rjmp	.+180    	; 0x2d2 <ftoa+0xee>
	power = 0;
	else if (n < 100)
 21e:	04 36       	cpi	r16, 0x64	; 100
 220:	11 05       	cpc	r17, r1
 222:	0c f5       	brge	.+66     	; 0x266 <ftoa+0x82>

		break;
		
		
		case 1:
		res[0] = '0';
 224:	80 e3       	ldi	r24, 0x30	; 48
 226:	db 01       	movw	r26, r22
 228:	8c 93       	st	X, r24
		res[1] = numbers[n/10];
 22a:	c8 01       	movw	r24, r16
 22c:	6a e0       	ldi	r22, 0x0A	; 10
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	0e 94 49 04 	call	0x892	; 0x892 <__divmodhi4>
 234:	e1 e0       	ldi	r30, 0x01	; 1
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	ec 0f       	add	r30, r28
 23a:	fd 1f       	adc	r31, r29
 23c:	e6 0f       	add	r30, r22
 23e:	f7 1f       	adc	r31, r23
 240:	40 81       	ld	r20, Z
 242:	f9 01       	movw	r30, r18
 244:	41 83       	std	Z+1, r20	; 0x01
		res[2] = '.';
 246:	4e e2       	ldi	r20, 0x2E	; 46
 248:	42 83       	std	Z+2, r20	; 0x02
		res[3] = numbers[n % 10];
 24a:	e1 e0       	ldi	r30, 0x01	; 1
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	ec 0f       	add	r30, r28
 250:	fd 1f       	adc	r31, r29
 252:	e8 0f       	add	r30, r24
 254:	f9 1f       	adc	r31, r25
 256:	80 81       	ld	r24, Z
 258:	d9 01       	movw	r26, r18
 25a:	13 96       	adiw	r26, 0x03	; 3
 25c:	8c 93       	st	X, r24
 25e:	13 97       	sbiw	r26, 0x03	; 3
		res[4] = '\0';
 260:	14 96       	adiw	r26, 0x04	; 4
 262:	1c 92       	st	X, r1

		break;
 264:	49 c0       	rjmp	.+146    	; 0x2f8 <ftoa+0x114>
		
		
		case 2:
		res[0] = numbers[n / 100];
 266:	c8 01       	movw	r24, r16
 268:	64 e6       	ldi	r22, 0x64	; 100
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	0e 94 49 04 	call	0x892	; 0x892 <__divmodhi4>
 270:	7c 01       	movw	r14, r24
 272:	e1 e0       	ldi	r30, 0x01	; 1
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	ec 0f       	add	r30, r28
 278:	fd 1f       	adc	r31, r29
 27a:	e6 0f       	add	r30, r22
 27c:	f7 1f       	adc	r31, r23
 27e:	80 81       	ld	r24, Z
 280:	f9 01       	movw	r30, r18
 282:	80 83       	st	Z, r24
		res[1] = numbers[(n / 10) % 10];
 284:	ea e0       	ldi	r30, 0x0A	; 10
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	c8 01       	movw	r24, r16
 28a:	bf 01       	movw	r22, r30
 28c:	0e 94 49 04 	call	0x892	; 0x892 <__divmodhi4>
 290:	cb 01       	movw	r24, r22
 292:	bf 01       	movw	r22, r30
 294:	0e 94 49 04 	call	0x892	; 0x892 <__divmodhi4>
 298:	a1 e0       	ldi	r26, 0x01	; 1
 29a:	b0 e0       	ldi	r27, 0x00	; 0
 29c:	ac 0f       	add	r26, r28
 29e:	bd 1f       	adc	r27, r29
 2a0:	a8 0f       	add	r26, r24
 2a2:	b9 1f       	adc	r27, r25
 2a4:	8c 91       	ld	r24, X
 2a6:	d9 01       	movw	r26, r18
 2a8:	11 96       	adiw	r26, 0x01	; 1
 2aa:	8c 93       	st	X, r24
 2ac:	11 97       	sbiw	r26, 0x01	; 1
		res[2] = '.';
 2ae:	8e e2       	ldi	r24, 0x2E	; 46
 2b0:	12 96       	adiw	r26, 0x02	; 2
 2b2:	8c 93       	st	X, r24
		res[3] = numbers[(n % 100) % 10];
 2b4:	c7 01       	movw	r24, r14
 2b6:	bf 01       	movw	r22, r30
 2b8:	0e 94 49 04 	call	0x892	; 0x892 <__divmodhi4>
 2bc:	e1 e0       	ldi	r30, 0x01	; 1
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	ec 0f       	add	r30, r28
 2c2:	fd 1f       	adc	r31, r29
 2c4:	e8 0f       	add	r30, r24
 2c6:	f9 1f       	adc	r31, r25
 2c8:	80 81       	ld	r24, Z
 2ca:	f9 01       	movw	r30, r18
 2cc:	83 83       	std	Z+3, r24	; 0x03
		res[4] = '\0';
 2ce:	14 82       	std	Z+4, r1	; 0x04
		break;
 2d0:	13 c0       	rjmp	.+38     	; 0x2f8 <ftoa+0x114>
	else
	power = 2;
	switch (power)
	{
		case 0: // tenth decimal place
		res[0] = '0';
 2d2:	80 e3       	ldi	r24, 0x30	; 48
 2d4:	db 01       	movw	r26, r22
 2d6:	8c 93       	st	X, r24
		res[1] = '0';
 2d8:	11 96       	adiw	r26, 0x01	; 1
 2da:	8c 93       	st	X, r24
 2dc:	11 97       	sbiw	r26, 0x01	; 1
		res[2] = '.';
 2de:	8e e2       	ldi	r24, 0x2E	; 46
 2e0:	12 96       	adiw	r26, 0x02	; 2
 2e2:	8c 93       	st	X, r24
 2e4:	12 97       	sbiw	r26, 0x02	; 2
		res[3] = numbers[n];
 2e6:	fe 01       	movw	r30, r28
 2e8:	e0 0f       	add	r30, r16
 2ea:	f1 1f       	adc	r31, r17
 2ec:	81 81       	ldd	r24, Z+1	; 0x01
 2ee:	13 96       	adiw	r26, 0x03	; 3
 2f0:	8c 93       	st	X, r24
 2f2:	13 97       	sbiw	r26, 0x03	; 3
		res[4] = '\0';
 2f4:	14 96       	adiw	r26, 0x04	; 4
 2f6:	1c 92       	st	X, r1
		res[4] = '\0';
		break;
		
	}

}
 2f8:	2b 96       	adiw	r28, 0x0b	; 11
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	f8 94       	cli
 2fe:	de bf       	out	0x3e, r29	; 62
 300:	0f be       	out	0x3f, r0	; 63
 302:	cd bf       	out	0x3d, r28	; 61
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	1f 91       	pop	r17
 30a:	0f 91       	pop	r16
 30c:	ff 90       	pop	r15
 30e:	ef 90       	pop	r14
 310:	08 95       	ret

00000312 <main>:
int main(void)
{

	// arbitrary ports right now

	DDRC &= ~(_BV(2) | _BV(1) | _BV(4)); // sets PORTC 1, 2, and 4 to input (input from rotary encoder)
 312:	87 b1       	in	r24, 0x07	; 7
 314:	89 7e       	andi	r24, 0xE9	; 233
 316:	87 b9       	out	0x07, r24	; 7
										 // 1 = DT signal
										 // 2 = CLK signal
										 // 4 = SW signal (button press)
										 
	PCICR |= (1<<PCIE1); // Enable pin change interrupt on PORTC
 318:	e8 e6       	ldi	r30, 0x68	; 104
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	82 60       	ori	r24, 0x02	; 2
 320:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT12) | (1<<PCINT9) | (1<<PCINT10); // Enable Pins 1,2, and 4 to trigger this interrupt
 322:	ec e6       	ldi	r30, 0x6C	; 108
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	86 61       	ori	r24, 0x16	; 22
 32a:	80 83       	st	Z, r24
	
	// These variables are Char arrays as the LCD cannot output int/float values, it must be sent as a string
	
	lcd_init(); // initialize the LCD according to Dr. Viall's 263 code
 32c:	0e 94 99 00 	call	0x132	; 0x132 <lcd_init>
	
	angleConv[0]='0'; // v Set up height and angle to start at 00.0 value
 330:	e6 e7       	ldi	r30, 0x76	; 118
 332:	f1 e0       	ldi	r31, 0x01	; 1
 334:	80 e3       	ldi	r24, 0x30	; 48
 336:	80 83       	st	Z, r24
	angleConv[1]='0';
 338:	81 83       	std	Z+1, r24	; 0x01
	angleConv[2]='.';
 33a:	9e e2       	ldi	r25, 0x2E	; 46
 33c:	92 83       	std	Z+2, r25	; 0x02
	angleConv[3]='0';
 33e:	83 83       	std	Z+3, r24	; 0x03
	heightConv[0]='0';
 340:	e6 e8       	ldi	r30, 0x86	; 134
 342:	f1 e0       	ldi	r31, 0x01	; 1
 344:	80 83       	st	Z, r24
	heightConv[1]='0';
 346:	81 83       	std	Z+1, r24	; 0x01
	heightConv[2]='.';
 348:	92 83       	std	Z+2, r25	; 0x02
	heightConv[3]='0';// ^
 34a:	83 83       	std	Z+3, r24	; 0x03
	
	// PRINT DEFAULT STATE
	lcd_gotoxy(1,1); // go to row 1 column 1 of LCD
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
	lcd_print(HEIGHT_SELECT); // Print ->   [HEIGHT] ANGLE
 354:	8d e0       	ldi	r24, 0x0D	; 13
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
	lcd_gotoxy(1,2); // go to row 2 column 2 of LCD
 35c:	62 e0       	ldi	r22, 0x02	; 2
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
	lcd_print(DEFAULT_ANGLE); // Print -> 00.0 00.0
 364:	8e e1       	ldi	r24, 0x1E	; 30
 366:	91 e0       	ldi	r25, 0x01	; 1
 368:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
	
	sei(); // enable global interrupts
 36c:	78 94       	sei
 36e:	ff cf       	rjmp	.-2      	; 0x36e <main+0x5c>

00000370 <print_height_angle>:

/************************************************* NUMBER CHANING FUNCTIONS **********************************************************************************/

// Function used to print either the height or angle selection ** THIS FUNCTION IS ONLY FOR CHANGING THE SELECTION **
void print_height_angle(char *angleConv, char *heightConv, int heightSelect)
{
 370:	ef 92       	push	r14
 372:	ff 92       	push	r15
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	ec 01       	movw	r28, r24
 37e:	8b 01       	movw	r16, r22
 380:	7a 01       	movw	r14, r20
	lcd_gotoxy(1,1);
 382:	61 e0       	ldi	r22, 0x01	; 1
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
	if (heightSelect == 1)
 38a:	ea 94       	dec	r14
 38c:	ef 28       	or	r14, r15
 38e:	29 f4       	brne	.+10     	; 0x39a <print_height_angle+0x2a>
		lcd_print(HEIGHT_SELECT);
 390:	8d e0       	ldi	r24, 0x0D	; 13
 392:	91 e0       	ldi	r25, 0x01	; 1
 394:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
 398:	04 c0       	rjmp	.+8      	; 0x3a2 <print_height_angle+0x32>
	else 
		lcd_print(ANGLE_SELECT);
 39a:	8d e2       	ldi	r24, 0x2D	; 45
 39c:	91 e0       	ldi	r25, 0x01	; 1
 39e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
	// un-select bottom row
	lcd_gotoxy(1,2);
 3a2:	62 e0       	ldi	r22, 0x02	; 2
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
	lcd_print(" ");
 3aa:	80 e6       	ldi	r24, 0x60	; 96
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
	lcd_print(heightConv);
 3b2:	c8 01       	movw	r24, r16
 3b4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
	lcd_gotoxy(6,2);
 3b8:	62 e0       	ldi	r22, 0x02	; 2
 3ba:	86 e0       	ldi	r24, 0x06	; 6
 3bc:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
	lcd_print(" ");
 3c0:	80 e6       	ldi	r24, 0x60	; 96
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
	lcd_gotoxy(10,2);
 3c8:	62 e0       	ldi	r22, 0x02	; 2
 3ca:	8a e0       	ldi	r24, 0x0A	; 10
 3cc:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
	lcd_print(" ");
 3d0:	80 e6       	ldi	r24, 0x60	; 96
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
	lcd_print(angleConv);
 3d8:	ce 01       	movw	r24, r28
 3da:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
	lcd_gotoxy(15,2);
 3de:	62 e0       	ldi	r22, 0x02	; 2
 3e0:	8f e0       	ldi	r24, 0x0F	; 15
 3e2:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
	lcd_print(" ");
 3e6:	80 e6       	ldi	r24, 0x60	; 96
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
}
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	1f 91       	pop	r17
 3f4:	0f 91       	pop	r16
 3f6:	ff 90       	pop	r15
 3f8:	ef 90       	pop	r14
 3fa:	08 95       	ret

000003fc <print_height_change>:

// Function used to print a change in the height value
void print_height_change(char *conversion)
{
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	ec 01       	movw	r28, r24
	//ensure height becomes unselected
	lcd_gotoxy(1,1);
 402:	61 e0       	ldi	r22, 0x01	; 1
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
	lcd_print(NO_HS_SELECT);
 40a:	8e e3       	ldi	r24, 0x3E	; 62
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
	lcd_gotoxy(1,2);
 412:	62 e0       	ldi	r22, 0x02	; 2
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
	lcd_print("[");
 41a:	8f e4       	ldi	r24, 0x4F	; 79
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
	lcd_gotoxy(2,2);
 422:	62 e0       	ldi	r22, 0x02	; 2
 424:	82 e0       	ldi	r24, 0x02	; 2
 426:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
	lcd_print(conversion);
 42a:	ce 01       	movw	r24, r28
 42c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
	lcd_gotoxy(6,2);
 430:	62 e0       	ldi	r22, 0x02	; 2
 432:	86 e0       	ldi	r24, 0x06	; 6
 434:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
	lcd_print("]");
 438:	8c e3       	ldi	r24, 0x3C	; 60
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
}
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	08 95       	ret

00000446 <print_angle_change>:

// Function used to print a change in the angle value
void print_angle_change(char *conversion)
{
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	ec 01       	movw	r28, r24
	lcd_gotoxy(1,1);
 44c:	61 e0       	ldi	r22, 0x01	; 1
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
	lcd_print(NO_HS_SELECT);
 454:	8e e3       	ldi	r24, 0x3E	; 62
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
	lcd_gotoxy(10,2);
 45c:	62 e0       	ldi	r22, 0x02	; 2
 45e:	8a e0       	ldi	r24, 0x0A	; 10
 460:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
	lcd_print("[");
 464:	8f e4       	ldi	r24, 0x4F	; 79
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
	lcd_gotoxy(11,2);
 46c:	62 e0       	ldi	r22, 0x02	; 2
 46e:	8b e0       	ldi	r24, 0x0B	; 11
 470:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
	lcd_print(conversion);
 474:	ce 01       	movw	r24, r28
 476:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
	lcd_gotoxy(15,2);
 47a:	62 e0       	ldi	r22, 0x02	; 2
 47c:	8f e0       	ldi	r24, 0x0F	; 15
 47e:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
	lcd_print("]");
 482:	8c e3       	ldi	r24, 0x3C	; 60
 484:	91 e0       	ldi	r25, 0x01	; 1
 486:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
	
}
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <__vector_4>:
//		- Confirms height / angle adjustment
//		- Selects angle / height and moves user to adjust height / angle

float tmp=0;
ISR(PCINT1_vect) 
{
 490:	1f 92       	push	r1
 492:	0f 92       	push	r0
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	0f 92       	push	r0
 498:	11 24       	eor	r1, r1
 49a:	2f 93       	push	r18
 49c:	3f 93       	push	r19
 49e:	4f 93       	push	r20
 4a0:	5f 93       	push	r21
 4a2:	6f 93       	push	r22
 4a4:	7f 93       	push	r23
 4a6:	8f 93       	push	r24
 4a8:	9f 93       	push	r25
 4aa:	af 93       	push	r26
 4ac:	bf 93       	push	r27
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
 4b2:	ef 93       	push	r30
 4b4:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b6:	8f e1       	ldi	r24, 0x1F	; 31
 4b8:	9e e4       	ldi	r25, 0x4E	; 78
 4ba:	01 97       	sbiw	r24, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <__vector_4+0x2a>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <__vector_4+0x30>
 4c0:	00 00       	nop
	_delay_ms(5);
	tmp=PINC;
 4c2:	66 b1       	in	r22, 0x06	; 6
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 0c 04 	call	0x818	; 0x818 <__floatunsisf>
 4ce:	60 93 72 01 	sts	0x0172, r22	; 0x800172 <__data_end>
 4d2:	70 93 73 01 	sts	0x0173, r23	; 0x800173 <__data_end+0x1>
 4d6:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <__data_end+0x2>
 4da:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <__data_end+0x3>
// 	ftoa(tmp,heightConv);
// 	print_height_change(heightConv);
	
	if(PINC == RIGHT) //if right turn triggered interrupt
 4de:	86 b1       	in	r24, 0x06	; 6
 4e0:	8b 37       	cpi	r24, 0x7B	; 123
 4e2:	09 f0       	breq	.+2      	; 0x4e6 <__vector_4+0x56>
 4e4:	93 c0       	rjmp	.+294    	; 0x60c <__vector_4+0x17c>
	{
		switch(state)
 4e6:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <state>
 4ea:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <state+0x1>
 4ee:	81 30       	cpi	r24, 0x01	; 1
 4f0:	91 05       	cpc	r25, r1
 4f2:	d1 f0       	breq	.+52     	; 0x528 <__vector_4+0x98>
 4f4:	1c f4       	brge	.+6      	; 0x4fc <__vector_4+0x6c>
 4f6:	89 2b       	or	r24, r25
 4f8:	41 f0       	breq	.+16     	; 0x50a <__vector_4+0x7a>
 4fa:	88 c0       	rjmp	.+272    	; 0x60c <__vector_4+0x17c>
 4fc:	82 30       	cpi	r24, 0x02	; 2
 4fe:	91 05       	cpc	r25, r1
 500:	a9 f1       	breq	.+106    	; 0x56c <__vector_4+0xdc>
 502:	03 97       	sbiw	r24, 0x03	; 3
 504:	09 f4       	brne	.+2      	; 0x508 <__vector_4+0x78>
 506:	5b c0       	rjmp	.+182    	; 0x5be <__vector_4+0x12e>
 508:	81 c0       	rjmp	.+258    	; 0x60c <__vector_4+0x17c>
		{
			case HEIGHT: // change to angle state
				print_height_angle(angleConv,heightConv,0);
 50a:	40 e0       	ldi	r20, 0x00	; 0
 50c:	50 e0       	ldi	r21, 0x00	; 0
 50e:	66 e8       	ldi	r22, 0x86	; 134
 510:	71 e0       	ldi	r23, 0x01	; 1
 512:	86 e7       	ldi	r24, 0x76	; 118
 514:	91 e0       	ldi	r25, 0x01	; 1
 516:	0e 94 b8 01 	call	0x370	; 0x370 <print_height_angle>
				state = ANGLE;
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <state+0x1>
 522:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <state>
				break;
 526:	72 c0       	rjmp	.+228    	; 0x60c <__vector_4+0x17c>
			case ANGLE: // Change increment/decrement value to 10
				valueChange = 10;
 528:	8a e0       	ldi	r24, 0x0A	; 10
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 530:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				cli();
 534:	f8 94       	cli
				lcd_gotoxy(1,1);
 536:	61 e0       	ldi	r22, 0x01	; 1
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
				lcd_print("Order +-1       ");
 53e:	81 e5       	ldi	r24, 0x51	; 81
 540:	91 e0       	ldi	r25, 0x01	; 1
 542:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
 546:	9f ef       	ldi	r25, 0xFF	; 255
 548:	23 ed       	ldi	r18, 0xD3	; 211
 54a:	80 e3       	ldi	r24, 0x30	; 48
 54c:	91 50       	subi	r25, 0x01	; 1
 54e:	20 40       	sbci	r18, 0x00	; 0
 550:	80 40       	sbci	r24, 0x00	; 0
 552:	e1 f7       	brne	.-8      	; 0x54c <__vector_4+0xbc>
 554:	00 c0       	rjmp	.+0      	; 0x556 <__vector_4+0xc6>
 556:	00 00       	nop
				_delay_ms(1000);
				lcd_gotoxy(1,1);
 558:	61 e0       	ldi	r22, 0x01	; 1
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
				lcd_print(ANGLE_SELECT);
 560:	8d e2       	ldi	r24, 0x2D	; 45
 562:	91 e0       	ldi	r25, 0x01	; 1
 564:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
				sei();
 568:	78 94       	sei
				break;
 56a:	50 c0       	rjmp	.+160    	; 0x60c <__vector_4+0x17c>
			case CHEIGHT: // increment height value (as long as < MAX (?))
				if ((height+valueChange) <= MAX_HEIGHT) // total guess right now
 56c:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <height>
 570:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <height+0x1>
 574:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 578:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 57c:	82 0f       	add	r24, r18
 57e:	93 1f       	adc	r25, r19
 580:	87 39       	cpi	r24, 0x97	; 151
 582:	91 05       	cpc	r25, r1
 584:	0c f0       	brlt	.+2      	; 0x588 <__vector_4+0xf8>
 586:	42 c0       	rjmp	.+132    	; 0x60c <__vector_4+0x17c>
				{
					height=height + valueChange; //increment height by tenth
 588:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <height>
 58c:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <height+0x1>
 590:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 594:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 598:	82 0f       	add	r24, r18
 59a:	93 1f       	adc	r25, r19
 59c:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <height+0x1>
 5a0:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <height>
					ftoa(height,heightConv); // convert height to char array (heightConv) with 1 decimal place
 5a4:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <height>
 5a8:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <height+0x1>
 5ac:	66 e8       	ldi	r22, 0x86	; 134
 5ae:	71 e0       	ldi	r23, 0x01	; 1
 5b0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ftoa>
					print_height_change(heightConv); // print conversion to LCD
 5b4:	86 e8       	ldi	r24, 0x86	; 134
 5b6:	91 e0       	ldi	r25, 0x01	; 1
 5b8:	0e 94 fe 01 	call	0x3fc	; 0x3fc <print_height_change>
 5bc:	27 c0       	rjmp	.+78     	; 0x60c <__vector_4+0x17c>
				}
				break;	
			case CANGLE: // increment angle value (as long as <= MAX (90))
				if ((angle+valueChange) <= MAX_ANGLE)
 5be:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <angle>
 5c2:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <angle+0x1>
 5c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5ca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 5ce:	82 0f       	add	r24, r18
 5d0:	93 1f       	adc	r25, r19
 5d2:	85 38       	cpi	r24, 0x85	; 133
 5d4:	93 40       	sbci	r25, 0x03	; 3
 5d6:	d4 f4       	brge	.+52     	; 0x60c <__vector_4+0x17c>
				{
					angle=angle + valueChange;
 5d8:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <angle>
 5dc:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <angle+0x1>
 5e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5e4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 5e8:	82 0f       	add	r24, r18
 5ea:	93 1f       	adc	r25, r19
 5ec:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <angle+0x1>
 5f0:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <angle>
					ftoa(angle,angleConv); // convert angle to char array (angleConv) with 1 decimal place
 5f4:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <angle>
 5f8:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <angle+0x1>
 5fc:	66 e7       	ldi	r22, 0x76	; 118
 5fe:	71 e0       	ldi	r23, 0x01	; 1
 600:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ftoa>
					print_angle_change(angleConv);	// print conversion to LCD
 604:	86 e7       	ldi	r24, 0x76	; 118
 606:	91 e0       	ldi	r25, 0x01	; 1
 608:	0e 94 23 02 	call	0x446	; 0x446 <print_angle_change>
				break;
		}
	}
	
	
	if (PINC == LEFT) // If left turn triggered interrupt
 60c:	86 b1       	in	r24, 0x06	; 6
 60e:	8d 37       	cpi	r24, 0x7D	; 125
 610:	09 f0       	breq	.+2      	; 0x614 <__vector_4+0x184>
 612:	8c c0       	rjmp	.+280    	; 0x72c <__vector_4+0x29c>
	{
		switch(state)
 614:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <state>
 618:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <state+0x1>
 61c:	81 30       	cpi	r24, 0x01	; 1
 61e:	91 05       	cpc	r25, r1
 620:	61 f1       	breq	.+88     	; 0x67a <__vector_4+0x1ea>
 622:	1c f4       	brge	.+6      	; 0x62a <__vector_4+0x19a>
 624:	89 2b       	or	r24, r25
 626:	41 f0       	breq	.+16     	; 0x638 <__vector_4+0x1a8>
 628:	81 c0       	rjmp	.+258    	; 0x72c <__vector_4+0x29c>
 62a:	82 30       	cpi	r24, 0x02	; 2
 62c:	91 05       	cpc	r25, r1
 62e:	91 f1       	breq	.+100    	; 0x694 <__vector_4+0x204>
 630:	03 97       	sbiw	r24, 0x03	; 3
 632:	09 f4       	brne	.+2      	; 0x636 <__vector_4+0x1a6>
 634:	56 c0       	rjmp	.+172    	; 0x6e2 <__vector_4+0x252>
 636:	7a c0       	rjmp	.+244    	; 0x72c <__vector_4+0x29c>
		{
			case HEIGHT: // Change increment/decrement value to 1
				valueChange = 1;
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 640:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				cli();
 644:	f8 94       	cli
				lcd_gotoxy(1,1);
 646:	61 e0       	ldi	r22, 0x01	; 1
 648:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
				lcd_print("Order +-.1     ");
 64c:	82 e6       	ldi	r24, 0x62	; 98
 64e:	91 e0       	ldi	r25, 0x01	; 1
 650:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
 654:	8f ef       	ldi	r24, 0xFF	; 255
 656:	93 ed       	ldi	r25, 0xD3	; 211
 658:	20 e3       	ldi	r18, 0x30	; 48
 65a:	81 50       	subi	r24, 0x01	; 1
 65c:	90 40       	sbci	r25, 0x00	; 0
 65e:	20 40       	sbci	r18, 0x00	; 0
 660:	e1 f7       	brne	.-8      	; 0x65a <__vector_4+0x1ca>
 662:	00 c0       	rjmp	.+0      	; 0x664 <__vector_4+0x1d4>
 664:	00 00       	nop
				_delay_ms(1000);
				lcd_gotoxy(1,1);
 666:	61 e0       	ldi	r22, 0x01	; 1
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
				lcd_print(HEIGHT_SELECT);
 66e:	8d e0       	ldi	r24, 0x0D	; 13
 670:	91 e0       	ldi	r25, 0x01	; 1
 672:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
				sei();
 676:	78 94       	sei
				break;
 678:	59 c0       	rjmp	.+178    	; 0x72c <__vector_4+0x29c>
			case ANGLE: // change to height state
				print_height_angle(angleConv,heightConv, 1);
 67a:	41 e0       	ldi	r20, 0x01	; 1
 67c:	50 e0       	ldi	r21, 0x00	; 0
 67e:	66 e8       	ldi	r22, 0x86	; 134
 680:	71 e0       	ldi	r23, 0x01	; 1
 682:	86 e7       	ldi	r24, 0x76	; 118
 684:	91 e0       	ldi	r25, 0x01	; 1
 686:	0e 94 b8 01 	call	0x370	; 0x370 <print_height_angle>
				state = HEIGHT;
 68a:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <state+0x1>
 68e:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <state>
				break;
 692:	4c c0       	rjmp	.+152    	; 0x72c <__vector_4+0x29c>
			case CHEIGHT: // decrement height value (as long as >= MIN (0) )
				if ((height-valueChange) >= 0)
 694:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <height>
 698:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <height+0x1>
 69c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 6a0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 6a4:	82 1b       	sub	r24, r18
 6a6:	93 0b       	sbc	r25, r19
 6a8:	0a f4       	brpl	.+2      	; 0x6ac <__vector_4+0x21c>
 6aa:	40 c0       	rjmp	.+128    	; 0x72c <__vector_4+0x29c>
				{
					height = height - valueChange;
 6ac:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <height>
 6b0:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <height+0x1>
 6b4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 6b8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 6bc:	82 1b       	sub	r24, r18
 6be:	93 0b       	sbc	r25, r19
 6c0:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <height+0x1>
 6c4:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <height>
					ftoa(height,heightConv); // convert height to char array (heightConv) with 1 decimal place
 6c8:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <height>
 6cc:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <height+0x1>
 6d0:	66 e8       	ldi	r22, 0x86	; 134
 6d2:	71 e0       	ldi	r23, 0x01	; 1
 6d4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ftoa>
					print_height_change(heightConv); // print conversion to LCD
 6d8:	86 e8       	ldi	r24, 0x86	; 134
 6da:	91 e0       	ldi	r25, 0x01	; 1
 6dc:	0e 94 fe 01 	call	0x3fc	; 0x3fc <print_height_change>
 6e0:	25 c0       	rjmp	.+74     	; 0x72c <__vector_4+0x29c>
				}
				break;
			case CANGLE: // increment angle value (as long as >= MIN (0))
				if((angle-valueChange) >= 0)
 6e2:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <angle>
 6e6:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <angle+0x1>
 6ea:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 6ee:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 6f2:	82 1b       	sub	r24, r18
 6f4:	93 0b       	sbc	r25, r19
 6f6:	d2 f0       	brmi	.+52     	; 0x72c <__vector_4+0x29c>
				{
					angle = angle - valueChange;
 6f8:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <angle>
 6fc:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <angle+0x1>
 700:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 704:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 708:	82 1b       	sub	r24, r18
 70a:	93 0b       	sbc	r25, r19
 70c:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <angle+0x1>
 710:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <angle>
					ftoa(angle,angleConv); // convert angle to char array (angleConv) with 1 decimal place
 714:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <angle>
 718:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <angle+0x1>
 71c:	66 e7       	ldi	r22, 0x76	; 118
 71e:	71 e0       	ldi	r23, 0x01	; 1
 720:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ftoa>
					print_angle_change(angleConv);	// print conversion to LCD
 724:	86 e7       	ldi	r24, 0x76	; 118
 726:	91 e0       	ldi	r25, 0x01	; 1
 728:	0e 94 23 02 	call	0x446	; 0x446 <print_angle_change>
				break;
		}
	}


	if(PINC == BUTTON) // If button press triggered interrupt
 72c:	86 b1       	in	r24, 0x06	; 6
 72e:	8f 36       	cpi	r24, 0x6F	; 111
 730:	09 f0       	breq	.+2      	; 0x734 <__vector_4+0x2a4>
 732:	5c c0       	rjmp	.+184    	; 0x7ec <__vector_4+0x35c>
	{
		switch(state)
 734:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <state>
 738:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <state+0x1>
 73c:	81 30       	cpi	r24, 0x01	; 1
 73e:	91 05       	cpc	r25, r1
 740:	e9 f0       	breq	.+58     	; 0x77c <__vector_4+0x2ec>
 742:	1c f4       	brge	.+6      	; 0x74a <__vector_4+0x2ba>
 744:	89 2b       	or	r24, r25
 746:	39 f0       	breq	.+14     	; 0x756 <__vector_4+0x2c6>
 748:	51 c0       	rjmp	.+162    	; 0x7ec <__vector_4+0x35c>
 74a:	82 30       	cpi	r24, 0x02	; 2
 74c:	91 05       	cpc	r25, r1
 74e:	49 f1       	breq	.+82     	; 0x7a2 <__vector_4+0x312>
 750:	03 97       	sbiw	r24, 0x03	; 3
 752:	d1 f1       	breq	.+116    	; 0x7c8 <__vector_4+0x338>
 754:	4b c0       	rjmp	.+150    	; 0x7ec <__vector_4+0x35c>
		{
			case HEIGHT: // change to height change state
				ftoa(height,heightConv);
 756:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <height>
 75a:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <height+0x1>
 75e:	66 e8       	ldi	r22, 0x86	; 134
 760:	71 e0       	ldi	r23, 0x01	; 1
 762:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ftoa>
				print_height_change(heightConv);
 766:	86 e8       	ldi	r24, 0x86	; 134
 768:	91 e0       	ldi	r25, 0x01	; 1
 76a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <print_height_change>
				state = CHEIGHT;
 76e:	82 e0       	ldi	r24, 0x02	; 2
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <state+0x1>
 776:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <state>
				break;
 77a:	38 c0       	rjmp	.+112    	; 0x7ec <__vector_4+0x35c>
			case ANGLE: // change to angle change state
				ftoa(angle,angleConv);
 77c:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <angle>
 780:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <angle+0x1>
 784:	66 e7       	ldi	r22, 0x76	; 118
 786:	71 e0       	ldi	r23, 0x01	; 1
 788:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <ftoa>
				print_angle_change(angleConv);
 78c:	86 e7       	ldi	r24, 0x76	; 118
 78e:	91 e0       	ldi	r25, 0x01	; 1
 790:	0e 94 23 02 	call	0x446	; 0x446 <print_angle_change>
				state = CANGLE;
 794:	83 e0       	ldi	r24, 0x03	; 3
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <state+0x1>
 79c:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <state>
				break;
 7a0:	25 c0       	rjmp	.+74     	; 0x7ec <__vector_4+0x35c>
			case CHEIGHT: // confirm height change value
				valueConfirm = 1; // set flag
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <valueConfirm+0x1>
 7aa:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <valueConfirm>
				print_height_angle(angleConv,heightConv, 1); // refresh screen with height selected 
 7ae:	41 e0       	ldi	r20, 0x01	; 1
 7b0:	50 e0       	ldi	r21, 0x00	; 0
 7b2:	66 e8       	ldi	r22, 0x86	; 134
 7b4:	71 e0       	ldi	r23, 0x01	; 1
 7b6:	86 e7       	ldi	r24, 0x76	; 118
 7b8:	91 e0       	ldi	r25, 0x01	; 1
 7ba:	0e 94 b8 01 	call	0x370	; 0x370 <print_height_angle>
				state = HEIGHT; // exit from change function
 7be:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <state+0x1>
 7c2:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <state>
				break;
 7c6:	12 c0       	rjmp	.+36     	; 0x7ec <__vector_4+0x35c>
			case CANGLE: // confirm angle change value
				valueConfirm = 1; // set flag - might need to make unique flag
 7c8:	c1 e0       	ldi	r28, 0x01	; 1
 7ca:	d0 e0       	ldi	r29, 0x00	; 0
 7cc:	d0 93 97 01 	sts	0x0197, r29	; 0x800197 <valueConfirm+0x1>
 7d0:	c0 93 96 01 	sts	0x0196, r28	; 0x800196 <valueConfirm>
				print_height_angle(angleConv,heightConv, 0); // refresh screen with angle selected
 7d4:	40 e0       	ldi	r20, 0x00	; 0
 7d6:	50 e0       	ldi	r21, 0x00	; 0
 7d8:	66 e8       	ldi	r22, 0x86	; 134
 7da:	71 e0       	ldi	r23, 0x01	; 1
 7dc:	86 e7       	ldi	r24, 0x76	; 118
 7de:	91 e0       	ldi	r25, 0x01	; 1
 7e0:	0e 94 b8 01 	call	0x370	; 0x370 <print_height_angle>
				state = ANGLE;
 7e4:	d0 93 9d 01 	sts	0x019D, r29	; 0x80019d <state+0x1>
 7e8:	c0 93 9c 01 	sts	0x019C, r28	; 0x80019c <state>
				break;
		}
	}
	
	while(PINC != 127)
 7ec:	86 b1       	in	r24, 0x06	; 6
 7ee:	8f 37       	cpi	r24, 0x7F	; 127
 7f0:	e9 f7       	brne	.-6      	; 0x7ec <__vector_4+0x35c>
	{
		
	}

}
 7f2:	ff 91       	pop	r31
 7f4:	ef 91       	pop	r30
 7f6:	df 91       	pop	r29
 7f8:	cf 91       	pop	r28
 7fa:	bf 91       	pop	r27
 7fc:	af 91       	pop	r26
 7fe:	9f 91       	pop	r25
 800:	8f 91       	pop	r24
 802:	7f 91       	pop	r23
 804:	6f 91       	pop	r22
 806:	5f 91       	pop	r21
 808:	4f 91       	pop	r20
 80a:	3f 91       	pop	r19
 80c:	2f 91       	pop	r18
 80e:	0f 90       	pop	r0
 810:	0f be       	out	0x3f, r0	; 63
 812:	0f 90       	pop	r0
 814:	1f 90       	pop	r1
 816:	18 95       	reti

00000818 <__floatunsisf>:
 818:	e8 94       	clt
 81a:	09 c0       	rjmp	.+18     	; 0x82e <__floatsisf+0x12>

0000081c <__floatsisf>:
 81c:	97 fb       	bst	r25, 7
 81e:	3e f4       	brtc	.+14     	; 0x82e <__floatsisf+0x12>
 820:	90 95       	com	r25
 822:	80 95       	com	r24
 824:	70 95       	com	r23
 826:	61 95       	neg	r22
 828:	7f 4f       	sbci	r23, 0xFF	; 255
 82a:	8f 4f       	sbci	r24, 0xFF	; 255
 82c:	9f 4f       	sbci	r25, 0xFF	; 255
 82e:	99 23       	and	r25, r25
 830:	a9 f0       	breq	.+42     	; 0x85c <__floatsisf+0x40>
 832:	f9 2f       	mov	r31, r25
 834:	96 e9       	ldi	r25, 0x96	; 150
 836:	bb 27       	eor	r27, r27
 838:	93 95       	inc	r25
 83a:	f6 95       	lsr	r31
 83c:	87 95       	ror	r24
 83e:	77 95       	ror	r23
 840:	67 95       	ror	r22
 842:	b7 95       	ror	r27
 844:	f1 11       	cpse	r31, r1
 846:	f8 cf       	rjmp	.-16     	; 0x838 <__floatsisf+0x1c>
 848:	fa f4       	brpl	.+62     	; 0x888 <__floatsisf+0x6c>
 84a:	bb 0f       	add	r27, r27
 84c:	11 f4       	brne	.+4      	; 0x852 <__floatsisf+0x36>
 84e:	60 ff       	sbrs	r22, 0
 850:	1b c0       	rjmp	.+54     	; 0x888 <__floatsisf+0x6c>
 852:	6f 5f       	subi	r22, 0xFF	; 255
 854:	7f 4f       	sbci	r23, 0xFF	; 255
 856:	8f 4f       	sbci	r24, 0xFF	; 255
 858:	9f 4f       	sbci	r25, 0xFF	; 255
 85a:	16 c0       	rjmp	.+44     	; 0x888 <__floatsisf+0x6c>
 85c:	88 23       	and	r24, r24
 85e:	11 f0       	breq	.+4      	; 0x864 <__floatsisf+0x48>
 860:	96 e9       	ldi	r25, 0x96	; 150
 862:	11 c0       	rjmp	.+34     	; 0x886 <__floatsisf+0x6a>
 864:	77 23       	and	r23, r23
 866:	21 f0       	breq	.+8      	; 0x870 <__floatsisf+0x54>
 868:	9e e8       	ldi	r25, 0x8E	; 142
 86a:	87 2f       	mov	r24, r23
 86c:	76 2f       	mov	r23, r22
 86e:	05 c0       	rjmp	.+10     	; 0x87a <__floatsisf+0x5e>
 870:	66 23       	and	r22, r22
 872:	71 f0       	breq	.+28     	; 0x890 <__floatsisf+0x74>
 874:	96 e8       	ldi	r25, 0x86	; 134
 876:	86 2f       	mov	r24, r22
 878:	70 e0       	ldi	r23, 0x00	; 0
 87a:	60 e0       	ldi	r22, 0x00	; 0
 87c:	2a f0       	brmi	.+10     	; 0x888 <__floatsisf+0x6c>
 87e:	9a 95       	dec	r25
 880:	66 0f       	add	r22, r22
 882:	77 1f       	adc	r23, r23
 884:	88 1f       	adc	r24, r24
 886:	da f7       	brpl	.-10     	; 0x87e <__floatsisf+0x62>
 888:	88 0f       	add	r24, r24
 88a:	96 95       	lsr	r25
 88c:	87 95       	ror	r24
 88e:	97 f9       	bld	r25, 7
 890:	08 95       	ret

00000892 <__divmodhi4>:
 892:	97 fb       	bst	r25, 7
 894:	07 2e       	mov	r0, r23
 896:	16 f4       	brtc	.+4      	; 0x89c <__divmodhi4+0xa>
 898:	00 94       	com	r0
 89a:	07 d0       	rcall	.+14     	; 0x8aa <__divmodhi4_neg1>
 89c:	77 fd       	sbrc	r23, 7
 89e:	09 d0       	rcall	.+18     	; 0x8b2 <__divmodhi4_neg2>
 8a0:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__udivmodhi4>
 8a4:	07 fc       	sbrc	r0, 7
 8a6:	05 d0       	rcall	.+10     	; 0x8b2 <__divmodhi4_neg2>
 8a8:	3e f4       	brtc	.+14     	; 0x8b8 <__divmodhi4_exit>

000008aa <__divmodhi4_neg1>:
 8aa:	90 95       	com	r25
 8ac:	81 95       	neg	r24
 8ae:	9f 4f       	sbci	r25, 0xFF	; 255
 8b0:	08 95       	ret

000008b2 <__divmodhi4_neg2>:
 8b2:	70 95       	com	r23
 8b4:	61 95       	neg	r22
 8b6:	7f 4f       	sbci	r23, 0xFF	; 255

000008b8 <__divmodhi4_exit>:
 8b8:	08 95       	ret

000008ba <__udivmodhi4>:
 8ba:	aa 1b       	sub	r26, r26
 8bc:	bb 1b       	sub	r27, r27
 8be:	51 e1       	ldi	r21, 0x11	; 17
 8c0:	07 c0       	rjmp	.+14     	; 0x8d0 <__udivmodhi4_ep>

000008c2 <__udivmodhi4_loop>:
 8c2:	aa 1f       	adc	r26, r26
 8c4:	bb 1f       	adc	r27, r27
 8c6:	a6 17       	cp	r26, r22
 8c8:	b7 07       	cpc	r27, r23
 8ca:	10 f0       	brcs	.+4      	; 0x8d0 <__udivmodhi4_ep>
 8cc:	a6 1b       	sub	r26, r22
 8ce:	b7 0b       	sbc	r27, r23

000008d0 <__udivmodhi4_ep>:
 8d0:	88 1f       	adc	r24, r24
 8d2:	99 1f       	adc	r25, r25
 8d4:	5a 95       	dec	r21
 8d6:	a9 f7       	brne	.-22     	; 0x8c2 <__udivmodhi4_loop>
 8d8:	80 95       	com	r24
 8da:	90 95       	com	r25
 8dc:	bc 01       	movw	r22, r24
 8de:	cd 01       	movw	r24, r26
 8e0:	08 95       	ret

000008e2 <_exit>:
 8e2:	f8 94       	cli

000008e4 <__stop_program>:
 8e4:	ff cf       	rjmp	.-2      	; 0x8e4 <__stop_program>
