
UI Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00001208  0000129c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001208  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000034  00800172  00800172  0000130e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000130e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017cd  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1f  00000000  00000000  00002bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000088d  00000000  00000000  000036ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00003f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000060a  00000000  00000000  00004140  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008bd  00000000  00000000  0000474a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00005007  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__ctors_end>
       4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      10:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__vector_4>
      14:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      18:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      1c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      20:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      24:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      28:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      2c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      30:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      34:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      38:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      3c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      40:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      44:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      48:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      4c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      50:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      54:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      58:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      5c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      60:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      64:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      68:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      6c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      70:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      74:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      78:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      7c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      80:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      84:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      88:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      8c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      90:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      94:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      98:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      9c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      ac:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      b0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      b4:	07 2c       	mov	r0, r7
      b6:	7a a5       	ldd	r23, Y+42	; 0x2a
      b8:	ba 6c       	ori	r27, 0xCA	; 202
      ba:	c5 90       	lpm	r12, Z+
      bc:	da 3b       	cpi	r29, 0xBA	; 186
      be:	93 65       	ori	r25, 0x53	; 83
      c0:	fc 8b       	std	Y+20, r31	; 0x14
      c2:	bc 53       	subi	r27, 0x3C	; 60
      c4:	f8 10       	cpse	r15, r8
      c6:	fd 3c       	cpi	r31, 0xCD	; 205
      c8:	56 92       	lac	Z, r5
      ca:	83 4d       	sbci	r24, 0xD3	; 211
      cc:	bd 87       	std	Y+13, r27	; 0x0d
      ce:	9d 3a       	cpi	r25, 0xAD	; 173
      d0:	b6 3d       	cpi	r27, 0xD6	; 214
      d2:	cb c9       	rjmp	.-3178   	; 0xfffff46a <__eeprom_end+0xff7ef46a>
      d4:	bf 5b       	subi	r27, 0xBF	; 191
      d6:	be 73       	andi	r27, 0x3E	; 62
      d8:	da 0f       	add	r29, r26
      da:	c9 3f       	cpi	r28, 0xF9	; 249
      dc:	05 a8       	ldd	r0, Z+53	; 0x35
      de:	4c cd       	rjmp	.-1384   	; 0xfffffb78 <__eeprom_end+0xff7efb78>
      e0:	b2 d4       	rcall	.+2404   	; 0xa46 <__stack+0x147>
      e2:	4e b9       	out	0x0e, r20	; 14
      e4:	38 36       	cpi	r19, 0x68	; 104
      e6:	a9 02       	muls	r26, r25
      e8:	0c 50       	subi	r16, 0x0C	; 12
      ea:	b9 91       	ld	r27, Y+
      ec:	86 88       	ldd	r8, Z+22	; 0x16
      ee:	08 3c       	cpi	r16, 0xC8	; 200
      f0:	a6 aa       	std	Z+54, r10	; 0x36
      f2:	aa 2a       	or	r10, r26
      f4:	be 00       	.word	0x00be	; ????
      f6:	00 00       	nop
      f8:	80 3f       	cpi	r24, 0xF0	; 240

000000fa <__ctors_end>:
      fa:	11 24       	eor	r1, r1
      fc:	1f be       	out	0x3f, r1	; 63
      fe:	cf ef       	ldi	r28, 0xFF	; 255
     100:	d8 e0       	ldi	r29, 0x08	; 8
     102:	de bf       	out	0x3e, r29	; 62
     104:	cd bf       	out	0x3d, r28	; 61

00000106 <__do_copy_data>:
     106:	11 e0       	ldi	r17, 0x01	; 1
     108:	a0 e0       	ldi	r26, 0x00	; 0
     10a:	b1 e0       	ldi	r27, 0x01	; 1
     10c:	e8 e0       	ldi	r30, 0x08	; 8
     10e:	f2 e1       	ldi	r31, 0x12	; 18
     110:	02 c0       	rjmp	.+4      	; 0x116 <__do_copy_data+0x10>
     112:	05 90       	lpm	r0, Z+
     114:	0d 92       	st	X+, r0
     116:	a2 37       	cpi	r26, 0x72	; 114
     118:	b1 07       	cpc	r27, r17
     11a:	d9 f7       	brne	.-10     	; 0x112 <__do_copy_data+0xc>

0000011c <__do_clear_bss>:
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	a2 e7       	ldi	r26, 0x72	; 114
     120:	b1 e0       	ldi	r27, 0x01	; 1
     122:	01 c0       	rjmp	.+2      	; 0x126 <.do_clear_bss_start>

00000124 <.do_clear_bss_loop>:
     124:	1d 92       	st	X+, r1

00000126 <.do_clear_bss_start>:
     126:	a6 3a       	cpi	r26, 0xA6	; 166
     128:	b2 07       	cpc	r27, r18
     12a:	e1 f7       	brne	.-8      	; 0x124 <.do_clear_bss_loop>
     12c:	0e 94 ac 01 	call	0x358	; 0x358 <main>
     130:	0c 94 02 09 	jmp	0x1204	; 0x1204 <_exit>

00000134 <__bad_interrupt>:
     134:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000138 <lcdCommand>:


//*******************************************************
void lcdCommand( unsigned char cmnd )
{
  LCD_DPRT = cmnd;			
     138:	8b b9       	out	0x0b, r24	; 11
  LCD_CPRT &= ~ (1<<LCD_RS);
     13a:	70 98       	cbi	0x0e, 0	; 14
  LCD_CPRT &= ~ (1<<LCD_RW);
     13c:	71 98       	cbi	0x0e, 1	; 14
  LCD_CPRT |= (1<<LCD_EN);	
     13e:	72 9a       	sbi	0x0e, 2	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     140:	85 e0       	ldi	r24, 0x05	; 5
     142:	8a 95       	dec	r24
     144:	f1 f7       	brne	.-4      	; 0x142 <lcdCommand+0xa>
     146:	00 00       	nop
  _delay_us(1);				
  LCD_CPRT &= ~ (1<<LCD_EN);
     148:	72 98       	cbi	0x0e, 2	; 14
     14a:	8f e8       	ldi	r24, 0x8F	; 143
     14c:	91 e0       	ldi	r25, 0x01	; 1
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <lcdCommand+0x16>
     152:	00 c0       	rjmp	.+0      	; 0x154 <lcdCommand+0x1c>
     154:	00 00       	nop
     156:	08 95       	ret

00000158 <lcdData>:
}

//*******************************************************
void lcdData( unsigned char data )
{
  LCD_DPRT = data;			
     158:	8b b9       	out	0x0b, r24	; 11
  LCD_CPRT |= (1<<LCD_RS);	
     15a:	70 9a       	sbi	0x0e, 0	; 14
  LCD_CPRT &= ~ (1<<LCD_RW);
     15c:	71 98       	cbi	0x0e, 1	; 14
  LCD_CPRT |= (1<<LCD_EN);	
     15e:	72 9a       	sbi	0x0e, 2	; 14
     160:	85 e0       	ldi	r24, 0x05	; 5
     162:	8a 95       	dec	r24
     164:	f1 f7       	brne	.-4      	; 0x162 <lcdData+0xa>
     166:	00 00       	nop
  _delay_us(1);				
  LCD_CPRT &= ~ (1<<LCD_EN);
     168:	72 98       	cbi	0x0e, 2	; 14
     16a:	8f e8       	ldi	r24, 0x8F	; 143
     16c:	91 e0       	ldi	r25, 0x01	; 1
     16e:	01 97       	sbiw	r24, 0x01	; 1
     170:	f1 f7       	brne	.-4      	; 0x16e <lcdData+0x16>
     172:	00 c0       	rjmp	.+0      	; 0x174 <lcdData+0x1c>
     174:	00 00       	nop
     176:	08 95       	ret

00000178 <lcd_init>:
}

//*******************************************************
void lcd_init()
{
  LCD_DDDR = 0xFF;
     178:	8f ef       	ldi	r24, 0xFF	; 255
     17a:	8a b9       	out	0x0a, r24	; 10
  LCD_CDDR = 0xFF;
     17c:	8d b9       	out	0x0d, r24	; 13
 
  LCD_CPRT &=~(1<<LCD_EN);	
     17e:	72 98       	cbi	0x0e, 2	; 14
     180:	8f e3       	ldi	r24, 0x3F	; 63
     182:	9f e1       	ldi	r25, 0x1F	; 31
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <lcd_init+0xc>
     188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_init+0x12>
     18a:	00 00       	nop
  _delay_us(2000);			
  lcdCommand(0x38);			
     18c:	88 e3       	ldi	r24, 0x38	; 56
     18e:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
  lcdCommand(0x0E);			
     192:	8e e0       	ldi	r24, 0x0E	; 14
     194:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
  lcdCommand(0x0C);
     198:	8c e0       	ldi	r24, 0x0C	; 12
     19a:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
  lcdCommand(0x01); //clear
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     1a4:	8f e3       	ldi	r24, 0x3F	; 63
     1a6:	9f e1       	ldi	r25, 0x1F	; 31
     1a8:	01 97       	sbiw	r24, 0x01	; 1
     1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_init+0x30>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <lcd_init+0x36>
     1ae:	00 00       	nop
  _delay_us(2000);			
  lcdCommand(0x06);			
     1b0:	86 e0       	ldi	r24, 0x06	; 6
     1b2:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     1b6:	08 95       	ret

000001b8 <lcd_gotoxy>:
}

//*******************************************************
void lcd_gotoxy(unsigned char x, unsigned char y)
{  
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	00 d0       	rcall	.+0      	; 0x1be <lcd_gotoxy+0x6>
     1be:	00 d0       	rcall	.+0      	; 0x1c0 <lcd_gotoxy+0x8>
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62
 unsigned char firstCharAdr[]={0x80,0xC0,0x94,0xD4};//table 12-5  
     1c4:	90 e8       	ldi	r25, 0x80	; 128
     1c6:	99 83       	std	Y+1, r25	; 0x01
     1c8:	90 ec       	ldi	r25, 0xC0	; 192
     1ca:	9a 83       	std	Y+2, r25	; 0x02
     1cc:	94 e9       	ldi	r25, 0x94	; 148
     1ce:	9b 83       	std	Y+3, r25	; 0x03
     1d0:	94 ed       	ldi	r25, 0xD4	; 212
     1d2:	9c 83       	std	Y+4, r25	; 0x04
 lcdCommand(firstCharAdr[y-1] + x - 1);
     1d4:	fe 01       	movw	r30, r28
     1d6:	e6 0f       	add	r30, r22
     1d8:	f1 1d       	adc	r31, r1
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	90 81       	ld	r25, Z
     1de:	89 0f       	add	r24, r25
     1e0:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     1e4:	8f e8       	ldi	r24, 0x8F	; 143
     1e6:	91 e0       	ldi	r25, 0x01	; 1
     1e8:	01 97       	sbiw	r24, 0x01	; 1
     1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcd_gotoxy+0x30>
     1ec:	00 c0       	rjmp	.+0      	; 0x1ee <lcd_gotoxy+0x36>
     1ee:	00 00       	nop
 _delay_us(100);	
}
     1f0:	0f 90       	pop	r0
     1f2:	0f 90       	pop	r0
     1f4:	0f 90       	pop	r0
     1f6:	0f 90       	pop	r0
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	08 95       	ret

000001fe <lcd_print>:

//*******************************************************
void lcd_print( char * str )
{
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	cf 93       	push	r28
     204:	fc 01       	movw	r30, r24
  unsigned char i = 0 ;
  while(str[i]!=0)
     206:	80 81       	ld	r24, Z
     208:	88 23       	and	r24, r24
     20a:	59 f0       	breq	.+22     	; 0x222 <lcd_print+0x24>
     20c:	8f 01       	movw	r16, r30
     20e:	c0 e0       	ldi	r28, 0x00	; 0
  {
    lcdData(str[i]);
     210:	0e 94 ac 00 	call	0x158	; 0x158 <lcdData>
    i++ ;
     214:	cf 5f       	subi	r28, 0xFF	; 255

//*******************************************************
void lcd_print( char * str )
{
  unsigned char i = 0 ;
  while(str[i]!=0)
     216:	f8 01       	movw	r30, r16
     218:	ec 0f       	add	r30, r28
     21a:	f1 1d       	adc	r31, r1
     21c:	80 81       	ld	r24, Z
     21e:	81 11       	cpse	r24, r1
     220:	f7 cf       	rjmp	.-18     	; 0x210 <lcd_print+0x12>
  {
    lcdData(str[i]);
    i++ ;
  }
}
     222:	cf 91       	pop	r28
     224:	1f 91       	pop	r17
     226:	0f 91       	pop	r16
     228:	08 95       	ret

0000022a <ftoa>:
 */ 

#ifndef FLOATCONVERT_H_
#define FLOATCONVERT_H_
void ftoa(int n, char* res)
{
     22a:	ef 92       	push	r14
     22c:	ff 92       	push	r15
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
     23a:	2b 97       	sbiw	r28, 0x0b	; 11
     23c:	0f b6       	in	r0, 0x3f	; 63
     23e:	f8 94       	cli
     240:	de bf       	out	0x3e, r29	; 62
     242:	0f be       	out	0x3f, r0	; 63
     244:	cd bf       	out	0x3d, r28	; 61
     246:	8c 01       	movw	r16, r24
     248:	9b 01       	movw	r18, r22
	char numbers[11] = "0123456789";
     24a:	8b e0       	ldi	r24, 0x0B	; 11
     24c:	e2 e0       	ldi	r30, 0x02	; 2
     24e:	f1 e0       	ldi	r31, 0x01	; 1
     250:	de 01       	movw	r26, r28
     252:	11 96       	adiw	r26, 0x01	; 1
     254:	01 90       	ld	r0, Z+
     256:	0d 92       	st	X+, r0
     258:	8a 95       	dec	r24
     25a:	e1 f7       	brne	.-8      	; 0x254 <ftoa+0x2a>
	int power = 0;

	if (n < 10)
     25c:	0a 30       	cpi	r16, 0x0A	; 10
     25e:	11 05       	cpc	r17, r1
     260:	0c f4       	brge	.+2      	; 0x264 <ftoa+0x3a>
     262:	5a c0       	rjmp	.+180    	; 0x318 <ftoa+0xee>
	power = 0;
	else if (n < 100)
     264:	04 36       	cpi	r16, 0x64	; 100
     266:	11 05       	cpc	r17, r1
     268:	0c f5       	brge	.+66     	; 0x2ac <ftoa+0x82>

		break;
		
		
		case 1:
		res[0] = '0';
     26a:	80 e3       	ldi	r24, 0x30	; 48
     26c:	db 01       	movw	r26, r22
     26e:	8c 93       	st	X, r24
		res[1] = numbers[n/10];
     270:	c8 01       	movw	r24, r16
     272:	6a e0       	ldi	r22, 0x0A	; 10
     274:	70 e0       	ldi	r23, 0x00	; 0
     276:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__divmodhi4>
     27a:	e1 e0       	ldi	r30, 0x01	; 1
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	ec 0f       	add	r30, r28
     280:	fd 1f       	adc	r31, r29
     282:	e6 0f       	add	r30, r22
     284:	f7 1f       	adc	r31, r23
     286:	40 81       	ld	r20, Z
     288:	f9 01       	movw	r30, r18
     28a:	41 83       	std	Z+1, r20	; 0x01
		res[2] = '.';
     28c:	4e e2       	ldi	r20, 0x2E	; 46
     28e:	42 83       	std	Z+2, r20	; 0x02
		res[3] = numbers[n % 10];
     290:	e1 e0       	ldi	r30, 0x01	; 1
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	ec 0f       	add	r30, r28
     296:	fd 1f       	adc	r31, r29
     298:	e8 0f       	add	r30, r24
     29a:	f9 1f       	adc	r31, r25
     29c:	80 81       	ld	r24, Z
     29e:	d9 01       	movw	r26, r18
     2a0:	13 96       	adiw	r26, 0x03	; 3
     2a2:	8c 93       	st	X, r24
     2a4:	13 97       	sbiw	r26, 0x03	; 3
		res[4] = '\0';
     2a6:	14 96       	adiw	r26, 0x04	; 4
     2a8:	1c 92       	st	X, r1

		break;
     2aa:	49 c0       	rjmp	.+146    	; 0x33e <ftoa+0x114>
		
		
		case 2:
		res[0] = numbers[n / 100];
     2ac:	c8 01       	movw	r24, r16
     2ae:	64 e6       	ldi	r22, 0x64	; 100
     2b0:	70 e0       	ldi	r23, 0x00	; 0
     2b2:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__divmodhi4>
     2b6:	7c 01       	movw	r14, r24
     2b8:	e1 e0       	ldi	r30, 0x01	; 1
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	ec 0f       	add	r30, r28
     2be:	fd 1f       	adc	r31, r29
     2c0:	e6 0f       	add	r30, r22
     2c2:	f7 1f       	adc	r31, r23
     2c4:	80 81       	ld	r24, Z
     2c6:	f9 01       	movw	r30, r18
     2c8:	80 83       	st	Z, r24
		res[1] = numbers[(n / 10) % 10];
     2ca:	ea e0       	ldi	r30, 0x0A	; 10
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	c8 01       	movw	r24, r16
     2d0:	bf 01       	movw	r22, r30
     2d2:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__divmodhi4>
     2d6:	cb 01       	movw	r24, r22
     2d8:	bf 01       	movw	r22, r30
     2da:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__divmodhi4>
     2de:	a1 e0       	ldi	r26, 0x01	; 1
     2e0:	b0 e0       	ldi	r27, 0x00	; 0
     2e2:	ac 0f       	add	r26, r28
     2e4:	bd 1f       	adc	r27, r29
     2e6:	a8 0f       	add	r26, r24
     2e8:	b9 1f       	adc	r27, r25
     2ea:	8c 91       	ld	r24, X
     2ec:	d9 01       	movw	r26, r18
     2ee:	11 96       	adiw	r26, 0x01	; 1
     2f0:	8c 93       	st	X, r24
     2f2:	11 97       	sbiw	r26, 0x01	; 1
		res[2] = '.';
     2f4:	8e e2       	ldi	r24, 0x2E	; 46
     2f6:	12 96       	adiw	r26, 0x02	; 2
     2f8:	8c 93       	st	X, r24
		res[3] = numbers[(n % 100) % 10];
     2fa:	c7 01       	movw	r24, r14
     2fc:	bf 01       	movw	r22, r30
     2fe:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__divmodhi4>
     302:	e1 e0       	ldi	r30, 0x01	; 1
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	ec 0f       	add	r30, r28
     308:	fd 1f       	adc	r31, r29
     30a:	e8 0f       	add	r30, r24
     30c:	f9 1f       	adc	r31, r25
     30e:	80 81       	ld	r24, Z
     310:	f9 01       	movw	r30, r18
     312:	83 83       	std	Z+3, r24	; 0x03
		res[4] = '\0';
     314:	14 82       	std	Z+4, r1	; 0x04
		break;
     316:	13 c0       	rjmp	.+38     	; 0x33e <ftoa+0x114>
	else
	power = 2;
	switch (power)
	{
		case 0: // tenth decimal place
		res[0] = '0';
     318:	80 e3       	ldi	r24, 0x30	; 48
     31a:	db 01       	movw	r26, r22
     31c:	8c 93       	st	X, r24
		res[1] = '0';
     31e:	11 96       	adiw	r26, 0x01	; 1
     320:	8c 93       	st	X, r24
     322:	11 97       	sbiw	r26, 0x01	; 1
		res[2] = '.';
     324:	8e e2       	ldi	r24, 0x2E	; 46
     326:	12 96       	adiw	r26, 0x02	; 2
     328:	8c 93       	st	X, r24
     32a:	12 97       	sbiw	r26, 0x02	; 2
		res[3] = numbers[n];
     32c:	fe 01       	movw	r30, r28
     32e:	e0 0f       	add	r30, r16
     330:	f1 1f       	adc	r31, r17
     332:	81 81       	ldd	r24, Z+1	; 0x01
     334:	13 96       	adiw	r26, 0x03	; 3
     336:	8c 93       	st	X, r24
     338:	13 97       	sbiw	r26, 0x03	; 3
		res[4] = '\0';
     33a:	14 96       	adiw	r26, 0x04	; 4
     33c:	1c 92       	st	X, r1
		res[4] = '\0';
		break;
		
	}

}
     33e:	2b 96       	adiw	r28, 0x0b	; 11
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	f8 94       	cli
     344:	de bf       	out	0x3e, r29	; 62
     346:	0f be       	out	0x3f, r0	; 63
     348:	cd bf       	out	0x3d, r28	; 61
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	1f 91       	pop	r17
     350:	0f 91       	pop	r16
     352:	ff 90       	pop	r15
     354:	ef 90       	pop	r14
     356:	08 95       	ret

00000358 <main>:
int main(void)
{

	// arbitrary ports right now

	DDRC &= ~(_BV(2) | _BV(1) | _BV(4)); // sets PORTC 1, 2, and 4 to input (input from rotary encoder)
     358:	87 b1       	in	r24, 0x07	; 7
     35a:	89 7e       	andi	r24, 0xE9	; 233
     35c:	87 b9       	out	0x07, r24	; 7
										 // 1 = DT signal
										 // 2 = CLK signal
										 // 4 = SW signal (button press)
										 
	PCICR |= (1<<PCIE1); // Enable pin change interrupt on PORTC
     35e:	e8 e6       	ldi	r30, 0x68	; 104
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	80 81       	ld	r24, Z
     364:	82 60       	ori	r24, 0x02	; 2
     366:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT12) | (1<<PCINT9) | (1<<PCINT10); // Enable Pins 1,2, and 4 to trigger this interrupt
     368:	ec e6       	ldi	r30, 0x6C	; 108
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	80 81       	ld	r24, Z
     36e:	86 61       	ori	r24, 0x16	; 22
     370:	80 83       	st	Z, r24
	
	// These variables are Char arrays as the LCD cannot output int/float values, it must be sent as a string
	
	lcd_init(); // initialize the LCD according to Dr. Viall's 263 code
     372:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_init>
	
	angleConv[0]='0'; // v Set up height and angle to start at 00.0 value
     376:	e6 e7       	ldi	r30, 0x76	; 118
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	80 e3       	ldi	r24, 0x30	; 48
     37c:	80 83       	st	Z, r24
	angleConv[1]='0';
     37e:	81 83       	std	Z+1, r24	; 0x01
	angleConv[2]='.';
     380:	9e e2       	ldi	r25, 0x2E	; 46
     382:	92 83       	std	Z+2, r25	; 0x02
	angleConv[3]='0';
     384:	83 83       	std	Z+3, r24	; 0x03
	heightConv[0]='0';
     386:	e6 e8       	ldi	r30, 0x86	; 134
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	80 83       	st	Z, r24
	heightConv[1]='0';
     38c:	81 83       	std	Z+1, r24	; 0x01
	heightConv[2]='.';
     38e:	92 83       	std	Z+2, r25	; 0x02
	heightConv[3]='0';// ^
     390:	83 83       	std	Z+3, r24	; 0x03
	
	// PRINT DEFAULT STATE
	lcd_gotoxy(1,1); // go to row 1 column 1 of LCD
     392:	61 e0       	ldi	r22, 0x01	; 1
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_gotoxy>
	lcd_print(HEIGHT_SELECT); // Print ->   [HEIGHT] ANGLE
     39a:	8d e0       	ldi	r24, 0x0D	; 13
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
	lcd_gotoxy(1,2); // go to row 2 column 2 of LCD
     3a2:	62 e0       	ldi	r22, 0x02	; 2
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_gotoxy>
	lcd_print(DEFAULT_ANGLE); // Print -> 00.0 00.0
     3aa:	8e e1       	ldi	r24, 0x1E	; 30
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
	
	sei(); // enable global interrupts
     3b2:	78 94       	sei
     3b4:	ff cf       	rjmp	.-2      	; 0x3b4 <main+0x5c>

000003b6 <print_height_angle>:

/************************************************* NUMBER CHANING FUNCTIONS **********************************************************************************/

// Function used to print either the height or angle selection ** THIS FUNCTION IS ONLY FOR CHANGING THE SELECTION **
void print_height_angle(char *angleConv, char *heightConv, int heightSelect)
{
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	ec 01       	movw	r28, r24
     3c4:	8b 01       	movw	r16, r22
     3c6:	7a 01       	movw	r14, r20
	lcd_gotoxy(1,1);
     3c8:	61 e0       	ldi	r22, 0x01	; 1
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_gotoxy>
	if (heightSelect == 1)
     3d0:	ea 94       	dec	r14
     3d2:	ef 28       	or	r14, r15
     3d4:	29 f4       	brne	.+10     	; 0x3e0 <print_height_angle+0x2a>
		lcd_print(HEIGHT_SELECT);
     3d6:	8d e0       	ldi	r24, 0x0D	; 13
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
     3de:	04 c0       	rjmp	.+8      	; 0x3e8 <print_height_angle+0x32>
	else 
		lcd_print(ANGLE_SELECT);
     3e0:	8d e2       	ldi	r24, 0x2D	; 45
     3e2:	91 e0       	ldi	r25, 0x01	; 1
     3e4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
	// un-select bottom row
	lcd_gotoxy(1,2);
     3e8:	62 e0       	ldi	r22, 0x02	; 2
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_gotoxy>
	lcd_print(" ");
     3f0:	80 e6       	ldi	r24, 0x60	; 96
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
	lcd_print(heightConv);
     3f8:	c8 01       	movw	r24, r16
     3fa:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
	lcd_gotoxy(6,2);
     3fe:	62 e0       	ldi	r22, 0x02	; 2
     400:	86 e0       	ldi	r24, 0x06	; 6
     402:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_gotoxy>
	lcd_print(" ");
     406:	80 e6       	ldi	r24, 0x60	; 96
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
	lcd_gotoxy(10,2);
     40e:	62 e0       	ldi	r22, 0x02	; 2
     410:	8a e0       	ldi	r24, 0x0A	; 10
     412:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_gotoxy>
	lcd_print(" ");
     416:	80 e6       	ldi	r24, 0x60	; 96
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
	lcd_print(angleConv);
     41e:	ce 01       	movw	r24, r28
     420:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
	lcd_gotoxy(15,2);
     424:	62 e0       	ldi	r22, 0x02	; 2
     426:	8f e0       	ldi	r24, 0x0F	; 15
     428:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_gotoxy>
	lcd_print(" ");
     42c:	80 e6       	ldi	r24, 0x60	; 96
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
}
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	ff 90       	pop	r15
     43e:	ef 90       	pop	r14
     440:	08 95       	ret

00000442 <print_height_change>:

// Function used to print a change in the height value
void print_height_change(char *conversion)
{
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
     446:	ec 01       	movw	r28, r24
	//ensure height becomes unselected
	lcd_gotoxy(1,1);
     448:	61 e0       	ldi	r22, 0x01	; 1
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_gotoxy>
	lcd_print(NO_HS_SELECT);
     450:	8e e3       	ldi	r24, 0x3E	; 62
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
	lcd_gotoxy(1,2);
     458:	62 e0       	ldi	r22, 0x02	; 2
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_gotoxy>
	lcd_print("[");
     460:	8f e4       	ldi	r24, 0x4F	; 79
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
	lcd_gotoxy(2,2);
     468:	62 e0       	ldi	r22, 0x02	; 2
     46a:	82 e0       	ldi	r24, 0x02	; 2
     46c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_gotoxy>
	lcd_print(conversion);
     470:	ce 01       	movw	r24, r28
     472:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
	lcd_gotoxy(6,2);
     476:	62 e0       	ldi	r22, 0x02	; 2
     478:	86 e0       	ldi	r24, 0x06	; 6
     47a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_gotoxy>
	lcd_print("]");
     47e:	8c e3       	ldi	r24, 0x3C	; 60
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
}
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	08 95       	ret

0000048c <print_angle_change>:

// Function used to print a change in the angle value
void print_angle_change(char *conversion)
{
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	ec 01       	movw	r28, r24
	lcd_gotoxy(1,1);
     492:	61 e0       	ldi	r22, 0x01	; 1
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_gotoxy>
	lcd_print(NO_HS_SELECT);
     49a:	8e e3       	ldi	r24, 0x3E	; 62
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
	lcd_gotoxy(10,2);
     4a2:	62 e0       	ldi	r22, 0x02	; 2
     4a4:	8a e0       	ldi	r24, 0x0A	; 10
     4a6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_gotoxy>
	lcd_print("[");
     4aa:	8f e4       	ldi	r24, 0x4F	; 79
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
	lcd_gotoxy(11,2);
     4b2:	62 e0       	ldi	r22, 0x02	; 2
     4b4:	8b e0       	ldi	r24, 0x0B	; 11
     4b6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_gotoxy>
	lcd_print(conversion);
     4ba:	ce 01       	movw	r24, r28
     4bc:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
	lcd_gotoxy(15,2);
     4c0:	62 e0       	ldi	r22, 0x02	; 2
     4c2:	8f e0       	ldi	r24, 0x0F	; 15
     4c4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_gotoxy>
	lcd_print("]");
     4c8:	8c e3       	ldi	r24, 0x3C	; 60
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
	
}
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	08 95       	ret

000004d6 <__vector_4>:
//		- Confirms height / angle adjustment
//		- Selects angle / height and moves user to adjust height / angle

float tmp=0;
ISR(PCINT1_vect) 
{
     4d6:	1f 92       	push	r1
     4d8:	0f 92       	push	r0
     4da:	0f b6       	in	r0, 0x3f	; 63
     4dc:	0f 92       	push	r0
     4de:	11 24       	eor	r1, r1
     4e0:	cf 92       	push	r12
     4e2:	df 92       	push	r13
     4e4:	ef 92       	push	r14
     4e6:	ff 92       	push	r15
     4e8:	2f 93       	push	r18
     4ea:	3f 93       	push	r19
     4ec:	4f 93       	push	r20
     4ee:	5f 93       	push	r21
     4f0:	6f 93       	push	r22
     4f2:	7f 93       	push	r23
     4f4:	8f 93       	push	r24
     4f6:	9f 93       	push	r25
     4f8:	af 93       	push	r26
     4fa:	bf 93       	push	r27
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	ef 93       	push	r30
     502:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     504:	8f e1       	ldi	r24, 0x1F	; 31
     506:	9e e4       	ldi	r25, 0x4E	; 78
     508:	01 97       	sbiw	r24, 0x01	; 1
     50a:	f1 f7       	brne	.-4      	; 0x508 <__vector_4+0x32>
     50c:	00 c0       	rjmp	.+0      	; 0x50e <__vector_4+0x38>
     50e:	00 00       	nop
	_delay_ms(5);
	tmp=PINC;
     510:	66 b1       	in	r22, 0x06	; 6
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 a0 06 	call	0xd40	; 0xd40 <__floatunsisf>
     51c:	60 93 72 01 	sts	0x0172, r22	; 0x800172 <__data_end>
     520:	70 93 73 01 	sts	0x0173, r23	; 0x800173 <__data_end+0x1>
     524:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <__data_end+0x2>
     528:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <__data_end+0x3>
// 	ftoa(tmp,heightConv);
// 	print_height_change(heightConv);
	
	if(PINC == RIGHT) //if right turn triggered interrupt
     52c:	86 b1       	in	r24, 0x06	; 6
     52e:	8b 37       	cpi	r24, 0x7B	; 123
     530:	09 f0       	breq	.+2      	; 0x534 <__vector_4+0x5e>
     532:	93 c0       	rjmp	.+294    	; 0x65a <__vector_4+0x184>
	{
		switch(state)
     534:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <state>
     538:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <state+0x1>
     53c:	81 30       	cpi	r24, 0x01	; 1
     53e:	91 05       	cpc	r25, r1
     540:	d1 f0       	breq	.+52     	; 0x576 <__vector_4+0xa0>
     542:	1c f4       	brge	.+6      	; 0x54a <__vector_4+0x74>
     544:	89 2b       	or	r24, r25
     546:	41 f0       	breq	.+16     	; 0x558 <__vector_4+0x82>
     548:	88 c0       	rjmp	.+272    	; 0x65a <__vector_4+0x184>
     54a:	82 30       	cpi	r24, 0x02	; 2
     54c:	91 05       	cpc	r25, r1
     54e:	a9 f1       	breq	.+106    	; 0x5ba <__vector_4+0xe4>
     550:	03 97       	sbiw	r24, 0x03	; 3
     552:	09 f4       	brne	.+2      	; 0x556 <__vector_4+0x80>
     554:	5b c0       	rjmp	.+182    	; 0x60c <__vector_4+0x136>
     556:	81 c0       	rjmp	.+258    	; 0x65a <__vector_4+0x184>
		{
			case HEIGHT: // change to angle state
				print_height_angle(angleConv,heightConv,0);
     558:	40 e0       	ldi	r20, 0x00	; 0
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	66 e8       	ldi	r22, 0x86	; 134
     55e:	71 e0       	ldi	r23, 0x01	; 1
     560:	86 e7       	ldi	r24, 0x76	; 118
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	0e 94 db 01 	call	0x3b6	; 0x3b6 <print_height_angle>
				state = ANGLE;
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <state+0x1>
     570:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <state>
				break;
     574:	72 c0       	rjmp	.+228    	; 0x65a <__vector_4+0x184>
			case ANGLE: // Change increment/decrement value to 10
				valueChange = 10;
     576:	8a e0       	ldi	r24, 0x0A	; 10
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     57e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				cli();
     582:	f8 94       	cli
				lcd_gotoxy(1,1);
     584:	61 e0       	ldi	r22, 0x01	; 1
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_gotoxy>
				lcd_print("Order +-1       ");
     58c:	81 e5       	ldi	r24, 0x51	; 81
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
     594:	9f ef       	ldi	r25, 0xFF	; 255
     596:	23 ed       	ldi	r18, 0xD3	; 211
     598:	80 e3       	ldi	r24, 0x30	; 48
     59a:	91 50       	subi	r25, 0x01	; 1
     59c:	20 40       	sbci	r18, 0x00	; 0
     59e:	80 40       	sbci	r24, 0x00	; 0
     5a0:	e1 f7       	brne	.-8      	; 0x59a <__vector_4+0xc4>
     5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <__vector_4+0xce>
     5a4:	00 00       	nop
				_delay_ms(1000);
				lcd_gotoxy(1,1);
     5a6:	61 e0       	ldi	r22, 0x01	; 1
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_gotoxy>
				lcd_print(ANGLE_SELECT);
     5ae:	8d e2       	ldi	r24, 0x2D	; 45
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
				sei();
     5b6:	78 94       	sei
				break;
     5b8:	50 c0       	rjmp	.+160    	; 0x65a <__vector_4+0x184>
			case CHEIGHT: // increment height value (as long as < MAX (?))
				if ((height+valueChange) <= MAX_HEIGHT) // total guess right now
     5ba:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <height>
     5be:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <height+0x1>
     5c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     5c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     5ca:	82 0f       	add	r24, r18
     5cc:	93 1f       	adc	r25, r19
     5ce:	87 39       	cpi	r24, 0x97	; 151
     5d0:	91 05       	cpc	r25, r1
     5d2:	0c f0       	brlt	.+2      	; 0x5d6 <__vector_4+0x100>
     5d4:	42 c0       	rjmp	.+132    	; 0x65a <__vector_4+0x184>
				{
					height=height + valueChange; //increment height by tenth
     5d6:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <height>
     5da:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <height+0x1>
     5de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     5e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     5e6:	82 0f       	add	r24, r18
     5e8:	93 1f       	adc	r25, r19
     5ea:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <height+0x1>
     5ee:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <height>
					ftoa(height,heightConv); // convert height to char array (heightConv) with 1 decimal place
     5f2:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <height>
     5f6:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <height+0x1>
     5fa:	66 e8       	ldi	r22, 0x86	; 134
     5fc:	71 e0       	ldi	r23, 0x01	; 1
     5fe:	0e 94 15 01 	call	0x22a	; 0x22a <ftoa>
					print_height_change(heightConv); // print conversion to LCD
     602:	86 e8       	ldi	r24, 0x86	; 134
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	0e 94 21 02 	call	0x442	; 0x442 <print_height_change>
     60a:	27 c0       	rjmp	.+78     	; 0x65a <__vector_4+0x184>
				}
				break;	
			case CANGLE: // increment angle value (as long as <= MAX (90))
				if ((angle+valueChange) <= MAX_ANGLE)
     60c:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <angle>
     610:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <angle+0x1>
     614:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     618:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     61c:	82 0f       	add	r24, r18
     61e:	93 1f       	adc	r25, r19
     620:	85 38       	cpi	r24, 0x85	; 133
     622:	93 40       	sbci	r25, 0x03	; 3
     624:	d4 f4       	brge	.+52     	; 0x65a <__vector_4+0x184>
				{
					angle=angle + valueChange;
     626:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <angle>
     62a:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <angle+0x1>
     62e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     632:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     636:	82 0f       	add	r24, r18
     638:	93 1f       	adc	r25, r19
     63a:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <angle+0x1>
     63e:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <angle>
					ftoa(angle,angleConv); // convert angle to char array (angleConv) with 1 decimal place
     642:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <angle>
     646:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <angle+0x1>
     64a:	66 e7       	ldi	r22, 0x76	; 118
     64c:	71 e0       	ldi	r23, 0x01	; 1
     64e:	0e 94 15 01 	call	0x22a	; 0x22a <ftoa>
					print_angle_change(angleConv);	// print conversion to LCD
     652:	86 e7       	ldi	r24, 0x76	; 118
     654:	91 e0       	ldi	r25, 0x01	; 1
     656:	0e 94 46 02 	call	0x48c	; 0x48c <print_angle_change>
				break;
		}
	}
	
	
	if (PINC == LEFT) // If left turn triggered interrupt
     65a:	86 b1       	in	r24, 0x06	; 6
     65c:	8d 37       	cpi	r24, 0x7D	; 125
     65e:	09 f0       	breq	.+2      	; 0x662 <__vector_4+0x18c>
     660:	8c c0       	rjmp	.+280    	; 0x77a <__vector_4+0x2a4>
	{
		switch(state)
     662:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <state>
     666:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <state+0x1>
     66a:	81 30       	cpi	r24, 0x01	; 1
     66c:	91 05       	cpc	r25, r1
     66e:	61 f1       	breq	.+88     	; 0x6c8 <__vector_4+0x1f2>
     670:	1c f4       	brge	.+6      	; 0x678 <__vector_4+0x1a2>
     672:	89 2b       	or	r24, r25
     674:	41 f0       	breq	.+16     	; 0x686 <__vector_4+0x1b0>
     676:	81 c0       	rjmp	.+258    	; 0x77a <__vector_4+0x2a4>
     678:	82 30       	cpi	r24, 0x02	; 2
     67a:	91 05       	cpc	r25, r1
     67c:	91 f1       	breq	.+100    	; 0x6e2 <__vector_4+0x20c>
     67e:	03 97       	sbiw	r24, 0x03	; 3
     680:	09 f4       	brne	.+2      	; 0x684 <__vector_4+0x1ae>
     682:	56 c0       	rjmp	.+172    	; 0x730 <__vector_4+0x25a>
     684:	7a c0       	rjmp	.+244    	; 0x77a <__vector_4+0x2a4>
		{
			case HEIGHT: // Change increment/decrement value to 1
				valueChange = 1;
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     68e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				cli();
     692:	f8 94       	cli
				lcd_gotoxy(1,1);
     694:	61 e0       	ldi	r22, 0x01	; 1
     696:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_gotoxy>
				lcd_print("Order +-.1     ");
     69a:	82 e6       	ldi	r24, 0x62	; 98
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
     6a2:	8f ef       	ldi	r24, 0xFF	; 255
     6a4:	93 ed       	ldi	r25, 0xD3	; 211
     6a6:	20 e3       	ldi	r18, 0x30	; 48
     6a8:	81 50       	subi	r24, 0x01	; 1
     6aa:	90 40       	sbci	r25, 0x00	; 0
     6ac:	20 40       	sbci	r18, 0x00	; 0
     6ae:	e1 f7       	brne	.-8      	; 0x6a8 <__vector_4+0x1d2>
     6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <__vector_4+0x1dc>
     6b2:	00 00       	nop
				_delay_ms(1000);
				lcd_gotoxy(1,1);
     6b4:	61 e0       	ldi	r22, 0x01	; 1
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_gotoxy>
				lcd_print(HEIGHT_SELECT);
     6bc:	8d e0       	ldi	r24, 0x0D	; 13
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
				sei();
     6c4:	78 94       	sei
				break;
     6c6:	59 c0       	rjmp	.+178    	; 0x77a <__vector_4+0x2a4>
			case ANGLE: // change to height state
				print_height_angle(angleConv,heightConv, 1);
     6c8:	41 e0       	ldi	r20, 0x01	; 1
     6ca:	50 e0       	ldi	r21, 0x00	; 0
     6cc:	66 e8       	ldi	r22, 0x86	; 134
     6ce:	71 e0       	ldi	r23, 0x01	; 1
     6d0:	86 e7       	ldi	r24, 0x76	; 118
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	0e 94 db 01 	call	0x3b6	; 0x3b6 <print_height_angle>
				state = HEIGHT;
     6d8:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <state+0x1>
     6dc:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <state>
				break;
     6e0:	4c c0       	rjmp	.+152    	; 0x77a <__vector_4+0x2a4>
			case CHEIGHT: // decrement height value (as long as >= MIN (0) )
				if ((height-valueChange) >= 0)
     6e2:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <height>
     6e6:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <height+0x1>
     6ea:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     6ee:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     6f2:	82 1b       	sub	r24, r18
     6f4:	93 0b       	sbc	r25, r19
     6f6:	0a f4       	brpl	.+2      	; 0x6fa <__vector_4+0x224>
     6f8:	40 c0       	rjmp	.+128    	; 0x77a <__vector_4+0x2a4>
				{
					height = height - valueChange;
     6fa:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <height>
     6fe:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <height+0x1>
     702:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     706:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     70a:	82 1b       	sub	r24, r18
     70c:	93 0b       	sbc	r25, r19
     70e:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <height+0x1>
     712:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <height>
					ftoa(height,heightConv); // convert height to char array (heightConv) with 1 decimal place
     716:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <height>
     71a:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <height+0x1>
     71e:	66 e8       	ldi	r22, 0x86	; 134
     720:	71 e0       	ldi	r23, 0x01	; 1
     722:	0e 94 15 01 	call	0x22a	; 0x22a <ftoa>
					print_height_change(heightConv); // print conversion to LCD
     726:	86 e8       	ldi	r24, 0x86	; 134
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	0e 94 21 02 	call	0x442	; 0x442 <print_height_change>
     72e:	25 c0       	rjmp	.+74     	; 0x77a <__vector_4+0x2a4>
				}
				break;
			case CANGLE: // increment angle value (as long as >= MIN (0))
				if((angle-valueChange) >= 0)
     730:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <angle>
     734:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <angle+0x1>
     738:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     73c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     740:	82 1b       	sub	r24, r18
     742:	93 0b       	sbc	r25, r19
     744:	d2 f0       	brmi	.+52     	; 0x77a <__vector_4+0x2a4>
				{
					angle = angle - valueChange;
     746:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <angle>
     74a:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <angle+0x1>
     74e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     752:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     756:	82 1b       	sub	r24, r18
     758:	93 0b       	sbc	r25, r19
     75a:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <angle+0x1>
     75e:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <angle>
					ftoa(angle,angleConv); // convert angle to char array (angleConv) with 1 decimal place
     762:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <angle>
     766:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <angle+0x1>
     76a:	66 e7       	ldi	r22, 0x76	; 118
     76c:	71 e0       	ldi	r23, 0x01	; 1
     76e:	0e 94 15 01 	call	0x22a	; 0x22a <ftoa>
					print_angle_change(angleConv);	// print conversion to LCD
     772:	86 e7       	ldi	r24, 0x76	; 118
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	0e 94 46 02 	call	0x48c	; 0x48c <print_angle_change>
				break;
		}
	}


	if(PINC == BUTTON) // If button press triggered interrupt
     77a:	86 b1       	in	r24, 0x06	; 6
     77c:	8f 36       	cpi	r24, 0x6F	; 111
     77e:	09 f0       	breq	.+2      	; 0x782 <__vector_4+0x2ac>
     780:	9a c1       	rjmp	.+820    	; 0xab6 <__stack+0x1b7>
	{
		switch(state)
     782:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <state>
     786:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <state+0x1>
     78a:	81 30       	cpi	r24, 0x01	; 1
     78c:	91 05       	cpc	r25, r1
     78e:	f1 f0       	breq	.+60     	; 0x7cc <__vector_4+0x2f6>
     790:	1c f4       	brge	.+6      	; 0x798 <__vector_4+0x2c2>
     792:	89 2b       	or	r24, r25
     794:	41 f0       	breq	.+16     	; 0x7a6 <__vector_4+0x2d0>
     796:	8f c1       	rjmp	.+798    	; 0xab6 <__stack+0x1b7>
     798:	82 30       	cpi	r24, 0x02	; 2
     79a:	91 05       	cpc	r25, r1
     79c:	51 f1       	breq	.+84     	; 0x7f2 <__vector_4+0x31c>
     79e:	03 97       	sbiw	r24, 0x03	; 3
     7a0:	09 f4       	brne	.+2      	; 0x7a4 <__vector_4+0x2ce>
     7a2:	df c0       	rjmp	.+446    	; 0x962 <__stack+0x63>
     7a4:	88 c1       	rjmp	.+784    	; 0xab6 <__stack+0x1b7>
		{
			case HEIGHT: // change to height change state
				ftoa(height,heightConv);
     7a6:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <height>
     7aa:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <height+0x1>
     7ae:	66 e8       	ldi	r22, 0x86	; 134
     7b0:	71 e0       	ldi	r23, 0x01	; 1
     7b2:	0e 94 15 01 	call	0x22a	; 0x22a <ftoa>
				print_height_change(heightConv);
     7b6:	86 e8       	ldi	r24, 0x86	; 134
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	0e 94 21 02 	call	0x442	; 0x442 <print_height_change>
				state = CHEIGHT;
     7be:	82 e0       	ldi	r24, 0x02	; 2
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <state+0x1>
     7c6:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <state>
				break;
     7ca:	75 c1       	rjmp	.+746    	; 0xab6 <__stack+0x1b7>
			case ANGLE: // change to angle change state
				ftoa(angle,angleConv);
     7cc:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <angle>
     7d0:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <angle+0x1>
     7d4:	66 e7       	ldi	r22, 0x76	; 118
     7d6:	71 e0       	ldi	r23, 0x01	; 1
     7d8:	0e 94 15 01 	call	0x22a	; 0x22a <ftoa>
				print_angle_change(angleConv);
     7dc:	86 e7       	ldi	r24, 0x76	; 118
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	0e 94 46 02 	call	0x48c	; 0x48c <print_angle_change>
				state = CANGLE;
     7e4:	83 e0       	ldi	r24, 0x03	; 3
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <state+0x1>
     7ec:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <state>
				break;
     7f0:	62 c1       	rjmp	.+708    	; 0xab6 <__stack+0x1b7>
			case CHEIGHT: // confirm height change value
				valueConfirm = 1; // set flag
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <valueConfirm+0x1>
     7fa:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <valueConfirm>
				// Convert height to angle
				dAngle = height; // save height variable as double 
     7fe:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <height>
     802:	70 91 a3 01 	lds	r23, 0x01A3	; 0x8001a3 <height+0x1>
     806:	07 2e       	mov	r0, r23
     808:	00 0c       	add	r0, r0
     80a:	88 0b       	sbc	r24, r24
     80c:	99 0b       	sbc	r25, r25
     80e:	0e 94 a2 06 	call	0xd44	; 0xd44 <__floatsisf>
     812:	60 93 9c 01 	sts	0x019C, r22	; 0x80019c <dAngle>
     816:	70 93 9d 01 	sts	0x019D, r23	; 0x80019d <dAngle+0x1>
     81a:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <dAngle+0x2>
     81e:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <dAngle+0x3>
				dAngle = dAngle / 10; // remove extra power from when stored as int
     822:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <dAngle>
     826:	70 91 9d 01 	lds	r23, 0x019D	; 0x80019d <dAngle+0x1>
     82a:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <dAngle+0x2>
     82e:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <dAngle+0x3>
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	40 e2       	ldi	r20, 0x20	; 32
     838:	51 e4       	ldi	r21, 0x41	; 65
     83a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__divsf3>
     83e:	60 93 9c 01 	sts	0x019C, r22	; 0x80019c <dAngle>
     842:	70 93 9d 01 	sts	0x019D, r23	; 0x80019d <dAngle+0x1>
     846:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <dAngle+0x2>
     84a:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <dAngle+0x3>
				dAngle = dAngle * dAngle; // square dAngle
     84e:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <dAngle>
     852:	70 91 9d 01 	lds	r23, 0x019D	; 0x80019d <dAngle+0x1>
     856:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <dAngle+0x2>
     85a:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <dAngle+0x3>
     85e:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <dAngle>
     862:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <dAngle+0x1>
     866:	40 91 9e 01 	lds	r20, 0x019E	; 0x80019e <dAngle+0x2>
     86a:	50 91 9f 01 	lds	r21, 0x019F	; 0x80019f <dAngle+0x3>
     86e:	0e 94 0c 08 	call	0x1018	; 0x1018 <__mulsf3>
     872:	60 93 9c 01 	sts	0x019C, r22	; 0x80019c <dAngle>
     876:	70 93 9d 01 	sts	0x019D, r23	; 0x80019d <dAngle+0x1>
     87a:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <dAngle+0x2>
     87e:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <dAngle+0x3>
				dAngle = sqrt(225 - dAngle) / 15;
     882:	c0 90 9c 01 	lds	r12, 0x019C	; 0x80019c <dAngle>
     886:	d0 90 9d 01 	lds	r13, 0x019D	; 0x80019d <dAngle+0x1>
     88a:	e0 90 9e 01 	lds	r14, 0x019E	; 0x80019e <dAngle+0x2>
     88e:	f0 90 9f 01 	lds	r15, 0x019F	; 0x80019f <dAngle+0x3>
     892:	a7 01       	movw	r20, r14
     894:	96 01       	movw	r18, r12
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	81 e6       	ldi	r24, 0x61	; 97
     89c:	93 e4       	ldi	r25, 0x43	; 67
     89e:	0e 94 86 05 	call	0xb0c	; 0xb0c <__subsf3>
     8a2:	0e 94 7f 08 	call	0x10fe	; 0x10fe <sqrt>
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	40 e7       	ldi	r20, 0x70	; 112
     8ac:	51 e4       	ldi	r21, 0x41	; 65
     8ae:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__divsf3>
     8b2:	60 93 9c 01 	sts	0x019C, r22	; 0x80019c <dAngle>
     8b6:	70 93 9d 01 	sts	0x019D, r23	; 0x80019d <dAngle+0x1>
     8ba:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <dAngle+0x2>
     8be:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <dAngle+0x3>
				dAngle = acos(dAngle) * (180 / M_PI);  // See Alex's lab notebook for formula used (combo of pythag. and trig.)
     8c2:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <dAngle>
     8c6:	70 91 9d 01 	lds	r23, 0x019D	; 0x80019d <dAngle+0x1>
     8ca:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <dAngle+0x2>
     8ce:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <dAngle+0x3>
     8d2:	0e 94 75 05 	call	0xaea	; 0xaea <acos>
     8d6:	20 ee       	ldi	r18, 0xE0	; 224
     8d8:	3e e2       	ldi	r19, 0x2E	; 46
     8da:	45 e6       	ldi	r20, 0x65	; 101
     8dc:	52 e4       	ldi	r21, 0x42	; 66
     8de:	0e 94 0c 08 	call	0x1018	; 0x1018 <__mulsf3>
     8e2:	60 93 9c 01 	sts	0x019C, r22	; 0x80019c <dAngle>
     8e6:	70 93 9d 01 	sts	0x019D, r23	; 0x80019d <dAngle+0x1>
     8ea:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <dAngle+0x2>
     8ee:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <dAngle+0x3>
				angle = floor((dAngle * 10));
     8f2:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <dAngle>
     8f6:	70 91 9d 01 	lds	r23, 0x019D	; 0x80019d <dAngle+0x1>
     8fa:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <dAngle+0x2>
     8fe:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <dAngle+0x3>
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	40 e2       	ldi	r20, 0x20	; 32
     908:	51 e4       	ldi	r21, 0x41	; 65
     90a:	0e 94 0c 08 	call	0x1018	; 0x1018 <__mulsf3>
     90e:	0e 94 dd 06 	call	0xdba	; 0xdba <floor>
     912:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__fixsfsi>
     916:	70 93 a1 01 	sts	0x01A1, r23	; 0x8001a1 <angle+0x1>
     91a:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <angle>
				if (height == 150)
     91e:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <height>
     922:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <height+0x1>
     926:	86 39       	cpi	r24, 0x96	; 150
     928:	91 05       	cpc	r25, r1
     92a:	31 f4       	brne	.+12     	; 0x938 <__stack+0x39>
				{
					angle = 900;
     92c:	84 e8       	ldi	r24, 0x84	; 132
     92e:	93 e0       	ldi	r25, 0x03	; 3
     930:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <angle+0x1>
     934:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <angle>
				}
				ftoa(angle, angleConv);
     938:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <angle>
     93c:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <angle+0x1>
     940:	66 e7       	ldi	r22, 0x76	; 118
     942:	71 e0       	ldi	r23, 0x01	; 1
     944:	0e 94 15 01 	call	0x22a	; 0x22a <ftoa>
				print_height_angle(angleConv,heightConv, 1); // refresh screen with height selected 
     948:	41 e0       	ldi	r20, 0x01	; 1
     94a:	50 e0       	ldi	r21, 0x00	; 0
     94c:	66 e8       	ldi	r22, 0x86	; 134
     94e:	71 e0       	ldi	r23, 0x01	; 1
     950:	86 e7       	ldi	r24, 0x76	; 118
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	0e 94 db 01 	call	0x3b6	; 0x3b6 <print_height_angle>
				state = HEIGHT; // exit from change function
     958:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <state+0x1>
     95c:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <state>
				break;
     960:	aa c0       	rjmp	.+340    	; 0xab6 <__stack+0x1b7>
			case CANGLE: // confirm angle change value
				valueConfirm = 1; // set flag - might need to make unique flag
     962:	c1 e0       	ldi	r28, 0x01	; 1
     964:	d0 e0       	ldi	r29, 0x00	; 0
     966:	d0 93 97 01 	sts	0x0197, r29	; 0x800197 <valueConfirm+0x1>
     96a:	c0 93 96 01 	sts	0x0196, r28	; 0x800196 <valueConfirm>
				// Convert angle to height
				dHeight = angle; // save angle as double
     96e:	60 91 a0 01 	lds	r22, 0x01A0	; 0x8001a0 <angle>
     972:	70 91 a1 01 	lds	r23, 0x01A1	; 0x8001a1 <angle+0x1>
     976:	07 2e       	mov	r0, r23
     978:	00 0c       	add	r0, r0
     97a:	88 0b       	sbc	r24, r24
     97c:	99 0b       	sbc	r25, r25
     97e:	0e 94 a2 06 	call	0xd44	; 0xd44 <__floatsisf>
     982:	60 93 98 01 	sts	0x0198, r22	; 0x800198 <dHeight>
     986:	70 93 99 01 	sts	0x0199, r23	; 0x800199 <dHeight+0x1>
     98a:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <dHeight+0x2>
     98e:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <dHeight+0x3>
				dHeight = (dHeight/10) * (M_PI / 180); // convert angle to radians
     992:	60 91 98 01 	lds	r22, 0x0198	; 0x800198 <dHeight>
     996:	70 91 99 01 	lds	r23, 0x0199	; 0x800199 <dHeight+0x1>
     99a:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <dHeight+0x2>
     99e:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <dHeight+0x3>
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	40 e2       	ldi	r20, 0x20	; 32
     9a8:	51 e4       	ldi	r21, 0x41	; 65
     9aa:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__divsf3>
     9ae:	25 e3       	ldi	r18, 0x35	; 53
     9b0:	3a ef       	ldi	r19, 0xFA	; 250
     9b2:	4e e8       	ldi	r20, 0x8E	; 142
     9b4:	5c e3       	ldi	r21, 0x3C	; 60
     9b6:	0e 94 0c 08 	call	0x1018	; 0x1018 <__mulsf3>
     9ba:	60 93 98 01 	sts	0x0198, r22	; 0x800198 <dHeight>
     9be:	70 93 99 01 	sts	0x0199, r23	; 0x800199 <dHeight+0x1>
     9c2:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <dHeight+0x2>
     9c6:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <dHeight+0x3>
				dHeight = 15*(cos(dHeight));
     9ca:	60 91 98 01 	lds	r22, 0x0198	; 0x800198 <dHeight>
     9ce:	70 91 99 01 	lds	r23, 0x0199	; 0x800199 <dHeight+0x1>
     9d2:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <dHeight+0x2>
     9d6:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <dHeight+0x3>
     9da:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <cos>
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	40 e7       	ldi	r20, 0x70	; 112
     9e4:	51 e4       	ldi	r21, 0x41	; 65
     9e6:	0e 94 0c 08 	call	0x1018	; 0x1018 <__mulsf3>
     9ea:	60 93 98 01 	sts	0x0198, r22	; 0x800198 <dHeight>
     9ee:	70 93 99 01 	sts	0x0199, r23	; 0x800199 <dHeight+0x1>
     9f2:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <dHeight+0x2>
     9f6:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <dHeight+0x3>
				dHeight = dHeight * dHeight;
     9fa:	60 91 98 01 	lds	r22, 0x0198	; 0x800198 <dHeight>
     9fe:	70 91 99 01 	lds	r23, 0x0199	; 0x800199 <dHeight+0x1>
     a02:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <dHeight+0x2>
     a06:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <dHeight+0x3>
     a0a:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <dHeight>
     a0e:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <dHeight+0x1>
     a12:	40 91 9a 01 	lds	r20, 0x019A	; 0x80019a <dHeight+0x2>
     a16:	50 91 9b 01 	lds	r21, 0x019B	; 0x80019b <dHeight+0x3>
     a1a:	0e 94 0c 08 	call	0x1018	; 0x1018 <__mulsf3>
     a1e:	60 93 98 01 	sts	0x0198, r22	; 0x800198 <dHeight>
     a22:	70 93 99 01 	sts	0x0199, r23	; 0x800199 <dHeight+0x1>
     a26:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <dHeight+0x2>
     a2a:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <dHeight+0x3>
				dHeight = sqrt((225-dHeight));
     a2e:	c0 90 98 01 	lds	r12, 0x0198	; 0x800198 <dHeight>
     a32:	d0 90 99 01 	lds	r13, 0x0199	; 0x800199 <dHeight+0x1>
     a36:	e0 90 9a 01 	lds	r14, 0x019A	; 0x80019a <dHeight+0x2>
     a3a:	f0 90 9b 01 	lds	r15, 0x019B	; 0x80019b <dHeight+0x3>
     a3e:	a7 01       	movw	r20, r14
     a40:	96 01       	movw	r18, r12
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	81 e6       	ldi	r24, 0x61	; 97
     a48:	93 e4       	ldi	r25, 0x43	; 67
     a4a:	0e 94 86 05 	call	0xb0c	; 0xb0c <__subsf3>
     a4e:	0e 94 7f 08 	call	0x10fe	; 0x10fe <sqrt>
     a52:	60 93 98 01 	sts	0x0198, r22	; 0x800198 <dHeight>
     a56:	70 93 99 01 	sts	0x0199, r23	; 0x800199 <dHeight+0x1>
     a5a:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <dHeight+0x2>
     a5e:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <dHeight+0x3>
				height = floor((dHeight*10));
     a62:	60 91 98 01 	lds	r22, 0x0198	; 0x800198 <dHeight>
     a66:	70 91 99 01 	lds	r23, 0x0199	; 0x800199 <dHeight+0x1>
     a6a:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <dHeight+0x2>
     a6e:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <dHeight+0x3>
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e2       	ldi	r20, 0x20	; 32
     a78:	51 e4       	ldi	r21, 0x41	; 65
     a7a:	0e 94 0c 08 	call	0x1018	; 0x1018 <__mulsf3>
     a7e:	0e 94 dd 06 	call	0xdba	; 0xdba <floor>
     a82:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__fixsfsi>
     a86:	70 93 a3 01 	sts	0x01A3, r23	; 0x8001a3 <height+0x1>
     a8a:	60 93 a2 01 	sts	0x01A2, r22	; 0x8001a2 <height>
				ftoa(height,heightConv);
     a8e:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <height>
     a92:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <height+0x1>
     a96:	66 e8       	ldi	r22, 0x86	; 134
     a98:	71 e0       	ldi	r23, 0x01	; 1
     a9a:	0e 94 15 01 	call	0x22a	; 0x22a <ftoa>
				print_height_angle(angleConv,heightConv, 0); // refresh screen with angle selected
     a9e:	40 e0       	ldi	r20, 0x00	; 0
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	66 e8       	ldi	r22, 0x86	; 134
     aa4:	71 e0       	ldi	r23, 0x01	; 1
     aa6:	86 e7       	ldi	r24, 0x76	; 118
     aa8:	91 e0       	ldi	r25, 0x01	; 1
     aaa:	0e 94 db 01 	call	0x3b6	; 0x3b6 <print_height_angle>
				state = ANGLE;
     aae:	d0 93 a5 01 	sts	0x01A5, r29	; 0x8001a5 <state+0x1>
     ab2:	c0 93 a4 01 	sts	0x01A4, r28	; 0x8001a4 <state>
				break;
		}
	}
	
	while(PINC != 127)
     ab6:	86 b1       	in	r24, 0x06	; 6
     ab8:	8f 37       	cpi	r24, 0x7F	; 127
     aba:	e9 f7       	brne	.-6      	; 0xab6 <__stack+0x1b7>
	{
		
	}

}
     abc:	ff 91       	pop	r31
     abe:	ef 91       	pop	r30
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	bf 91       	pop	r27
     ac6:	af 91       	pop	r26
     ac8:	9f 91       	pop	r25
     aca:	8f 91       	pop	r24
     acc:	7f 91       	pop	r23
     ace:	6f 91       	pop	r22
     ad0:	5f 91       	pop	r21
     ad2:	4f 91       	pop	r20
     ad4:	3f 91       	pop	r19
     ad6:	2f 91       	pop	r18
     ad8:	ff 90       	pop	r15
     ada:	ef 90       	pop	r14
     adc:	df 90       	pop	r13
     ade:	cf 90       	pop	r12
     ae0:	0f 90       	pop	r0
     ae2:	0f be       	out	0x3f, r0	; 63
     ae4:	0f 90       	pop	r0
     ae6:	1f 90       	pop	r1
     ae8:	18 95       	reti

00000aea <acos>:
     aea:	9f 93       	push	r25
     aec:	9f 77       	andi	r25, 0x7F	; 127
     aee:	0e 94 f4 06 	call	0xde8	; 0xde8 <__fp_arccos>
     af2:	0f 90       	pop	r0
     af4:	00 20       	and	r0, r0
     af6:	42 f4       	brpl	.+16     	; 0xb08 <acos+0x1e>
     af8:	90 58       	subi	r25, 0x80	; 128
     afa:	a2 ea       	ldi	r26, 0xA2	; 162
     afc:	2a ed       	ldi	r18, 0xDA	; 218
     afe:	3f e0       	ldi	r19, 0x0F	; 15
     b00:	49 e4       	ldi	r20, 0x49	; 73
     b02:	50 e4       	ldi	r21, 0x40	; 64
     b04:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__addsf3x>
     b08:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_round>

00000b0c <__subsf3>:
     b0c:	50 58       	subi	r21, 0x80	; 128

00000b0e <__addsf3>:
     b0e:	bb 27       	eor	r27, r27
     b10:	aa 27       	eor	r26, r26
     b12:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__addsf3x>
     b16:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_round>
     b1a:	0e 94 6d 07 	call	0xeda	; 0xeda <__fp_pscA>
     b1e:	38 f0       	brcs	.+14     	; 0xb2e <__addsf3+0x20>
     b20:	0e 94 74 07 	call	0xee8	; 0xee8 <__fp_pscB>
     b24:	20 f0       	brcs	.+8      	; 0xb2e <__addsf3+0x20>
     b26:	39 f4       	brne	.+14     	; 0xb36 <__addsf3+0x28>
     b28:	9f 3f       	cpi	r25, 0xFF	; 255
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__addsf3+0x24>
     b2c:	26 f4       	brtc	.+8      	; 0xb36 <__addsf3+0x28>
     b2e:	0c 94 43 07 	jmp	0xe86	; 0xe86 <__fp_nan>
     b32:	0e f4       	brtc	.+2      	; 0xb36 <__addsf3+0x28>
     b34:	e0 95       	com	r30
     b36:	e7 fb       	bst	r30, 7
     b38:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_inf>

00000b3c <__addsf3x>:
     b3c:	e9 2f       	mov	r30, r25
     b3e:	0e 94 cb 07 	call	0xf96	; 0xf96 <__fp_split3>
     b42:	58 f3       	brcs	.-42     	; 0xb1a <__addsf3+0xc>
     b44:	ba 17       	cp	r27, r26
     b46:	62 07       	cpc	r22, r18
     b48:	73 07       	cpc	r23, r19
     b4a:	84 07       	cpc	r24, r20
     b4c:	95 07       	cpc	r25, r21
     b4e:	20 f0       	brcs	.+8      	; 0xb58 <__addsf3x+0x1c>
     b50:	79 f4       	brne	.+30     	; 0xb70 <__addsf3x+0x34>
     b52:	a6 f5       	brtc	.+104    	; 0xbbc <__addsf3x+0x80>
     b54:	0c 94 05 08 	jmp	0x100a	; 0x100a <__fp_zero>
     b58:	0e f4       	brtc	.+2      	; 0xb5c <__addsf3x+0x20>
     b5a:	e0 95       	com	r30
     b5c:	0b 2e       	mov	r0, r27
     b5e:	ba 2f       	mov	r27, r26
     b60:	a0 2d       	mov	r26, r0
     b62:	0b 01       	movw	r0, r22
     b64:	b9 01       	movw	r22, r18
     b66:	90 01       	movw	r18, r0
     b68:	0c 01       	movw	r0, r24
     b6a:	ca 01       	movw	r24, r20
     b6c:	a0 01       	movw	r20, r0
     b6e:	11 24       	eor	r1, r1
     b70:	ff 27       	eor	r31, r31
     b72:	59 1b       	sub	r21, r25
     b74:	99 f0       	breq	.+38     	; 0xb9c <__addsf3x+0x60>
     b76:	59 3f       	cpi	r21, 0xF9	; 249
     b78:	50 f4       	brcc	.+20     	; 0xb8e <__addsf3x+0x52>
     b7a:	50 3e       	cpi	r21, 0xE0	; 224
     b7c:	68 f1       	brcs	.+90     	; 0xbd8 <__addsf3x+0x9c>
     b7e:	1a 16       	cp	r1, r26
     b80:	f0 40       	sbci	r31, 0x00	; 0
     b82:	a2 2f       	mov	r26, r18
     b84:	23 2f       	mov	r18, r19
     b86:	34 2f       	mov	r19, r20
     b88:	44 27       	eor	r20, r20
     b8a:	58 5f       	subi	r21, 0xF8	; 248
     b8c:	f3 cf       	rjmp	.-26     	; 0xb74 <__addsf3x+0x38>
     b8e:	46 95       	lsr	r20
     b90:	37 95       	ror	r19
     b92:	27 95       	ror	r18
     b94:	a7 95       	ror	r26
     b96:	f0 40       	sbci	r31, 0x00	; 0
     b98:	53 95       	inc	r21
     b9a:	c9 f7       	brne	.-14     	; 0xb8e <__addsf3x+0x52>
     b9c:	7e f4       	brtc	.+30     	; 0xbbc <__addsf3x+0x80>
     b9e:	1f 16       	cp	r1, r31
     ba0:	ba 0b       	sbc	r27, r26
     ba2:	62 0b       	sbc	r22, r18
     ba4:	73 0b       	sbc	r23, r19
     ba6:	84 0b       	sbc	r24, r20
     ba8:	ba f0       	brmi	.+46     	; 0xbd8 <__addsf3x+0x9c>
     baa:	91 50       	subi	r25, 0x01	; 1
     bac:	a1 f0       	breq	.+40     	; 0xbd6 <__addsf3x+0x9a>
     bae:	ff 0f       	add	r31, r31
     bb0:	bb 1f       	adc	r27, r27
     bb2:	66 1f       	adc	r22, r22
     bb4:	77 1f       	adc	r23, r23
     bb6:	88 1f       	adc	r24, r24
     bb8:	c2 f7       	brpl	.-16     	; 0xbaa <__addsf3x+0x6e>
     bba:	0e c0       	rjmp	.+28     	; 0xbd8 <__addsf3x+0x9c>
     bbc:	ba 0f       	add	r27, r26
     bbe:	62 1f       	adc	r22, r18
     bc0:	73 1f       	adc	r23, r19
     bc2:	84 1f       	adc	r24, r20
     bc4:	48 f4       	brcc	.+18     	; 0xbd8 <__addsf3x+0x9c>
     bc6:	87 95       	ror	r24
     bc8:	77 95       	ror	r23
     bca:	67 95       	ror	r22
     bcc:	b7 95       	ror	r27
     bce:	f7 95       	ror	r31
     bd0:	9e 3f       	cpi	r25, 0xFE	; 254
     bd2:	08 f0       	brcs	.+2      	; 0xbd6 <__addsf3x+0x9a>
     bd4:	b0 cf       	rjmp	.-160    	; 0xb36 <__addsf3+0x28>
     bd6:	93 95       	inc	r25
     bd8:	88 0f       	add	r24, r24
     bda:	08 f0       	brcs	.+2      	; 0xbde <__addsf3x+0xa2>
     bdc:	99 27       	eor	r25, r25
     bde:	ee 0f       	add	r30, r30
     be0:	97 95       	ror	r25
     be2:	87 95       	ror	r24
     be4:	08 95       	ret

00000be6 <cos>:
     be6:	0e 94 7d 07 	call	0xefa	; 0xefa <__fp_rempio2>
     bea:	e3 95       	inc	r30
     bec:	0c 94 b7 07 	jmp	0xf6e	; 0xf6e <__fp_sinus>

00000bf0 <__divsf3>:
     bf0:	0e 94 0c 06 	call	0xc18	; 0xc18 <__divsf3x>
     bf4:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_round>
     bf8:	0e 94 74 07 	call	0xee8	; 0xee8 <__fp_pscB>
     bfc:	58 f0       	brcs	.+22     	; 0xc14 <__divsf3+0x24>
     bfe:	0e 94 6d 07 	call	0xeda	; 0xeda <__fp_pscA>
     c02:	40 f0       	brcs	.+16     	; 0xc14 <__divsf3+0x24>
     c04:	29 f4       	brne	.+10     	; 0xc10 <__divsf3+0x20>
     c06:	5f 3f       	cpi	r21, 0xFF	; 255
     c08:	29 f0       	breq	.+10     	; 0xc14 <__divsf3+0x24>
     c0a:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_inf>
     c0e:	51 11       	cpse	r21, r1
     c10:	0c 94 06 08 	jmp	0x100c	; 0x100c <__fp_szero>
     c14:	0c 94 43 07 	jmp	0xe86	; 0xe86 <__fp_nan>

00000c18 <__divsf3x>:
     c18:	0e 94 cb 07 	call	0xf96	; 0xf96 <__fp_split3>
     c1c:	68 f3       	brcs	.-38     	; 0xbf8 <__divsf3+0x8>

00000c1e <__divsf3_pse>:
     c1e:	99 23       	and	r25, r25
     c20:	b1 f3       	breq	.-20     	; 0xc0e <__divsf3+0x1e>
     c22:	55 23       	and	r21, r21
     c24:	91 f3       	breq	.-28     	; 0xc0a <__divsf3+0x1a>
     c26:	95 1b       	sub	r25, r21
     c28:	55 0b       	sbc	r21, r21
     c2a:	bb 27       	eor	r27, r27
     c2c:	aa 27       	eor	r26, r26
     c2e:	62 17       	cp	r22, r18
     c30:	73 07       	cpc	r23, r19
     c32:	84 07       	cpc	r24, r20
     c34:	38 f0       	brcs	.+14     	; 0xc44 <__divsf3_pse+0x26>
     c36:	9f 5f       	subi	r25, 0xFF	; 255
     c38:	5f 4f       	sbci	r21, 0xFF	; 255
     c3a:	22 0f       	add	r18, r18
     c3c:	33 1f       	adc	r19, r19
     c3e:	44 1f       	adc	r20, r20
     c40:	aa 1f       	adc	r26, r26
     c42:	a9 f3       	breq	.-22     	; 0xc2e <__divsf3_pse+0x10>
     c44:	35 d0       	rcall	.+106    	; 0xcb0 <__divsf3_pse+0x92>
     c46:	0e 2e       	mov	r0, r30
     c48:	3a f0       	brmi	.+14     	; 0xc58 <__divsf3_pse+0x3a>
     c4a:	e0 e8       	ldi	r30, 0x80	; 128
     c4c:	32 d0       	rcall	.+100    	; 0xcb2 <__divsf3_pse+0x94>
     c4e:	91 50       	subi	r25, 0x01	; 1
     c50:	50 40       	sbci	r21, 0x00	; 0
     c52:	e6 95       	lsr	r30
     c54:	00 1c       	adc	r0, r0
     c56:	ca f7       	brpl	.-14     	; 0xc4a <__divsf3_pse+0x2c>
     c58:	2b d0       	rcall	.+86     	; 0xcb0 <__divsf3_pse+0x92>
     c5a:	fe 2f       	mov	r31, r30
     c5c:	29 d0       	rcall	.+82     	; 0xcb0 <__divsf3_pse+0x92>
     c5e:	66 0f       	add	r22, r22
     c60:	77 1f       	adc	r23, r23
     c62:	88 1f       	adc	r24, r24
     c64:	bb 1f       	adc	r27, r27
     c66:	26 17       	cp	r18, r22
     c68:	37 07       	cpc	r19, r23
     c6a:	48 07       	cpc	r20, r24
     c6c:	ab 07       	cpc	r26, r27
     c6e:	b0 e8       	ldi	r27, 0x80	; 128
     c70:	09 f0       	breq	.+2      	; 0xc74 <__divsf3_pse+0x56>
     c72:	bb 0b       	sbc	r27, r27
     c74:	80 2d       	mov	r24, r0
     c76:	bf 01       	movw	r22, r30
     c78:	ff 27       	eor	r31, r31
     c7a:	93 58       	subi	r25, 0x83	; 131
     c7c:	5f 4f       	sbci	r21, 0xFF	; 255
     c7e:	3a f0       	brmi	.+14     	; 0xc8e <__divsf3_pse+0x70>
     c80:	9e 3f       	cpi	r25, 0xFE	; 254
     c82:	51 05       	cpc	r21, r1
     c84:	78 f0       	brcs	.+30     	; 0xca4 <__divsf3_pse+0x86>
     c86:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_inf>
     c8a:	0c 94 06 08 	jmp	0x100c	; 0x100c <__fp_szero>
     c8e:	5f 3f       	cpi	r21, 0xFF	; 255
     c90:	e4 f3       	brlt	.-8      	; 0xc8a <__divsf3_pse+0x6c>
     c92:	98 3e       	cpi	r25, 0xE8	; 232
     c94:	d4 f3       	brlt	.-12     	; 0xc8a <__divsf3_pse+0x6c>
     c96:	86 95       	lsr	r24
     c98:	77 95       	ror	r23
     c9a:	67 95       	ror	r22
     c9c:	b7 95       	ror	r27
     c9e:	f7 95       	ror	r31
     ca0:	9f 5f       	subi	r25, 0xFF	; 255
     ca2:	c9 f7       	brne	.-14     	; 0xc96 <__divsf3_pse+0x78>
     ca4:	88 0f       	add	r24, r24
     ca6:	91 1d       	adc	r25, r1
     ca8:	96 95       	lsr	r25
     caa:	87 95       	ror	r24
     cac:	97 f9       	bld	r25, 7
     cae:	08 95       	ret
     cb0:	e1 e0       	ldi	r30, 0x01	; 1
     cb2:	66 0f       	add	r22, r22
     cb4:	77 1f       	adc	r23, r23
     cb6:	88 1f       	adc	r24, r24
     cb8:	bb 1f       	adc	r27, r27
     cba:	62 17       	cp	r22, r18
     cbc:	73 07       	cpc	r23, r19
     cbe:	84 07       	cpc	r24, r20
     cc0:	ba 07       	cpc	r27, r26
     cc2:	20 f0       	brcs	.+8      	; 0xccc <__divsf3_pse+0xae>
     cc4:	62 1b       	sub	r22, r18
     cc6:	73 0b       	sbc	r23, r19
     cc8:	84 0b       	sbc	r24, r20
     cca:	ba 0b       	sbc	r27, r26
     ccc:	ee 1f       	adc	r30, r30
     cce:	88 f7       	brcc	.-30     	; 0xcb2 <__divsf3_pse+0x94>
     cd0:	e0 95       	com	r30
     cd2:	08 95       	ret

00000cd4 <__fixsfsi>:
     cd4:	0e 94 71 06 	call	0xce2	; 0xce2 <__fixunssfsi>
     cd8:	68 94       	set
     cda:	b1 11       	cpse	r27, r1
     cdc:	0c 94 06 08 	jmp	0x100c	; 0x100c <__fp_szero>
     ce0:	08 95       	ret

00000ce2 <__fixunssfsi>:
     ce2:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__fp_splitA>
     ce6:	88 f0       	brcs	.+34     	; 0xd0a <__fixunssfsi+0x28>
     ce8:	9f 57       	subi	r25, 0x7F	; 127
     cea:	98 f0       	brcs	.+38     	; 0xd12 <__fixunssfsi+0x30>
     cec:	b9 2f       	mov	r27, r25
     cee:	99 27       	eor	r25, r25
     cf0:	b7 51       	subi	r27, 0x17	; 23
     cf2:	b0 f0       	brcs	.+44     	; 0xd20 <__fixunssfsi+0x3e>
     cf4:	e1 f0       	breq	.+56     	; 0xd2e <__fixunssfsi+0x4c>
     cf6:	66 0f       	add	r22, r22
     cf8:	77 1f       	adc	r23, r23
     cfa:	88 1f       	adc	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	1a f0       	brmi	.+6      	; 0xd06 <__fixunssfsi+0x24>
     d00:	ba 95       	dec	r27
     d02:	c9 f7       	brne	.-14     	; 0xcf6 <__fixunssfsi+0x14>
     d04:	14 c0       	rjmp	.+40     	; 0xd2e <__fixunssfsi+0x4c>
     d06:	b1 30       	cpi	r27, 0x01	; 1
     d08:	91 f0       	breq	.+36     	; 0xd2e <__fixunssfsi+0x4c>
     d0a:	0e 94 05 08 	call	0x100a	; 0x100a <__fp_zero>
     d0e:	b1 e0       	ldi	r27, 0x01	; 1
     d10:	08 95       	ret
     d12:	0c 94 05 08 	jmp	0x100a	; 0x100a <__fp_zero>
     d16:	67 2f       	mov	r22, r23
     d18:	78 2f       	mov	r23, r24
     d1a:	88 27       	eor	r24, r24
     d1c:	b8 5f       	subi	r27, 0xF8	; 248
     d1e:	39 f0       	breq	.+14     	; 0xd2e <__fixunssfsi+0x4c>
     d20:	b9 3f       	cpi	r27, 0xF9	; 249
     d22:	cc f3       	brlt	.-14     	; 0xd16 <__fixunssfsi+0x34>
     d24:	86 95       	lsr	r24
     d26:	77 95       	ror	r23
     d28:	67 95       	ror	r22
     d2a:	b3 95       	inc	r27
     d2c:	d9 f7       	brne	.-10     	; 0xd24 <__fixunssfsi+0x42>
     d2e:	3e f4       	brtc	.+14     	; 0xd3e <__fixunssfsi+0x5c>
     d30:	90 95       	com	r25
     d32:	80 95       	com	r24
     d34:	70 95       	com	r23
     d36:	61 95       	neg	r22
     d38:	7f 4f       	sbci	r23, 0xFF	; 255
     d3a:	8f 4f       	sbci	r24, 0xFF	; 255
     d3c:	9f 4f       	sbci	r25, 0xFF	; 255
     d3e:	08 95       	ret

00000d40 <__floatunsisf>:
     d40:	e8 94       	clt
     d42:	09 c0       	rjmp	.+18     	; 0xd56 <__floatsisf+0x12>

00000d44 <__floatsisf>:
     d44:	97 fb       	bst	r25, 7
     d46:	3e f4       	brtc	.+14     	; 0xd56 <__floatsisf+0x12>
     d48:	90 95       	com	r25
     d4a:	80 95       	com	r24
     d4c:	70 95       	com	r23
     d4e:	61 95       	neg	r22
     d50:	7f 4f       	sbci	r23, 0xFF	; 255
     d52:	8f 4f       	sbci	r24, 0xFF	; 255
     d54:	9f 4f       	sbci	r25, 0xFF	; 255
     d56:	99 23       	and	r25, r25
     d58:	a9 f0       	breq	.+42     	; 0xd84 <__floatsisf+0x40>
     d5a:	f9 2f       	mov	r31, r25
     d5c:	96 e9       	ldi	r25, 0x96	; 150
     d5e:	bb 27       	eor	r27, r27
     d60:	93 95       	inc	r25
     d62:	f6 95       	lsr	r31
     d64:	87 95       	ror	r24
     d66:	77 95       	ror	r23
     d68:	67 95       	ror	r22
     d6a:	b7 95       	ror	r27
     d6c:	f1 11       	cpse	r31, r1
     d6e:	f8 cf       	rjmp	.-16     	; 0xd60 <__floatsisf+0x1c>
     d70:	fa f4       	brpl	.+62     	; 0xdb0 <__floatsisf+0x6c>
     d72:	bb 0f       	add	r27, r27
     d74:	11 f4       	brne	.+4      	; 0xd7a <__floatsisf+0x36>
     d76:	60 ff       	sbrs	r22, 0
     d78:	1b c0       	rjmp	.+54     	; 0xdb0 <__floatsisf+0x6c>
     d7a:	6f 5f       	subi	r22, 0xFF	; 255
     d7c:	7f 4f       	sbci	r23, 0xFF	; 255
     d7e:	8f 4f       	sbci	r24, 0xFF	; 255
     d80:	9f 4f       	sbci	r25, 0xFF	; 255
     d82:	16 c0       	rjmp	.+44     	; 0xdb0 <__floatsisf+0x6c>
     d84:	88 23       	and	r24, r24
     d86:	11 f0       	breq	.+4      	; 0xd8c <__floatsisf+0x48>
     d88:	96 e9       	ldi	r25, 0x96	; 150
     d8a:	11 c0       	rjmp	.+34     	; 0xdae <__floatsisf+0x6a>
     d8c:	77 23       	and	r23, r23
     d8e:	21 f0       	breq	.+8      	; 0xd98 <__floatsisf+0x54>
     d90:	9e e8       	ldi	r25, 0x8E	; 142
     d92:	87 2f       	mov	r24, r23
     d94:	76 2f       	mov	r23, r22
     d96:	05 c0       	rjmp	.+10     	; 0xda2 <__floatsisf+0x5e>
     d98:	66 23       	and	r22, r22
     d9a:	71 f0       	breq	.+28     	; 0xdb8 <__floatsisf+0x74>
     d9c:	96 e8       	ldi	r25, 0x86	; 134
     d9e:	86 2f       	mov	r24, r22
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	2a f0       	brmi	.+10     	; 0xdb0 <__floatsisf+0x6c>
     da6:	9a 95       	dec	r25
     da8:	66 0f       	add	r22, r22
     daa:	77 1f       	adc	r23, r23
     dac:	88 1f       	adc	r24, r24
     dae:	da f7       	brpl	.-10     	; 0xda6 <__floatsisf+0x62>
     db0:	88 0f       	add	r24, r24
     db2:	96 95       	lsr	r25
     db4:	87 95       	ror	r24
     db6:	97 f9       	bld	r25, 7
     db8:	08 95       	ret

00000dba <floor>:
     dba:	0e 94 ed 07 	call	0xfda	; 0xfda <__fp_trunc>
     dbe:	90 f0       	brcs	.+36     	; 0xde4 <floor+0x2a>
     dc0:	9f 37       	cpi	r25, 0x7F	; 127
     dc2:	48 f4       	brcc	.+18     	; 0xdd6 <floor+0x1c>
     dc4:	91 11       	cpse	r25, r1
     dc6:	16 f0       	brts	.+4      	; 0xdcc <floor+0x12>
     dc8:	0c 94 06 08 	jmp	0x100c	; 0x100c <__fp_szero>
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	80 e8       	ldi	r24, 0x80	; 128
     dd2:	9f eb       	ldi	r25, 0xBF	; 191
     dd4:	08 95       	ret
     dd6:	26 f4       	brtc	.+8      	; 0xde0 <floor+0x26>
     dd8:	1b 16       	cp	r1, r27
     dda:	61 1d       	adc	r22, r1
     ddc:	71 1d       	adc	r23, r1
     dde:	81 1d       	adc	r24, r1
     de0:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__fp_mintl>
     de4:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_mpack>

00000de8 <__fp_arccos>:
     de8:	df 93       	push	r29
     dea:	cf 93       	push	r28
     dec:	1f 93       	push	r17
     dee:	0f 93       	push	r16
     df0:	8b 01       	movw	r16, r22
     df2:	ec 01       	movw	r28, r24
     df4:	e4 eb       	ldi	r30, 0xB4	; 180
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	0e 94 46 07 	call	0xe8c	; 0xe8c <__fp_powser>
     dfc:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__fp_round>
     e00:	98 01       	movw	r18, r16
     e02:	ae 01       	movw	r20, r28
     e04:	8b 01       	movw	r16, r22
     e06:	ec 01       	movw	r28, r24
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	80 e8       	ldi	r24, 0x80	; 128
     e0e:	9f e3       	ldi	r25, 0x3F	; 63
     e10:	0e 94 86 05 	call	0xb0c	; 0xb0c <__subsf3>
     e14:	0e 94 7f 08 	call	0x10fe	; 0x10fe <sqrt>
     e18:	98 01       	movw	r18, r16
     e1a:	ae 01       	movw	r20, r28
     e1c:	0f 91       	pop	r16
     e1e:	1f 91       	pop	r17
     e20:	cf 91       	pop	r28
     e22:	df 91       	pop	r29
     e24:	0c 94 1f 08 	jmp	0x103e	; 0x103e <__mulsf3x>

00000e28 <__fp_inf>:
     e28:	97 f9       	bld	r25, 7
     e2a:	9f 67       	ori	r25, 0x7F	; 127
     e2c:	80 e8       	ldi	r24, 0x80	; 128
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	60 e0       	ldi	r22, 0x00	; 0
     e32:	08 95       	ret

00000e34 <__fp_mintl>:
     e34:	88 23       	and	r24, r24
     e36:	71 f4       	brne	.+28     	; 0xe54 <__fp_mintl+0x20>
     e38:	77 23       	and	r23, r23
     e3a:	21 f0       	breq	.+8      	; 0xe44 <__fp_mintl+0x10>
     e3c:	98 50       	subi	r25, 0x08	; 8
     e3e:	87 2b       	or	r24, r23
     e40:	76 2f       	mov	r23, r22
     e42:	07 c0       	rjmp	.+14     	; 0xe52 <__fp_mintl+0x1e>
     e44:	66 23       	and	r22, r22
     e46:	11 f4       	brne	.+4      	; 0xe4c <__fp_mintl+0x18>
     e48:	99 27       	eor	r25, r25
     e4a:	0d c0       	rjmp	.+26     	; 0xe66 <__fp_mintl+0x32>
     e4c:	90 51       	subi	r25, 0x10	; 16
     e4e:	86 2b       	or	r24, r22
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	2a f0       	brmi	.+10     	; 0xe60 <__fp_mintl+0x2c>
     e56:	9a 95       	dec	r25
     e58:	66 0f       	add	r22, r22
     e5a:	77 1f       	adc	r23, r23
     e5c:	88 1f       	adc	r24, r24
     e5e:	da f7       	brpl	.-10     	; 0xe56 <__fp_mintl+0x22>
     e60:	88 0f       	add	r24, r24
     e62:	96 95       	lsr	r25
     e64:	87 95       	ror	r24
     e66:	97 f9       	bld	r25, 7
     e68:	08 95       	ret

00000e6a <__fp_mpack>:
     e6a:	9f 3f       	cpi	r25, 0xFF	; 255
     e6c:	31 f0       	breq	.+12     	; 0xe7a <__fp_mpack_finite+0xc>

00000e6e <__fp_mpack_finite>:
     e6e:	91 50       	subi	r25, 0x01	; 1
     e70:	20 f4       	brcc	.+8      	; 0xe7a <__fp_mpack_finite+0xc>
     e72:	87 95       	ror	r24
     e74:	77 95       	ror	r23
     e76:	67 95       	ror	r22
     e78:	b7 95       	ror	r27
     e7a:	88 0f       	add	r24, r24
     e7c:	91 1d       	adc	r25, r1
     e7e:	96 95       	lsr	r25
     e80:	87 95       	ror	r24
     e82:	97 f9       	bld	r25, 7
     e84:	08 95       	ret

00000e86 <__fp_nan>:
     e86:	9f ef       	ldi	r25, 0xFF	; 255
     e88:	80 ec       	ldi	r24, 0xC0	; 192
     e8a:	08 95       	ret

00000e8c <__fp_powser>:
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	1f 93       	push	r17
     e92:	0f 93       	push	r16
     e94:	ff 92       	push	r15
     e96:	ef 92       	push	r14
     e98:	df 92       	push	r13
     e9a:	7b 01       	movw	r14, r22
     e9c:	8c 01       	movw	r16, r24
     e9e:	68 94       	set
     ea0:	06 c0       	rjmp	.+12     	; 0xeae <__fp_powser+0x22>
     ea2:	da 2e       	mov	r13, r26
     ea4:	ef 01       	movw	r28, r30
     ea6:	0e 94 1f 08 	call	0x103e	; 0x103e <__mulsf3x>
     eaa:	fe 01       	movw	r30, r28
     eac:	e8 94       	clt
     eae:	a5 91       	lpm	r26, Z+
     eb0:	25 91       	lpm	r18, Z+
     eb2:	35 91       	lpm	r19, Z+
     eb4:	45 91       	lpm	r20, Z+
     eb6:	55 91       	lpm	r21, Z+
     eb8:	a6 f3       	brts	.-24     	; 0xea2 <__fp_powser+0x16>
     eba:	ef 01       	movw	r28, r30
     ebc:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__addsf3x>
     ec0:	fe 01       	movw	r30, r28
     ec2:	97 01       	movw	r18, r14
     ec4:	a8 01       	movw	r20, r16
     ec6:	da 94       	dec	r13
     ec8:	69 f7       	brne	.-38     	; 0xea4 <__fp_powser+0x18>
     eca:	df 90       	pop	r13
     ecc:	ef 90       	pop	r14
     ece:	ff 90       	pop	r15
     ed0:	0f 91       	pop	r16
     ed2:	1f 91       	pop	r17
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <__fp_pscA>:
     eda:	00 24       	eor	r0, r0
     edc:	0a 94       	dec	r0
     ede:	16 16       	cp	r1, r22
     ee0:	17 06       	cpc	r1, r23
     ee2:	18 06       	cpc	r1, r24
     ee4:	09 06       	cpc	r0, r25
     ee6:	08 95       	ret

00000ee8 <__fp_pscB>:
     ee8:	00 24       	eor	r0, r0
     eea:	0a 94       	dec	r0
     eec:	12 16       	cp	r1, r18
     eee:	13 06       	cpc	r1, r19
     ef0:	14 06       	cpc	r1, r20
     ef2:	05 06       	cpc	r0, r21
     ef4:	08 95       	ret
     ef6:	0c 94 43 07 	jmp	0xe86	; 0xe86 <__fp_nan>

00000efa <__fp_rempio2>:
     efa:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__fp_splitA>
     efe:	d8 f3       	brcs	.-10     	; 0xef6 <__fp_pscB+0xe>
     f00:	e8 94       	clt
     f02:	e0 e0       	ldi	r30, 0x00	; 0
     f04:	bb 27       	eor	r27, r27
     f06:	9f 57       	subi	r25, 0x7F	; 127
     f08:	f0 f0       	brcs	.+60     	; 0xf46 <__fp_rempio2+0x4c>
     f0a:	2a ed       	ldi	r18, 0xDA	; 218
     f0c:	3f e0       	ldi	r19, 0x0F	; 15
     f0e:	49 ec       	ldi	r20, 0xC9	; 201
     f10:	06 c0       	rjmp	.+12     	; 0xf1e <__fp_rempio2+0x24>
     f12:	ee 0f       	add	r30, r30
     f14:	bb 0f       	add	r27, r27
     f16:	66 1f       	adc	r22, r22
     f18:	77 1f       	adc	r23, r23
     f1a:	88 1f       	adc	r24, r24
     f1c:	28 f0       	brcs	.+10     	; 0xf28 <__fp_rempio2+0x2e>
     f1e:	b2 3a       	cpi	r27, 0xA2	; 162
     f20:	62 07       	cpc	r22, r18
     f22:	73 07       	cpc	r23, r19
     f24:	84 07       	cpc	r24, r20
     f26:	28 f0       	brcs	.+10     	; 0xf32 <__fp_rempio2+0x38>
     f28:	b2 5a       	subi	r27, 0xA2	; 162
     f2a:	62 0b       	sbc	r22, r18
     f2c:	73 0b       	sbc	r23, r19
     f2e:	84 0b       	sbc	r24, r20
     f30:	e3 95       	inc	r30
     f32:	9a 95       	dec	r25
     f34:	72 f7       	brpl	.-36     	; 0xf12 <__fp_rempio2+0x18>
     f36:	80 38       	cpi	r24, 0x80	; 128
     f38:	30 f4       	brcc	.+12     	; 0xf46 <__fp_rempio2+0x4c>
     f3a:	9a 95       	dec	r25
     f3c:	bb 0f       	add	r27, r27
     f3e:	66 1f       	adc	r22, r22
     f40:	77 1f       	adc	r23, r23
     f42:	88 1f       	adc	r24, r24
     f44:	d2 f7       	brpl	.-12     	; 0xf3a <__fp_rempio2+0x40>
     f46:	90 48       	sbci	r25, 0x80	; 128
     f48:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <__fp_mpack_finite>

00000f4c <__fp_round>:
     f4c:	09 2e       	mov	r0, r25
     f4e:	03 94       	inc	r0
     f50:	00 0c       	add	r0, r0
     f52:	11 f4       	brne	.+4      	; 0xf58 <__fp_round+0xc>
     f54:	88 23       	and	r24, r24
     f56:	52 f0       	brmi	.+20     	; 0xf6c <__fp_round+0x20>
     f58:	bb 0f       	add	r27, r27
     f5a:	40 f4       	brcc	.+16     	; 0xf6c <__fp_round+0x20>
     f5c:	bf 2b       	or	r27, r31
     f5e:	11 f4       	brne	.+4      	; 0xf64 <__fp_round+0x18>
     f60:	60 ff       	sbrs	r22, 0
     f62:	04 c0       	rjmp	.+8      	; 0xf6c <__fp_round+0x20>
     f64:	6f 5f       	subi	r22, 0xFF	; 255
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	8f 4f       	sbci	r24, 0xFF	; 255
     f6a:	9f 4f       	sbci	r25, 0xFF	; 255
     f6c:	08 95       	ret

00000f6e <__fp_sinus>:
     f6e:	ef 93       	push	r30
     f70:	e0 ff       	sbrs	r30, 0
     f72:	07 c0       	rjmp	.+14     	; 0xf82 <__fp_sinus+0x14>
     f74:	a2 ea       	ldi	r26, 0xA2	; 162
     f76:	2a ed       	ldi	r18, 0xDA	; 218
     f78:	3f e0       	ldi	r19, 0x0F	; 15
     f7a:	49 ec       	ldi	r20, 0xC9	; 201
     f7c:	5f eb       	ldi	r21, 0xBF	; 191
     f7e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__addsf3x>
     f82:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__fp_round>
     f86:	0f 90       	pop	r0
     f88:	03 94       	inc	r0
     f8a:	01 fc       	sbrc	r0, 1
     f8c:	90 58       	subi	r25, 0x80	; 128
     f8e:	ec ed       	ldi	r30, 0xDC	; 220
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	0c 94 c6 08 	jmp	0x118c	; 0x118c <__fp_powsodd>

00000f96 <__fp_split3>:
     f96:	57 fd       	sbrc	r21, 7
     f98:	90 58       	subi	r25, 0x80	; 128
     f9a:	44 0f       	add	r20, r20
     f9c:	55 1f       	adc	r21, r21
     f9e:	59 f0       	breq	.+22     	; 0xfb6 <__fp_splitA+0x10>
     fa0:	5f 3f       	cpi	r21, 0xFF	; 255
     fa2:	71 f0       	breq	.+28     	; 0xfc0 <__fp_splitA+0x1a>
     fa4:	47 95       	ror	r20

00000fa6 <__fp_splitA>:
     fa6:	88 0f       	add	r24, r24
     fa8:	97 fb       	bst	r25, 7
     faa:	99 1f       	adc	r25, r25
     fac:	61 f0       	breq	.+24     	; 0xfc6 <__fp_splitA+0x20>
     fae:	9f 3f       	cpi	r25, 0xFF	; 255
     fb0:	79 f0       	breq	.+30     	; 0xfd0 <__fp_splitA+0x2a>
     fb2:	87 95       	ror	r24
     fb4:	08 95       	ret
     fb6:	12 16       	cp	r1, r18
     fb8:	13 06       	cpc	r1, r19
     fba:	14 06       	cpc	r1, r20
     fbc:	55 1f       	adc	r21, r21
     fbe:	f2 cf       	rjmp	.-28     	; 0xfa4 <__fp_split3+0xe>
     fc0:	46 95       	lsr	r20
     fc2:	f1 df       	rcall	.-30     	; 0xfa6 <__fp_splitA>
     fc4:	08 c0       	rjmp	.+16     	; 0xfd6 <__fp_splitA+0x30>
     fc6:	16 16       	cp	r1, r22
     fc8:	17 06       	cpc	r1, r23
     fca:	18 06       	cpc	r1, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	f1 cf       	rjmp	.-30     	; 0xfb2 <__fp_splitA+0xc>
     fd0:	86 95       	lsr	r24
     fd2:	71 05       	cpc	r23, r1
     fd4:	61 05       	cpc	r22, r1
     fd6:	08 94       	sec
     fd8:	08 95       	ret

00000fda <__fp_trunc>:
     fda:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__fp_splitA>
     fde:	a0 f0       	brcs	.+40     	; 0x1008 <__fp_trunc+0x2e>
     fe0:	be e7       	ldi	r27, 0x7E	; 126
     fe2:	b9 17       	cp	r27, r25
     fe4:	88 f4       	brcc	.+34     	; 0x1008 <__fp_trunc+0x2e>
     fe6:	bb 27       	eor	r27, r27
     fe8:	9f 38       	cpi	r25, 0x8F	; 143
     fea:	60 f4       	brcc	.+24     	; 0x1004 <__fp_trunc+0x2a>
     fec:	16 16       	cp	r1, r22
     fee:	b1 1d       	adc	r27, r1
     ff0:	67 2f       	mov	r22, r23
     ff2:	78 2f       	mov	r23, r24
     ff4:	88 27       	eor	r24, r24
     ff6:	98 5f       	subi	r25, 0xF8	; 248
     ff8:	f7 cf       	rjmp	.-18     	; 0xfe8 <__fp_trunc+0xe>
     ffa:	86 95       	lsr	r24
     ffc:	77 95       	ror	r23
     ffe:	67 95       	ror	r22
    1000:	b1 1d       	adc	r27, r1
    1002:	93 95       	inc	r25
    1004:	96 39       	cpi	r25, 0x96	; 150
    1006:	c8 f3       	brcs	.-14     	; 0xffa <__fp_trunc+0x20>
    1008:	08 95       	ret

0000100a <__fp_zero>:
    100a:	e8 94       	clt

0000100c <__fp_szero>:
    100c:	bb 27       	eor	r27, r27
    100e:	66 27       	eor	r22, r22
    1010:	77 27       	eor	r23, r23
    1012:	cb 01       	movw	r24, r22
    1014:	97 f9       	bld	r25, 7
    1016:	08 95       	ret

00001018 <__mulsf3>:
    1018:	0e 94 1f 08 	call	0x103e	; 0x103e <__mulsf3x>
    101c:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_round>
    1020:	0e 94 6d 07 	call	0xeda	; 0xeda <__fp_pscA>
    1024:	38 f0       	brcs	.+14     	; 0x1034 <__mulsf3+0x1c>
    1026:	0e 94 74 07 	call	0xee8	; 0xee8 <__fp_pscB>
    102a:	20 f0       	brcs	.+8      	; 0x1034 <__mulsf3+0x1c>
    102c:	95 23       	and	r25, r21
    102e:	11 f0       	breq	.+4      	; 0x1034 <__mulsf3+0x1c>
    1030:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_inf>
    1034:	0c 94 43 07 	jmp	0xe86	; 0xe86 <__fp_nan>
    1038:	11 24       	eor	r1, r1
    103a:	0c 94 06 08 	jmp	0x100c	; 0x100c <__fp_szero>

0000103e <__mulsf3x>:
    103e:	0e 94 cb 07 	call	0xf96	; 0xf96 <__fp_split3>
    1042:	70 f3       	brcs	.-36     	; 0x1020 <__mulsf3+0x8>

00001044 <__mulsf3_pse>:
    1044:	95 9f       	mul	r25, r21
    1046:	c1 f3       	breq	.-16     	; 0x1038 <__mulsf3+0x20>
    1048:	95 0f       	add	r25, r21
    104a:	50 e0       	ldi	r21, 0x00	; 0
    104c:	55 1f       	adc	r21, r21
    104e:	62 9f       	mul	r22, r18
    1050:	f0 01       	movw	r30, r0
    1052:	72 9f       	mul	r23, r18
    1054:	bb 27       	eor	r27, r27
    1056:	f0 0d       	add	r31, r0
    1058:	b1 1d       	adc	r27, r1
    105a:	63 9f       	mul	r22, r19
    105c:	aa 27       	eor	r26, r26
    105e:	f0 0d       	add	r31, r0
    1060:	b1 1d       	adc	r27, r1
    1062:	aa 1f       	adc	r26, r26
    1064:	64 9f       	mul	r22, r20
    1066:	66 27       	eor	r22, r22
    1068:	b0 0d       	add	r27, r0
    106a:	a1 1d       	adc	r26, r1
    106c:	66 1f       	adc	r22, r22
    106e:	82 9f       	mul	r24, r18
    1070:	22 27       	eor	r18, r18
    1072:	b0 0d       	add	r27, r0
    1074:	a1 1d       	adc	r26, r1
    1076:	62 1f       	adc	r22, r18
    1078:	73 9f       	mul	r23, r19
    107a:	b0 0d       	add	r27, r0
    107c:	a1 1d       	adc	r26, r1
    107e:	62 1f       	adc	r22, r18
    1080:	83 9f       	mul	r24, r19
    1082:	a0 0d       	add	r26, r0
    1084:	61 1d       	adc	r22, r1
    1086:	22 1f       	adc	r18, r18
    1088:	74 9f       	mul	r23, r20
    108a:	33 27       	eor	r19, r19
    108c:	a0 0d       	add	r26, r0
    108e:	61 1d       	adc	r22, r1
    1090:	23 1f       	adc	r18, r19
    1092:	84 9f       	mul	r24, r20
    1094:	60 0d       	add	r22, r0
    1096:	21 1d       	adc	r18, r1
    1098:	82 2f       	mov	r24, r18
    109a:	76 2f       	mov	r23, r22
    109c:	6a 2f       	mov	r22, r26
    109e:	11 24       	eor	r1, r1
    10a0:	9f 57       	subi	r25, 0x7F	; 127
    10a2:	50 40       	sbci	r21, 0x00	; 0
    10a4:	9a f0       	brmi	.+38     	; 0x10cc <__mulsf3_pse+0x88>
    10a6:	f1 f0       	breq	.+60     	; 0x10e4 <__mulsf3_pse+0xa0>
    10a8:	88 23       	and	r24, r24
    10aa:	4a f0       	brmi	.+18     	; 0x10be <__mulsf3_pse+0x7a>
    10ac:	ee 0f       	add	r30, r30
    10ae:	ff 1f       	adc	r31, r31
    10b0:	bb 1f       	adc	r27, r27
    10b2:	66 1f       	adc	r22, r22
    10b4:	77 1f       	adc	r23, r23
    10b6:	88 1f       	adc	r24, r24
    10b8:	91 50       	subi	r25, 0x01	; 1
    10ba:	50 40       	sbci	r21, 0x00	; 0
    10bc:	a9 f7       	brne	.-22     	; 0x10a8 <__mulsf3_pse+0x64>
    10be:	9e 3f       	cpi	r25, 0xFE	; 254
    10c0:	51 05       	cpc	r21, r1
    10c2:	80 f0       	brcs	.+32     	; 0x10e4 <__mulsf3_pse+0xa0>
    10c4:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_inf>
    10c8:	0c 94 06 08 	jmp	0x100c	; 0x100c <__fp_szero>
    10cc:	5f 3f       	cpi	r21, 0xFF	; 255
    10ce:	e4 f3       	brlt	.-8      	; 0x10c8 <__mulsf3_pse+0x84>
    10d0:	98 3e       	cpi	r25, 0xE8	; 232
    10d2:	d4 f3       	brlt	.-12     	; 0x10c8 <__mulsf3_pse+0x84>
    10d4:	86 95       	lsr	r24
    10d6:	77 95       	ror	r23
    10d8:	67 95       	ror	r22
    10da:	b7 95       	ror	r27
    10dc:	f7 95       	ror	r31
    10de:	e7 95       	ror	r30
    10e0:	9f 5f       	subi	r25, 0xFF	; 255
    10e2:	c1 f7       	brne	.-16     	; 0x10d4 <__mulsf3_pse+0x90>
    10e4:	fe 2b       	or	r31, r30
    10e6:	88 0f       	add	r24, r24
    10e8:	91 1d       	adc	r25, r1
    10ea:	96 95       	lsr	r25
    10ec:	87 95       	ror	r24
    10ee:	97 f9       	bld	r25, 7
    10f0:	08 95       	ret
    10f2:	19 f4       	brne	.+6      	; 0x10fa <__mulsf3_pse+0xb6>
    10f4:	16 f4       	brtc	.+4      	; 0x10fa <__mulsf3_pse+0xb6>
    10f6:	0c 94 43 07 	jmp	0xe86	; 0xe86 <__fp_nan>
    10fa:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_mpack>

000010fe <sqrt>:
    10fe:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__fp_splitA>
    1102:	b8 f3       	brcs	.-18     	; 0x10f2 <__mulsf3_pse+0xae>
    1104:	99 23       	and	r25, r25
    1106:	c9 f3       	breq	.-14     	; 0x10fa <__mulsf3_pse+0xb6>
    1108:	b6 f3       	brts	.-20     	; 0x10f6 <__mulsf3_pse+0xb2>
    110a:	9f 57       	subi	r25, 0x7F	; 127
    110c:	55 0b       	sbc	r21, r21
    110e:	87 ff       	sbrs	r24, 7
    1110:	0e 94 bf 08 	call	0x117e	; 0x117e <__fp_norm2>
    1114:	00 24       	eor	r0, r0
    1116:	a0 e6       	ldi	r26, 0x60	; 96
    1118:	40 ea       	ldi	r20, 0xA0	; 160
    111a:	90 01       	movw	r18, r0
    111c:	80 58       	subi	r24, 0x80	; 128
    111e:	56 95       	lsr	r21
    1120:	97 95       	ror	r25
    1122:	28 f4       	brcc	.+10     	; 0x112e <sqrt+0x30>
    1124:	80 5c       	subi	r24, 0xC0	; 192
    1126:	66 0f       	add	r22, r22
    1128:	77 1f       	adc	r23, r23
    112a:	88 1f       	adc	r24, r24
    112c:	20 f0       	brcs	.+8      	; 0x1136 <sqrt+0x38>
    112e:	26 17       	cp	r18, r22
    1130:	37 07       	cpc	r19, r23
    1132:	48 07       	cpc	r20, r24
    1134:	30 f4       	brcc	.+12     	; 0x1142 <sqrt+0x44>
    1136:	62 1b       	sub	r22, r18
    1138:	73 0b       	sbc	r23, r19
    113a:	84 0b       	sbc	r24, r20
    113c:	20 29       	or	r18, r0
    113e:	31 29       	or	r19, r1
    1140:	4a 2b       	or	r20, r26
    1142:	a6 95       	lsr	r26
    1144:	17 94       	ror	r1
    1146:	07 94       	ror	r0
    1148:	20 25       	eor	r18, r0
    114a:	31 25       	eor	r19, r1
    114c:	4a 27       	eor	r20, r26
    114e:	58 f7       	brcc	.-42     	; 0x1126 <sqrt+0x28>
    1150:	66 0f       	add	r22, r22
    1152:	77 1f       	adc	r23, r23
    1154:	88 1f       	adc	r24, r24
    1156:	20 f0       	brcs	.+8      	; 0x1160 <sqrt+0x62>
    1158:	26 17       	cp	r18, r22
    115a:	37 07       	cpc	r19, r23
    115c:	48 07       	cpc	r20, r24
    115e:	30 f4       	brcc	.+12     	; 0x116c <sqrt+0x6e>
    1160:	62 0b       	sbc	r22, r18
    1162:	73 0b       	sbc	r23, r19
    1164:	84 0b       	sbc	r24, r20
    1166:	20 0d       	add	r18, r0
    1168:	31 1d       	adc	r19, r1
    116a:	41 1d       	adc	r20, r1
    116c:	a0 95       	com	r26
    116e:	81 f7       	brne	.-32     	; 0x1150 <sqrt+0x52>
    1170:	b9 01       	movw	r22, r18
    1172:	84 2f       	mov	r24, r20
    1174:	91 58       	subi	r25, 0x81	; 129
    1176:	88 0f       	add	r24, r24
    1178:	96 95       	lsr	r25
    117a:	87 95       	ror	r24
    117c:	08 95       	ret

0000117e <__fp_norm2>:
    117e:	91 50       	subi	r25, 0x01	; 1
    1180:	50 40       	sbci	r21, 0x00	; 0
    1182:	66 0f       	add	r22, r22
    1184:	77 1f       	adc	r23, r23
    1186:	88 1f       	adc	r24, r24
    1188:	d2 f7       	brpl	.-12     	; 0x117e <__fp_norm2>
    118a:	08 95       	ret

0000118c <__fp_powsodd>:
    118c:	9f 93       	push	r25
    118e:	8f 93       	push	r24
    1190:	7f 93       	push	r23
    1192:	6f 93       	push	r22
    1194:	ff 93       	push	r31
    1196:	ef 93       	push	r30
    1198:	9b 01       	movw	r18, r22
    119a:	ac 01       	movw	r20, r24
    119c:	0e 94 0c 08 	call	0x1018	; 0x1018 <__mulsf3>
    11a0:	ef 91       	pop	r30
    11a2:	ff 91       	pop	r31
    11a4:	0e 94 46 07 	call	0xe8c	; 0xe8c <__fp_powser>
    11a8:	2f 91       	pop	r18
    11aa:	3f 91       	pop	r19
    11ac:	4f 91       	pop	r20
    11ae:	5f 91       	pop	r21
    11b0:	0c 94 0c 08 	jmp	0x1018	; 0x1018 <__mulsf3>

000011b4 <__divmodhi4>:
    11b4:	97 fb       	bst	r25, 7
    11b6:	07 2e       	mov	r0, r23
    11b8:	16 f4       	brtc	.+4      	; 0x11be <__divmodhi4+0xa>
    11ba:	00 94       	com	r0
    11bc:	07 d0       	rcall	.+14     	; 0x11cc <__divmodhi4_neg1>
    11be:	77 fd       	sbrc	r23, 7
    11c0:	09 d0       	rcall	.+18     	; 0x11d4 <__divmodhi4_neg2>
    11c2:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__udivmodhi4>
    11c6:	07 fc       	sbrc	r0, 7
    11c8:	05 d0       	rcall	.+10     	; 0x11d4 <__divmodhi4_neg2>
    11ca:	3e f4       	brtc	.+14     	; 0x11da <__divmodhi4_exit>

000011cc <__divmodhi4_neg1>:
    11cc:	90 95       	com	r25
    11ce:	81 95       	neg	r24
    11d0:	9f 4f       	sbci	r25, 0xFF	; 255
    11d2:	08 95       	ret

000011d4 <__divmodhi4_neg2>:
    11d4:	70 95       	com	r23
    11d6:	61 95       	neg	r22
    11d8:	7f 4f       	sbci	r23, 0xFF	; 255

000011da <__divmodhi4_exit>:
    11da:	08 95       	ret

000011dc <__udivmodhi4>:
    11dc:	aa 1b       	sub	r26, r26
    11de:	bb 1b       	sub	r27, r27
    11e0:	51 e1       	ldi	r21, 0x11	; 17
    11e2:	07 c0       	rjmp	.+14     	; 0x11f2 <__udivmodhi4_ep>

000011e4 <__udivmodhi4_loop>:
    11e4:	aa 1f       	adc	r26, r26
    11e6:	bb 1f       	adc	r27, r27
    11e8:	a6 17       	cp	r26, r22
    11ea:	b7 07       	cpc	r27, r23
    11ec:	10 f0       	brcs	.+4      	; 0x11f2 <__udivmodhi4_ep>
    11ee:	a6 1b       	sub	r26, r22
    11f0:	b7 0b       	sbc	r27, r23

000011f2 <__udivmodhi4_ep>:
    11f2:	88 1f       	adc	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	5a 95       	dec	r21
    11f8:	a9 f7       	brne	.-22     	; 0x11e4 <__udivmodhi4_loop>
    11fa:	80 95       	com	r24
    11fc:	90 95       	com	r25
    11fe:	bc 01       	movw	r22, r24
    1200:	cd 01       	movw	r24, r26
    1202:	08 95       	ret

00001204 <_exit>:
    1204:	f8 94       	cli

00001206 <__stop_program>:
    1206:	ff cf       	rjmp	.-2      	; 0x1206 <__stop_program>
