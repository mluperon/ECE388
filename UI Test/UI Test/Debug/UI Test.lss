
UI Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  0000069a  0000072e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000069a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800148  00800148  00000776  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000776  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013b6  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac1  00000000  00000000  00001c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e7  00000000  00000000  000026df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  00002dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e8  00000000  00000000  00002fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a6a  00000000  00000000  000035b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00004022  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_4>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea e9       	ldi	r30, 0x9A	; 154
  c8:	f6 e0       	ldi	r31, 0x06	; 6
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a8 34       	cpi	r26, 0x48	; 72
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a8 e4       	ldi	r26, 0x48	; 72
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a6 35       	cpi	r26, 0x56	; 86
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
  ea:	0c 94 4b 03 	jmp	0x696	; 0x696 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <lcdCommand>:
		// to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
		
		intToStr((int)fpart, res + i + 1, afterpoint);
	}
}
  f2:	8b b9       	out	0x0b, r24	; 11
  f4:	70 98       	cbi	0x0e, 0	; 14
  f6:	71 98       	cbi	0x0e, 1	; 14
  f8:	72 9a       	sbi	0x0e, 2	; 14
  fa:	85 e0       	ldi	r24, 0x05	; 5
  fc:	8a 95       	dec	r24
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcdCommand+0xa>
 100:	00 00       	nop
 102:	72 98       	cbi	0x0e, 2	; 14
 104:	8f e8       	ldi	r24, 0x8F	; 143
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcdCommand+0x16>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <lcdCommand+0x1c>
 10e:	00 00       	nop
 110:	08 95       	ret

00000112 <lcdData>:
 112:	8b b9       	out	0x0b, r24	; 11
 114:	70 9a       	sbi	0x0e, 0	; 14
 116:	71 98       	cbi	0x0e, 1	; 14
 118:	72 9a       	sbi	0x0e, 2	; 14
 11a:	85 e0       	ldi	r24, 0x05	; 5
 11c:	8a 95       	dec	r24
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcdData+0xa>
 120:	00 00       	nop
 122:	72 98       	cbi	0x0e, 2	; 14
 124:	8f e8       	ldi	r24, 0x8F	; 143
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcdData+0x16>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcdData+0x1c>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <lcd_init>:
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	8a b9       	out	0x0a, r24	; 10
 136:	8d b9       	out	0x0d, r24	; 13
 138:	72 98       	cbi	0x0e, 2	; 14
 13a:	8f e3       	ldi	r24, 0x3F	; 63
 13c:	9f e1       	ldi	r25, 0x1F	; 31
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_init+0xc>
 142:	00 c0       	rjmp	.+0      	; 0x144 <lcd_init+0x12>
 144:	00 00       	nop
 146:	88 e3       	ldi	r24, 0x38	; 56
 148:	0e 94 79 00 	call	0xf2	; 0xf2 <lcdCommand>
 14c:	8e e0       	ldi	r24, 0x0E	; 14
 14e:	0e 94 79 00 	call	0xf2	; 0xf2 <lcdCommand>
 152:	8c e0       	ldi	r24, 0x0C	; 12
 154:	0e 94 79 00 	call	0xf2	; 0xf2 <lcdCommand>
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 79 00 	call	0xf2	; 0xf2 <lcdCommand>
 15e:	8f e3       	ldi	r24, 0x3F	; 63
 160:	9f e1       	ldi	r25, 0x1F	; 31
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_init+0x30>
 166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_init+0x36>
 168:	00 00       	nop
 16a:	86 e0       	ldi	r24, 0x06	; 6
 16c:	0e 94 79 00 	call	0xf2	; 0xf2 <lcdCommand>
 170:	08 95       	ret

00000172 <lcd_gotoxy>:
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	00 d0       	rcall	.+0      	; 0x178 <lcd_gotoxy+0x6>
 178:	00 d0       	rcall	.+0      	; 0x17a <lcd_gotoxy+0x8>
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	90 e8       	ldi	r25, 0x80	; 128
 180:	99 83       	std	Y+1, r25	; 0x01
 182:	90 ec       	ldi	r25, 0xC0	; 192
 184:	9a 83       	std	Y+2, r25	; 0x02
 186:	94 e9       	ldi	r25, 0x94	; 148
 188:	9b 83       	std	Y+3, r25	; 0x03
 18a:	94 ed       	ldi	r25, 0xD4	; 212
 18c:	9c 83       	std	Y+4, r25	; 0x04
 18e:	fe 01       	movw	r30, r28
 190:	e6 0f       	add	r30, r22
 192:	f1 1d       	adc	r31, r1
 194:	81 50       	subi	r24, 0x01	; 1
 196:	90 81       	ld	r25, Z
 198:	89 0f       	add	r24, r25
 19a:	0e 94 79 00 	call	0xf2	; 0xf2 <lcdCommand>
 19e:	8f e8       	ldi	r24, 0x8F	; 143
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_gotoxy+0x30>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_gotoxy+0x36>
 1a8:	00 00       	nop
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	0f 90       	pop	r0
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <lcd_print>:
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	fc 01       	movw	r30, r24
 1c0:	80 81       	ld	r24, Z
 1c2:	88 23       	and	r24, r24
 1c4:	59 f0       	breq	.+22     	; 0x1dc <lcd_print+0x24>
 1c6:	8f 01       	movw	r16, r30
 1c8:	c0 e0       	ldi	r28, 0x00	; 0
 1ca:	0e 94 89 00 	call	0x112	; 0x112 <lcdData>
 1ce:	cf 5f       	subi	r28, 0xFF	; 255
 1d0:	f8 01       	movw	r30, r16
 1d2:	ec 0f       	add	r30, r28
 1d4:	f1 1d       	adc	r31, r1
 1d6:	80 81       	ld	r24, Z
 1d8:	81 11       	cpse	r24, r1
 1da:	f7 cf       	rjmp	.-18     	; 0x1ca <lcd_print+0x12>
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	08 95       	ret

000001e4 <main>:
volatile int valueConfirm = 0;

int main(void)
{
	// arbitrary ports right now
	DDRC &= ~(_BV(2) | _BV(1) | _BV(0));
 1e4:	87 b1       	in	r24, 0x07	; 7
 1e6:	88 7f       	andi	r24, 0xF8	; 248
 1e8:	87 b9       	out	0x07, r24	; 7
	PCICR |= (1<<PCIE1); // pin change interrupt 1
 1ea:	e8 e6       	ldi	r30, 0x68	; 104
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	82 60       	ori	r24, 0x02	; 2
 1f2:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT8) | (1<<PCINT9) | (1<<PCINT10);
 1f4:	ec e6       	ldi	r30, 0x6C	; 108
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	87 60       	ori	r24, 0x07	; 7
 1fc:	80 83       	st	Z, r24
	
	char heightConv[16] = "";
	char angleConv[16] = "";
	char test[4] = "";

	lcd_init();
 1fe:	0e 94 99 00 	call	0x132	; 0x132 <lcd_init>
	heightConv[1]='0';
	heightConv[2]='.';
	heightConv[3]='0';
	
	// PRINT DEFAULT STATE
	lcd_gotoxy(1,1);
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
	lcd_print(HEIGHT_SELECT);
 20a:	84 e0       	ldi	r24, 0x04	; 4
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
	lcd_gotoxy(1,2);
 212:	62 e0       	ldi	r22, 0x02	; 2
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	0e 94 b9 00 	call	0x172	; 0x172 <lcd_gotoxy>
	lcd_print(DEFAULT_ANGLE);
 21a:	85 e1       	ldi	r24, 0x15	; 21
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
	
	sei();
 222:	78 94       	sei
 224:	ff cf       	rjmp	.-2      	; 0x224 <main+0x40>

00000226 <__vector_4>:
//	-Button press either:
//		- Confirms height / angle adjustment
//		- Selects angle / height and moves user to adjust height / angle

ISR(PCINT1_vect) 
{
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	2f 93       	push	r18
 232:	3f 93       	push	r19
 234:	4f 93       	push	r20
 236:	5f 93       	push	r21
 238:	6f 93       	push	r22
 23a:	7f 93       	push	r23
 23c:	8f 93       	push	r24
 23e:	9f 93       	push	r25
 240:	af 93       	push	r26
 242:	bf 93       	push	r27
 244:	ef 93       	push	r30
 246:	ff 93       	push	r31
	tmpCLK=PINC & (1<<2);
 248:	86 b1       	in	r24, 0x06	; 6
 24a:	84 70       	andi	r24, 0x04	; 4
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <tmpCLK+0x1>
 252:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <tmpCLK>
	tmpDT=PINC&(1<<1);
 256:	86 b1       	in	r24, 0x06	; 6
 258:	82 70       	andi	r24, 0x02	; 2
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <tmpDT+0x1>
 260:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <tmpDT>
	tmpSW=PINC&(1<<0);
 264:	86 b1       	in	r24, 0x06	; 6
 266:	28 2f       	mov	r18, r24
 268:	21 70       	andi	r18, 0x01	; 1
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	30 93 51 01 	sts	0x0151, r19	; 0x800151 <tmpSW+0x1>
 270:	20 93 50 01 	sts	0x0150, r18	; 0x800150 <tmpSW>
	if(tmpCLK == 0)
 274:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <tmpCLK>
 278:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <tmpCLK+0x1>
 27c:	89 2b       	or	r24, r25
 27e:	09 f0       	breq	.+2      	; 0x282 <__vector_4+0x5c>
 280:	d3 c0       	rjmp	.+422    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	{
		if (tmpDT == 0) // right turn	
 282:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tmpDT>
 286:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <tmpDT+0x1>
 28a:	89 2b       	or	r24, r25
 28c:	09 f0       	breq	.+2      	; 0x290 <__vector_4+0x6a>
 28e:	68 c0       	rjmp	.+208    	; 0x360 <__vector_4+0x13a>
		{
			switch(state)
 290:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <state>
 294:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <state+0x1>
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	91 05       	cpc	r25, r1
 29c:	89 f0       	breq	.+34     	; 0x2c0 <__vector_4+0x9a>
 29e:	83 30       	cpi	r24, 0x03	; 3
 2a0:	91 05       	cpc	r25, r1
 2a2:	b1 f1       	breq	.+108    	; 0x310 <__vector_4+0xea>
 2a4:	89 2b       	or	r24, r25
 2a6:	09 f0       	breq	.+2      	; 0x2aa <__vector_4+0x84>
 2a8:	f9 c0       	rjmp	.+498    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
			{
				case HEIGHT: // change to angle state
					lcd_print(ANGLE_SELECT);
 2aa:	84 e2       	ldi	r24, 0x24	; 36
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
					state = ANGLE;
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <state+0x1>
 2ba:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <state>
					break;
 2be:	ee c0       	rjmp	.+476    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
				case ANGLE: // do nothing OR change to height state?
					// do nothing as of rn fuck it
					break;
				case CHEIGHT: // increment height value (as long as < MAX (?))
					if (height < MAX_HEIGHT) // total guess right now
 2c0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 2c4:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 2c8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 2cc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 2d0:	20 e0       	ldi	r18, 0x00	; 0
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	48 ec       	ldi	r20, 0xC8	; 200
 2d6:	52 e4       	ldi	r21, 0x42	; 66
 2d8:	0e 94 cc 02 	call	0x598	; 0x598 <__cmpsf2>
 2dc:	88 23       	and	r24, r24
 2de:	0c f0       	brlt	.+2      	; 0x2e2 <__vector_4+0xbc>
 2e0:	dd c0       	rjmp	.+442    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
						height=height + 0.1; //increment height by tenth
 2e2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 2e6:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 2ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 2ee:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 2f2:	2d ec       	ldi	r18, 0xCD	; 205
 2f4:	3c ec       	ldi	r19, 0xCC	; 204
 2f6:	4c ec       	ldi	r20, 0xCC	; 204
 2f8:	5d e3       	ldi	r21, 0x3D	; 61
 2fa:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__addsf3>
 2fe:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 302:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 306:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 30a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 30e:	c6 c0       	rjmp	.+396    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
					break;	
				case CANGLE: // increment angle value (as long as <= MAX (90))
					if (angle < MAX_ANGLE)
 310:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <angle>
 314:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <angle+0x1>
 318:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <angle+0x2>
 31c:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <angle+0x3>
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	44 eb       	ldi	r20, 0xB4	; 180
 326:	52 e4       	ldi	r21, 0x42	; 66
 328:	0e 94 cc 02 	call	0x598	; 0x598 <__cmpsf2>
 32c:	88 23       	and	r24, r24
 32e:	0c f0       	brlt	.+2      	; 0x332 <__vector_4+0x10c>
 330:	b5 c0       	rjmp	.+362    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
						angle=angle + 0.1;
 332:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <angle>
 336:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <angle+0x1>
 33a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <angle+0x2>
 33e:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <angle+0x3>
 342:	2d ec       	ldi	r18, 0xCD	; 205
 344:	3c ec       	ldi	r19, 0xCC	; 204
 346:	4c ec       	ldi	r20, 0xCC	; 204
 348:	5d e3       	ldi	r21, 0x3D	; 61
 34a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__addsf3>
 34e:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <angle>
 352:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <angle+0x1>
 356:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <angle+0x2>
 35a:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <angle+0x3>
 35e:	9e c0       	rjmp	.+316    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
					break;
			}
		}
		else // left turn
		{
			switch(state)
 360:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <state>
 364:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <state+0x1>
 368:	82 30       	cpi	r24, 0x02	; 2
 36a:	91 05       	cpc	r25, r1
 36c:	79 f0       	breq	.+30     	; 0x38c <__vector_4+0x166>
 36e:	83 30       	cpi	r24, 0x03	; 3
 370:	91 05       	cpc	r25, r1
 372:	99 f1       	breq	.+102    	; 0x3da <__vector_4+0x1b4>
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	09 f0       	breq	.+2      	; 0x37a <__vector_4+0x154>
 378:	91 c0       	rjmp	.+290    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
			{
				case HEIGHT: // do nothing OR change to angle state?
					// again we aren't doing anything (rn) for this so fuck it
					break;
				case ANGLE: // change to height state
					lcd_print(HEIGHT_SELECT);
 37a:	84 e0       	ldi	r24, 0x04	; 4
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_print>
					state = HEIGHT;
 382:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <state+0x1>
 386:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <state>
					break;
 38a:	88 c0       	rjmp	.+272    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
				case CHEIGHT: // decrement height value (as long as >= MIN (0) )
					if (height > 0)
 38c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 390:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 394:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 398:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	a9 01       	movw	r20, r18
 3a2:	0e 94 46 03 	call	0x68c	; 0x68c <__gesf2>
 3a6:	18 16       	cp	r1, r24
 3a8:	0c f0       	brlt	.+2      	; 0x3ac <__vector_4+0x186>
 3aa:	78 c0       	rjmp	.+240    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
						height = height - 0.1;
 3ac:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 3b0:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 3b4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 3b8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 3bc:	2d ec       	ldi	r18, 0xCD	; 205
 3be:	3c ec       	ldi	r19, 0xCC	; 204
 3c0:	4c ec       	ldi	r20, 0xCC	; 204
 3c2:	5d e3       	ldi	r21, 0x3D	; 61
 3c4:	0e 94 5f 02 	call	0x4be	; 0x4be <__subsf3>
 3c8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 3cc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 3d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 3d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 3d8:	61 c0       	rjmp	.+194    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
					break;
				case CANGLE: // increment angle value (as long as >= MIN (0))
					if(angle > 0)
 3da:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <angle>
 3de:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <angle+0x1>
 3e2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <angle+0x2>
 3e6:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <angle+0x3>
 3ea:	20 e0       	ldi	r18, 0x00	; 0
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	a9 01       	movw	r20, r18
 3f0:	0e 94 46 03 	call	0x68c	; 0x68c <__gesf2>
 3f4:	18 16       	cp	r1, r24
 3f6:	0c f0       	brlt	.+2      	; 0x3fa <__vector_4+0x1d4>
 3f8:	51 c0       	rjmp	.+162    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
						angle = angle - 1;
 3fa:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <angle>
 3fe:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <angle+0x1>
 402:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <angle+0x2>
 406:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <angle+0x3>
 40a:	20 e0       	ldi	r18, 0x00	; 0
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	40 e8       	ldi	r20, 0x80	; 128
 410:	5f e3       	ldi	r21, 0x3F	; 63
 412:	0e 94 5f 02 	call	0x4be	; 0x4be <__subsf3>
 416:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <angle>
 41a:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <angle+0x1>
 41e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <angle+0x2>
 422:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <angle+0x3>
 426:	3a c0       	rjmp	.+116    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
					break;
			}
		}
	}
	else if(tmpSW == 0) // button press
 428:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <tmpSW>
 42c:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <tmpSW+0x1>
 430:	89 2b       	or	r24, r25
 432:	a1 f5       	brne	.+104    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
	{
		switch(state)
 434:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <state>
 438:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <state+0x1>
 43c:	81 30       	cpi	r24, 0x01	; 1
 43e:	91 05       	cpc	r25, r1
 440:	89 f0       	breq	.+34     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 442:	1c f4       	brge	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 444:	89 2b       	or	r24, r25
 446:	39 f0       	breq	.+14     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 448:	29 c0       	rjmp	.+82     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 44a:	82 30       	cpi	r24, 0x02	; 2
 44c:	91 05       	cpc	r25, r1
 44e:	89 f0       	breq	.+34     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 450:	03 97       	sbiw	r24, 0x03	; 3
 452:	d1 f0       	breq	.+52     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 454:	23 c0       	rjmp	.+70     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
		{
			case HEIGHT: // change to height change state
				state = CHEIGHT;
 456:	82 e0       	ldi	r24, 0x02	; 2
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <state+0x1>
 45e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <state>
				break;
 462:	1c c0       	rjmp	.+56     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
			case ANGLE: // change to angle change state
				state = CANGLE;
 464:	83 e0       	ldi	r24, 0x03	; 3
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <state+0x1>
 46c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <state>
				break;
 470:	15 c0       	rjmp	.+42     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
			case CHEIGHT: // confirm height change value
				valueConfirm = 1; // set flag
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__data_end+0x1>
 47a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__data_end>
				state = HEIGHT; // exit from change function
 47e:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <state+0x1>
 482:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <state>
				break;
 486:	0a c0       	rjmp	.+20     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
			case CANGLE: // confirm angle change value
				valueConfirm = 1; // set flag - might need to make unique flag
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__data_end+0x1>
 490:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__data_end>
				state = ANGLE;
 494:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <state+0x1>
 498:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <state>
				break;
		}
	}

}
 49c:	ff 91       	pop	r31
 49e:	ef 91       	pop	r30
 4a0:	bf 91       	pop	r27
 4a2:	af 91       	pop	r26
 4a4:	9f 91       	pop	r25
 4a6:	8f 91       	pop	r24
 4a8:	7f 91       	pop	r23
 4aa:	6f 91       	pop	r22
 4ac:	5f 91       	pop	r21
 4ae:	4f 91       	pop	r20
 4b0:	3f 91       	pop	r19
 4b2:	2f 91       	pop	r18
 4b4:	0f 90       	pop	r0
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	0f 90       	pop	r0
 4ba:	1f 90       	pop	r1
 4bc:	18 95       	reti

000004be <__subsf3>:
 4be:	50 58       	subi	r21, 0x80	; 128

000004c0 <__addsf3>:
 4c0:	bb 27       	eor	r27, r27
 4c2:	aa 27       	eor	r26, r26
 4c4:	0e 94 77 02 	call	0x4ee	; 0x4ee <__addsf3x>
 4c8:	0c 94 0c 03 	jmp	0x618	; 0x618 <__fp_round>
 4cc:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__fp_pscA>
 4d0:	38 f0       	brcs	.+14     	; 0x4e0 <__addsf3+0x20>
 4d2:	0e 94 05 03 	call	0x60a	; 0x60a <__fp_pscB>
 4d6:	20 f0       	brcs	.+8      	; 0x4e0 <__addsf3+0x20>
 4d8:	39 f4       	brne	.+14     	; 0x4e8 <__addsf3+0x28>
 4da:	9f 3f       	cpi	r25, 0xFF	; 255
 4dc:	19 f4       	brne	.+6      	; 0x4e4 <__addsf3+0x24>
 4de:	26 f4       	brtc	.+8      	; 0x4e8 <__addsf3+0x28>
 4e0:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_nan>
 4e4:	0e f4       	brtc	.+2      	; 0x4e8 <__addsf3+0x28>
 4e6:	e0 95       	com	r30
 4e8:	e7 fb       	bst	r30, 7
 4ea:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__fp_inf>

000004ee <__addsf3x>:
 4ee:	e9 2f       	mov	r30, r25
 4f0:	0e 94 1d 03 	call	0x63a	; 0x63a <__fp_split3>
 4f4:	58 f3       	brcs	.-42     	; 0x4cc <__addsf3+0xc>
 4f6:	ba 17       	cp	r27, r26
 4f8:	62 07       	cpc	r22, r18
 4fa:	73 07       	cpc	r23, r19
 4fc:	84 07       	cpc	r24, r20
 4fe:	95 07       	cpc	r25, r21
 500:	20 f0       	brcs	.+8      	; 0x50a <__addsf3x+0x1c>
 502:	79 f4       	brne	.+30     	; 0x522 <__addsf3x+0x34>
 504:	a6 f5       	brtc	.+104    	; 0x56e <__addsf3x+0x80>
 506:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__fp_zero>
 50a:	0e f4       	brtc	.+2      	; 0x50e <__addsf3x+0x20>
 50c:	e0 95       	com	r30
 50e:	0b 2e       	mov	r0, r27
 510:	ba 2f       	mov	r27, r26
 512:	a0 2d       	mov	r26, r0
 514:	0b 01       	movw	r0, r22
 516:	b9 01       	movw	r22, r18
 518:	90 01       	movw	r18, r0
 51a:	0c 01       	movw	r0, r24
 51c:	ca 01       	movw	r24, r20
 51e:	a0 01       	movw	r20, r0
 520:	11 24       	eor	r1, r1
 522:	ff 27       	eor	r31, r31
 524:	59 1b       	sub	r21, r25
 526:	99 f0       	breq	.+38     	; 0x54e <__addsf3x+0x60>
 528:	59 3f       	cpi	r21, 0xF9	; 249
 52a:	50 f4       	brcc	.+20     	; 0x540 <__addsf3x+0x52>
 52c:	50 3e       	cpi	r21, 0xE0	; 224
 52e:	68 f1       	brcs	.+90     	; 0x58a <__addsf3x+0x9c>
 530:	1a 16       	cp	r1, r26
 532:	f0 40       	sbci	r31, 0x00	; 0
 534:	a2 2f       	mov	r26, r18
 536:	23 2f       	mov	r18, r19
 538:	34 2f       	mov	r19, r20
 53a:	44 27       	eor	r20, r20
 53c:	58 5f       	subi	r21, 0xF8	; 248
 53e:	f3 cf       	rjmp	.-26     	; 0x526 <__addsf3x+0x38>
 540:	46 95       	lsr	r20
 542:	37 95       	ror	r19
 544:	27 95       	ror	r18
 546:	a7 95       	ror	r26
 548:	f0 40       	sbci	r31, 0x00	; 0
 54a:	53 95       	inc	r21
 54c:	c9 f7       	brne	.-14     	; 0x540 <__addsf3x+0x52>
 54e:	7e f4       	brtc	.+30     	; 0x56e <__addsf3x+0x80>
 550:	1f 16       	cp	r1, r31
 552:	ba 0b       	sbc	r27, r26
 554:	62 0b       	sbc	r22, r18
 556:	73 0b       	sbc	r23, r19
 558:	84 0b       	sbc	r24, r20
 55a:	ba f0       	brmi	.+46     	; 0x58a <__addsf3x+0x9c>
 55c:	91 50       	subi	r25, 0x01	; 1
 55e:	a1 f0       	breq	.+40     	; 0x588 <__addsf3x+0x9a>
 560:	ff 0f       	add	r31, r31
 562:	bb 1f       	adc	r27, r27
 564:	66 1f       	adc	r22, r22
 566:	77 1f       	adc	r23, r23
 568:	88 1f       	adc	r24, r24
 56a:	c2 f7       	brpl	.-16     	; 0x55c <__addsf3x+0x6e>
 56c:	0e c0       	rjmp	.+28     	; 0x58a <__addsf3x+0x9c>
 56e:	ba 0f       	add	r27, r26
 570:	62 1f       	adc	r22, r18
 572:	73 1f       	adc	r23, r19
 574:	84 1f       	adc	r24, r20
 576:	48 f4       	brcc	.+18     	; 0x58a <__addsf3x+0x9c>
 578:	87 95       	ror	r24
 57a:	77 95       	ror	r23
 57c:	67 95       	ror	r22
 57e:	b7 95       	ror	r27
 580:	f7 95       	ror	r31
 582:	9e 3f       	cpi	r25, 0xFE	; 254
 584:	08 f0       	brcs	.+2      	; 0x588 <__addsf3x+0x9a>
 586:	b0 cf       	rjmp	.-160    	; 0x4e8 <__addsf3+0x28>
 588:	93 95       	inc	r25
 58a:	88 0f       	add	r24, r24
 58c:	08 f0       	brcs	.+2      	; 0x590 <__addsf3x+0xa2>
 58e:	99 27       	eor	r25, r25
 590:	ee 0f       	add	r30, r30
 592:	97 95       	ror	r25
 594:	87 95       	ror	r24
 596:	08 95       	ret

00000598 <__cmpsf2>:
 598:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__fp_cmp>
 59c:	08 f4       	brcc	.+2      	; 0x5a0 <__cmpsf2+0x8>
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	08 95       	ret

000005a2 <__fp_cmp>:
 5a2:	99 0f       	add	r25, r25
 5a4:	00 08       	sbc	r0, r0
 5a6:	55 0f       	add	r21, r21
 5a8:	aa 0b       	sbc	r26, r26
 5aa:	e0 e8       	ldi	r30, 0x80	; 128
 5ac:	fe ef       	ldi	r31, 0xFE	; 254
 5ae:	16 16       	cp	r1, r22
 5b0:	17 06       	cpc	r1, r23
 5b2:	e8 07       	cpc	r30, r24
 5b4:	f9 07       	cpc	r31, r25
 5b6:	c0 f0       	brcs	.+48     	; 0x5e8 <__fp_cmp+0x46>
 5b8:	12 16       	cp	r1, r18
 5ba:	13 06       	cpc	r1, r19
 5bc:	e4 07       	cpc	r30, r20
 5be:	f5 07       	cpc	r31, r21
 5c0:	98 f0       	brcs	.+38     	; 0x5e8 <__fp_cmp+0x46>
 5c2:	62 1b       	sub	r22, r18
 5c4:	73 0b       	sbc	r23, r19
 5c6:	84 0b       	sbc	r24, r20
 5c8:	95 0b       	sbc	r25, r21
 5ca:	39 f4       	brne	.+14     	; 0x5da <__fp_cmp+0x38>
 5cc:	0a 26       	eor	r0, r26
 5ce:	61 f0       	breq	.+24     	; 0x5e8 <__fp_cmp+0x46>
 5d0:	23 2b       	or	r18, r19
 5d2:	24 2b       	or	r18, r20
 5d4:	25 2b       	or	r18, r21
 5d6:	21 f4       	brne	.+8      	; 0x5e0 <__fp_cmp+0x3e>
 5d8:	08 95       	ret
 5da:	0a 26       	eor	r0, r26
 5dc:	09 f4       	brne	.+2      	; 0x5e0 <__fp_cmp+0x3e>
 5de:	a1 40       	sbci	r26, 0x01	; 1
 5e0:	a6 95       	lsr	r26
 5e2:	8f ef       	ldi	r24, 0xFF	; 255
 5e4:	81 1d       	adc	r24, r1
 5e6:	81 1d       	adc	r24, r1
 5e8:	08 95       	ret

000005ea <__fp_inf>:
 5ea:	97 f9       	bld	r25, 7
 5ec:	9f 67       	ori	r25, 0x7F	; 127
 5ee:	80 e8       	ldi	r24, 0x80	; 128
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	08 95       	ret

000005f6 <__fp_nan>:
 5f6:	9f ef       	ldi	r25, 0xFF	; 255
 5f8:	80 ec       	ldi	r24, 0xC0	; 192
 5fa:	08 95       	ret

000005fc <__fp_pscA>:
 5fc:	00 24       	eor	r0, r0
 5fe:	0a 94       	dec	r0
 600:	16 16       	cp	r1, r22
 602:	17 06       	cpc	r1, r23
 604:	18 06       	cpc	r1, r24
 606:	09 06       	cpc	r0, r25
 608:	08 95       	ret

0000060a <__fp_pscB>:
 60a:	00 24       	eor	r0, r0
 60c:	0a 94       	dec	r0
 60e:	12 16       	cp	r1, r18
 610:	13 06       	cpc	r1, r19
 612:	14 06       	cpc	r1, r20
 614:	05 06       	cpc	r0, r21
 616:	08 95       	ret

00000618 <__fp_round>:
 618:	09 2e       	mov	r0, r25
 61a:	03 94       	inc	r0
 61c:	00 0c       	add	r0, r0
 61e:	11 f4       	brne	.+4      	; 0x624 <__fp_round+0xc>
 620:	88 23       	and	r24, r24
 622:	52 f0       	brmi	.+20     	; 0x638 <__fp_round+0x20>
 624:	bb 0f       	add	r27, r27
 626:	40 f4       	brcc	.+16     	; 0x638 <__fp_round+0x20>
 628:	bf 2b       	or	r27, r31
 62a:	11 f4       	brne	.+4      	; 0x630 <__fp_round+0x18>
 62c:	60 ff       	sbrs	r22, 0
 62e:	04 c0       	rjmp	.+8      	; 0x638 <__fp_round+0x20>
 630:	6f 5f       	subi	r22, 0xFF	; 255
 632:	7f 4f       	sbci	r23, 0xFF	; 255
 634:	8f 4f       	sbci	r24, 0xFF	; 255
 636:	9f 4f       	sbci	r25, 0xFF	; 255
 638:	08 95       	ret

0000063a <__fp_split3>:
 63a:	57 fd       	sbrc	r21, 7
 63c:	90 58       	subi	r25, 0x80	; 128
 63e:	44 0f       	add	r20, r20
 640:	55 1f       	adc	r21, r21
 642:	59 f0       	breq	.+22     	; 0x65a <__fp_splitA+0x10>
 644:	5f 3f       	cpi	r21, 0xFF	; 255
 646:	71 f0       	breq	.+28     	; 0x664 <__fp_splitA+0x1a>
 648:	47 95       	ror	r20

0000064a <__fp_splitA>:
 64a:	88 0f       	add	r24, r24
 64c:	97 fb       	bst	r25, 7
 64e:	99 1f       	adc	r25, r25
 650:	61 f0       	breq	.+24     	; 0x66a <__fp_splitA+0x20>
 652:	9f 3f       	cpi	r25, 0xFF	; 255
 654:	79 f0       	breq	.+30     	; 0x674 <__fp_splitA+0x2a>
 656:	87 95       	ror	r24
 658:	08 95       	ret
 65a:	12 16       	cp	r1, r18
 65c:	13 06       	cpc	r1, r19
 65e:	14 06       	cpc	r1, r20
 660:	55 1f       	adc	r21, r21
 662:	f2 cf       	rjmp	.-28     	; 0x648 <__fp_split3+0xe>
 664:	46 95       	lsr	r20
 666:	f1 df       	rcall	.-30     	; 0x64a <__fp_splitA>
 668:	08 c0       	rjmp	.+16     	; 0x67a <__fp_splitA+0x30>
 66a:	16 16       	cp	r1, r22
 66c:	17 06       	cpc	r1, r23
 66e:	18 06       	cpc	r1, r24
 670:	99 1f       	adc	r25, r25
 672:	f1 cf       	rjmp	.-30     	; 0x656 <__fp_splitA+0xc>
 674:	86 95       	lsr	r24
 676:	71 05       	cpc	r23, r1
 678:	61 05       	cpc	r22, r1
 67a:	08 94       	sec
 67c:	08 95       	ret

0000067e <__fp_zero>:
 67e:	e8 94       	clt

00000680 <__fp_szero>:
 680:	bb 27       	eor	r27, r27
 682:	66 27       	eor	r22, r22
 684:	77 27       	eor	r23, r23
 686:	cb 01       	movw	r24, r22
 688:	97 f9       	bld	r25, 7
 68a:	08 95       	ret

0000068c <__gesf2>:
 68c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__fp_cmp>
 690:	08 f4       	brcc	.+2      	; 0x694 <__gesf2+0x8>
 692:	8f ef       	ldi	r24, 0xFF	; 255
 694:	08 95       	ret

00000696 <_exit>:
 696:	f8 94       	cli

00000698 <__stop_program>:
 698:	ff cf       	rjmp	.-2      	; 0x698 <__stop_program>
