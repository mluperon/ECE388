
Main Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000be  00800100  000015b0  00001644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000066  008001be  008001be  00001702  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001702  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001734  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00001774  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b49  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b90  00000000  00000000  0000337d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aca  00000000  00000000  00003f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  000049d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000736  00000000  00000000  00004c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b5f  00000000  00000000  000053be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00005f1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__ctors_end>
       4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      10:	0c 94 c4 04 	jmp	0x988	; 0x988 <__vector_4>
      14:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      18:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      1c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      20:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      24:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      28:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      2c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      30:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      34:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      38:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      3c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      40:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      44:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      48:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      4c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      50:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      54:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <__vector_21>
      58:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      5c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      60:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      64:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      68:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      6c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      70:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      74:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      78:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      7c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      80:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      84:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      88:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      8c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__vector_35>
      90:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      94:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      98:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      9c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      ac:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      b0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      b4:	07 2c       	mov	r0, r7
      b6:	7a a5       	ldd	r23, Y+42	; 0x2a
      b8:	ba 6c       	ori	r27, 0xCA	; 202
      ba:	c5 90       	lpm	r12, Z+
      bc:	da 3b       	cpi	r29, 0xBA	; 186
      be:	93 65       	ori	r25, 0x53	; 83
      c0:	fc 8b       	std	Y+20, r31	; 0x14
      c2:	bc 53       	subi	r27, 0x3C	; 60
      c4:	f8 10       	cpse	r15, r8
      c6:	fd 3c       	cpi	r31, 0xCD	; 205
      c8:	56 92       	lac	Z, r5
      ca:	83 4d       	sbci	r24, 0xD3	; 211
      cc:	bd 87       	std	Y+13, r27	; 0x0d
      ce:	9d 3a       	cpi	r25, 0xAD	; 173
      d0:	b6 3d       	cpi	r27, 0xD6	; 214
      d2:	cb c9       	rjmp	.-3178   	; 0xfffff46a <__eeprom_end+0xff7ef46a>
      d4:	bf 5b       	subi	r27, 0xBF	; 191
      d6:	be 73       	andi	r27, 0x3E	; 62
      d8:	da 0f       	add	r29, r26
      da:	c9 3f       	cpi	r28, 0xF9	; 249
      dc:	05 a8       	ldd	r0, Z+53	; 0x35
      de:	4c cd       	rjmp	.-1384   	; 0xfffffb78 <__eeprom_end+0xff7efb78>
      e0:	b2 d4       	rcall	.+2404   	; 0xa46 <__vector_4+0xbe>
      e2:	4e b9       	out	0x0e, r20	; 14
      e4:	38 36       	cpi	r19, 0x68	; 104
      e6:	a9 02       	muls	r26, r25
      e8:	0c 50       	subi	r16, 0x0C	; 12
      ea:	b9 91       	ld	r27, Y+
      ec:	86 88       	ldd	r8, Z+22	; 0x16
      ee:	08 3c       	cpi	r16, 0xC8	; 200
      f0:	a6 aa       	std	Z+54, r10	; 0x36
      f2:	aa 2a       	or	r10, r26
      f4:	be 00       	.word	0x00be	; ????
      f6:	00 00       	nop
      f8:	80 3f       	cpi	r24, 0xF0	; 240

000000fa <__ctors_end>:
      fa:	11 24       	eor	r1, r1
      fc:	1f be       	out	0x3f, r1	; 63
      fe:	cf ef       	ldi	r28, 0xFF	; 255
     100:	d8 e0       	ldi	r29, 0x08	; 8
     102:	de bf       	out	0x3e, r29	; 62
     104:	cd bf       	out	0x3d, r28	; 61

00000106 <__do_copy_data>:
     106:	11 e0       	ldi	r17, 0x01	; 1
     108:	a0 e0       	ldi	r26, 0x00	; 0
     10a:	b1 e0       	ldi	r27, 0x01	; 1
     10c:	e0 eb       	ldi	r30, 0xB0	; 176
     10e:	f5 e1       	ldi	r31, 0x15	; 21
     110:	02 c0       	rjmp	.+4      	; 0x116 <__do_copy_data+0x10>
     112:	05 90       	lpm	r0, Z+
     114:	0d 92       	st	X+, r0
     116:	ae 3b       	cpi	r26, 0xBE	; 190
     118:	b1 07       	cpc	r27, r17
     11a:	d9 f7       	brne	.-10     	; 0x112 <__do_copy_data+0xc>

0000011c <__do_clear_bss>:
     11c:	22 e0       	ldi	r18, 0x02	; 2
     11e:	ae eb       	ldi	r26, 0xBE	; 190
     120:	b1 e0       	ldi	r27, 0x01	; 1
     122:	01 c0       	rjmp	.+2      	; 0x126 <.do_clear_bss_start>

00000124 <.do_clear_bss_loop>:
     124:	1d 92       	st	X+, r1

00000126 <.do_clear_bss_start>:
     126:	a4 32       	cpi	r26, 0x24	; 36
     128:	b2 07       	cpc	r27, r18
     12a:	e1 f7       	brne	.-8      	; 0x124 <.do_clear_bss_loop>
     12c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <main>
     130:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <_exit>

00000134 <__bad_interrupt>:
     134:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000138 <lcdCommand>:

	while(*StringPtr != 0x00){
		USART_send(*StringPtr);
	StringPtr++;}

}
     138:	8b b9       	out	0x0b, r24	; 11
     13a:	70 98       	cbi	0x0e, 0	; 14
     13c:	71 98       	cbi	0x0e, 1	; 14
     13e:	72 9a       	sbi	0x0e, 2	; 14
     140:	85 e0       	ldi	r24, 0x05	; 5
     142:	8a 95       	dec	r24
     144:	f1 f7       	brne	.-4      	; 0x142 <lcdCommand+0xa>
     146:	00 00       	nop
     148:	72 98       	cbi	0x0e, 2	; 14
     14a:	8f e8       	ldi	r24, 0x8F	; 143
     14c:	91 e0       	ldi	r25, 0x01	; 1
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <lcdCommand+0x16>
     152:	00 c0       	rjmp	.+0      	; 0x154 <lcdCommand+0x1c>
     154:	00 00       	nop
     156:	08 95       	ret

00000158 <lcdData>:
     158:	8b b9       	out	0x0b, r24	; 11
     15a:	70 9a       	sbi	0x0e, 0	; 14
     15c:	71 98       	cbi	0x0e, 1	; 14
     15e:	72 9a       	sbi	0x0e, 2	; 14
     160:	85 e0       	ldi	r24, 0x05	; 5
     162:	8a 95       	dec	r24
     164:	f1 f7       	brne	.-4      	; 0x162 <lcdData+0xa>
     166:	00 00       	nop
     168:	72 98       	cbi	0x0e, 2	; 14
     16a:	8f e8       	ldi	r24, 0x8F	; 143
     16c:	91 e0       	ldi	r25, 0x01	; 1
     16e:	01 97       	sbiw	r24, 0x01	; 1
     170:	f1 f7       	brne	.-4      	; 0x16e <lcdData+0x16>
     172:	00 c0       	rjmp	.+0      	; 0x174 <lcdData+0x1c>
     174:	00 00       	nop
     176:	08 95       	ret

00000178 <lcd_init>:
     178:	8f ef       	ldi	r24, 0xFF	; 255
     17a:	8a b9       	out	0x0a, r24	; 10
     17c:	8d b9       	out	0x0d, r24	; 13
     17e:	72 98       	cbi	0x0e, 2	; 14
     180:	8f e3       	ldi	r24, 0x3F	; 63
     182:	9f e1       	ldi	r25, 0x1F	; 31
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <lcd_init+0xc>
     188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_init+0x12>
     18a:	00 00       	nop
     18c:	88 e3       	ldi	r24, 0x38	; 56
     18e:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     192:	8c e0       	ldi	r24, 0x0C	; 12
     194:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     19e:	8f e3       	ldi	r24, 0x3F	; 63
     1a0:	9f e1       	ldi	r25, 0x1F	; 31
     1a2:	01 97       	sbiw	r24, 0x01	; 1
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x2a>
     1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x30>
     1a8:	00 00       	nop
     1aa:	86 e0       	ldi	r24, 0x06	; 6
     1ac:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     1b0:	08 95       	ret

000001b2 <lcd_gotoxy>:
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <lcd_gotoxy+0x6>
     1b8:	00 d0       	rcall	.+0      	; 0x1ba <lcd_gotoxy+0x8>
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
     1be:	90 e8       	ldi	r25, 0x80	; 128
     1c0:	99 83       	std	Y+1, r25	; 0x01
     1c2:	90 ec       	ldi	r25, 0xC0	; 192
     1c4:	9a 83       	std	Y+2, r25	; 0x02
     1c6:	94 e9       	ldi	r25, 0x94	; 148
     1c8:	9b 83       	std	Y+3, r25	; 0x03
     1ca:	94 ed       	ldi	r25, 0xD4	; 212
     1cc:	9c 83       	std	Y+4, r25	; 0x04
     1ce:	fe 01       	movw	r30, r28
     1d0:	e6 0f       	add	r30, r22
     1d2:	f1 1d       	adc	r31, r1
     1d4:	81 50       	subi	r24, 0x01	; 1
     1d6:	90 81       	ld	r25, Z
     1d8:	89 0f       	add	r24, r25
     1da:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     1de:	8f e8       	ldi	r24, 0x8F	; 143
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	01 97       	sbiw	r24, 0x01	; 1
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_gotoxy+0x30>
     1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <lcd_gotoxy+0x36>
     1e8:	00 00       	nop
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <lcd_print>:
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	cf 93       	push	r28
     1fe:	fc 01       	movw	r30, r24
     200:	80 81       	ld	r24, Z
     202:	88 23       	and	r24, r24
     204:	59 f0       	breq	.+22     	; 0x21c <lcd_print+0x24>
     206:	8f 01       	movw	r16, r30
     208:	c0 e0       	ldi	r28, 0x00	; 0
     20a:	0e 94 ac 00 	call	0x158	; 0x158 <lcdData>
     20e:	cf 5f       	subi	r28, 0xFF	; 255
     210:	f8 01       	movw	r30, r16
     212:	ec 0f       	add	r30, r28
     214:	f1 1d       	adc	r31, r1
     216:	80 81       	ld	r24, Z
     218:	81 11       	cpse	r24, r1
     21a:	f7 cf       	rjmp	.-18     	; 0x20a <lcd_print+0x12>
     21c:	cf 91       	pop	r28
     21e:	1f 91       	pop	r17
     220:	0f 91       	pop	r16
     222:	08 95       	ret

00000224 <ftoa>:
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	cd b7       	in	r28, 0x3d	; 61
     22a:	de b7       	in	r29, 0x3e	; 62
     22c:	2b 97       	sbiw	r28, 0x0b	; 11
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	f8 94       	cli
     232:	de bf       	out	0x3e, r29	; 62
     234:	0f be       	out	0x3f, r0	; 63
     236:	cd bf       	out	0x3d, r28	; 61
     238:	9b 01       	movw	r18, r22
     23a:	4b e0       	ldi	r20, 0x0B	; 11
     23c:	ea e0       	ldi	r30, 0x0A	; 10
     23e:	f1 e0       	ldi	r31, 0x01	; 1
     240:	de 01       	movw	r26, r28
     242:	11 96       	adiw	r26, 0x01	; 1
     244:	01 90       	ld	r0, Z+
     246:	0d 92       	st	X+, r0
     248:	4a 95       	dec	r20
     24a:	e1 f7       	brne	.-8      	; 0x244 <ftoa+0x20>
     24c:	6a e0       	ldi	r22, 0x0A	; 10
     24e:	70 e0       	ldi	r23, 0x00	; 0
     250:	0e 94 ae 0a 	call	0x155c	; 0x155c <__divmodhi4>
     254:	e1 e0       	ldi	r30, 0x01	; 1
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	ec 0f       	add	r30, r28
     25a:	fd 1f       	adc	r31, r29
     25c:	e6 0f       	add	r30, r22
     25e:	f7 1f       	adc	r31, r23
     260:	40 81       	ld	r20, Z
     262:	f9 01       	movw	r30, r18
     264:	40 83       	st	Z, r20
     266:	e1 e0       	ldi	r30, 0x01	; 1
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	ec 0f       	add	r30, r28
     26c:	fd 1f       	adc	r31, r29
     26e:	e8 0f       	add	r30, r24
     270:	f9 1f       	adc	r31, r25
     272:	80 81       	ld	r24, Z
     274:	f9 01       	movw	r30, r18
     276:	81 83       	std	Z+1, r24	; 0x01
     278:	12 82       	std	Z+2, r1	; 0x02
     27a:	2b 96       	adiw	r28, 0x0b	; 11
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	f8 94       	cli
     280:	de bf       	out	0x3e, r29	; 62
     282:	0f be       	out	0x3f, r0	; 63
     284:	cd bf       	out	0x3d, r28	; 61
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	08 95       	ret

0000028c <itos>:
     28c:	ef 92       	push	r14
     28e:	ff 92       	push	r15
     290:	0f 93       	push	r16
     292:	1f 93       	push	r17
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
     29c:	2b 97       	sbiw	r28, 0x0b	; 11
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	f8 94       	cli
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	cd bf       	out	0x3d, r28	; 61
     2a8:	8c 01       	movw	r16, r24
     2aa:	9b 01       	movw	r18, r22
     2ac:	8b e0       	ldi	r24, 0x0B	; 11
     2ae:	ea e0       	ldi	r30, 0x0A	; 10
     2b0:	f1 e0       	ldi	r31, 0x01	; 1
     2b2:	de 01       	movw	r26, r28
     2b4:	11 96       	adiw	r26, 0x01	; 1
     2b6:	01 90       	ld	r0, Z+
     2b8:	0d 92       	st	X+, r0
     2ba:	8a 95       	dec	r24
     2bc:	e1 f7       	brne	.-8      	; 0x2b6 <itos+0x2a>
     2be:	c8 01       	movw	r24, r16
     2c0:	60 e1       	ldi	r22, 0x10	; 16
     2c2:	77 e2       	ldi	r23, 0x27	; 39
     2c4:	0e 94 ae 0a 	call	0x155c	; 0x155c <__divmodhi4>
     2c8:	e1 e0       	ldi	r30, 0x01	; 1
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	ec 0f       	add	r30, r28
     2ce:	fd 1f       	adc	r31, r29
     2d0:	e6 0f       	add	r30, r22
     2d2:	f7 1f       	adc	r31, r23
     2d4:	40 81       	ld	r20, Z
     2d6:	f9 01       	movw	r30, r18
     2d8:	40 83       	st	Z, r20
     2da:	0f 2e       	mov	r0, r31
     2dc:	f8 ee       	ldi	r31, 0xE8	; 232
     2de:	ef 2e       	mov	r14, r31
     2e0:	f3 e0       	ldi	r31, 0x03	; 3
     2e2:	ff 2e       	mov	r15, r31
     2e4:	f0 2d       	mov	r31, r0
     2e6:	b7 01       	movw	r22, r14
     2e8:	0e 94 ae 0a 	call	0x155c	; 0x155c <__divmodhi4>
     2ec:	e1 e0       	ldi	r30, 0x01	; 1
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	ec 0f       	add	r30, r28
     2f2:	fd 1f       	adc	r31, r29
     2f4:	e6 0f       	add	r30, r22
     2f6:	f7 1f       	adc	r31, r23
     2f8:	80 81       	ld	r24, Z
     2fa:	f9 01       	movw	r30, r18
     2fc:	81 83       	std	Z+1, r24	; 0x01
     2fe:	c8 01       	movw	r24, r16
     300:	b7 01       	movw	r22, r14
     302:	0e 94 ae 0a 	call	0x155c	; 0x155c <__divmodhi4>
     306:	0f 2e       	mov	r0, r31
     308:	f4 e6       	ldi	r31, 0x64	; 100
     30a:	ef 2e       	mov	r14, r31
     30c:	f1 2c       	mov	r15, r1
     30e:	f0 2d       	mov	r31, r0
     310:	b7 01       	movw	r22, r14
     312:	0e 94 ae 0a 	call	0x155c	; 0x155c <__divmodhi4>
     316:	e1 e0       	ldi	r30, 0x01	; 1
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	ec 0f       	add	r30, r28
     31c:	fd 1f       	adc	r31, r29
     31e:	e6 0f       	add	r30, r22
     320:	f7 1f       	adc	r31, r23
     322:	80 81       	ld	r24, Z
     324:	f9 01       	movw	r30, r18
     326:	82 83       	std	Z+2, r24	; 0x02
     328:	c8 01       	movw	r24, r16
     32a:	b7 01       	movw	r22, r14
     32c:	0e 94 ae 0a 	call	0x155c	; 0x155c <__divmodhi4>
     330:	0f 2e       	mov	r0, r31
     332:	fa e0       	ldi	r31, 0x0A	; 10
     334:	ef 2e       	mov	r14, r31
     336:	f1 2c       	mov	r15, r1
     338:	f0 2d       	mov	r31, r0
     33a:	b7 01       	movw	r22, r14
     33c:	0e 94 ae 0a 	call	0x155c	; 0x155c <__divmodhi4>
     340:	e1 e0       	ldi	r30, 0x01	; 1
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	ec 0f       	add	r30, r28
     346:	fd 1f       	adc	r31, r29
     348:	e6 0f       	add	r30, r22
     34a:	f7 1f       	adc	r31, r23
     34c:	80 81       	ld	r24, Z
     34e:	f9 01       	movw	r30, r18
     350:	83 83       	std	Z+3, r24	; 0x03
     352:	c8 01       	movw	r24, r16
     354:	b7 01       	movw	r22, r14
     356:	0e 94 ae 0a 	call	0x155c	; 0x155c <__divmodhi4>
     35a:	e1 e0       	ldi	r30, 0x01	; 1
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	ec 0f       	add	r30, r28
     360:	fd 1f       	adc	r31, r29
     362:	e8 0f       	add	r30, r24
     364:	f9 1f       	adc	r31, r25
     366:	80 81       	ld	r24, Z
     368:	f9 01       	movw	r30, r18
     36a:	84 83       	std	Z+4, r24	; 0x04
     36c:	15 82       	std	Z+5, r1	; 0x05
     36e:	2b 96       	adiw	r28, 0x0b	; 11
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	de bf       	out	0x3e, r29	; 62
     376:	0f be       	out	0x3f, r0	; 63
     378:	cd bf       	out	0x3d, r28	; 61
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	08 95       	ret

00000388 <__vector_35>:



// Timer used to track seconds for startup routine of speed controller
ISR (TIMER3_OVF_vect)
{
     388:	1f 92       	push	r1
     38a:	0f 92       	push	r0
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	0f 92       	push	r0
     390:	11 24       	eor	r1, r1
     392:	8f 93       	push	r24
     394:	9f 93       	push	r25
	TCNT3 = -15625; // reset the 1sec timer value 
     396:	87 ef       	ldi	r24, 0xF7	; 247
     398:	92 ec       	ldi	r25, 0xC2	; 194
     39a:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
     39e:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
	overflowCount++;
     3a2:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <__data_end>
     3a6:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <__data_end+0x1>
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <__data_end+0x1>
     3b0:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <__data_end>
	if (overflowCount == 5) // wait  seconds
     3b4:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <__data_end>
     3b8:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <__data_end+0x1>
     3bc:	05 97       	sbiw	r24, 0x05	; 5
     3be:	91 f4       	brne	.+36     	; 0x3e4 <__vector_35+0x5c>
	{
		OCR1A=38000-1;	// adjust pulse width of waveform being generated from 2ms to 1ms
     3c0:	8f e6       	ldi	r24, 0x6F	; 111
     3c2:	94 e9       	ldi	r25, 0x94	; 148
     3c4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     3c8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
		TCNT3 = 0; // set counter to 0
     3cc:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
     3d0:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
		TIMSK3 = (0 << TOIE3); // disable timer
     3d4:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
		setupFlag = 1;
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <setupFlag+0x1>
     3e0:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <setupFlag>
	}
}
     3e4:	9f 91       	pop	r25
     3e6:	8f 91       	pop	r24
     3e8:	0f 90       	pop	r0
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	0f 90       	pop	r0
     3ee:	1f 90       	pop	r1
     3f0:	18 95       	reti

000003f2 <__vector_21>:

ISR(ADC_vect)
{
     3f2:	1f 92       	push	r1
     3f4:	0f 92       	push	r0
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	0f 92       	push	r0
     3fa:	11 24       	eor	r1, r1
     3fc:	8f 93       	push	r24
     3fe:	9f 93       	push	r25
     400:	ef 93       	push	r30
     402:	ff 93       	push	r31
	potVal = ADC;
     404:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     408:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     40c:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <potVal+0x1>
     410:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <potVal>
	ADCSRA |= (1<<ADSC);
     414:	ea e7       	ldi	r30, 0x7A	; 122
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	80 81       	ld	r24, Z
     41a:	80 64       	ori	r24, 0x40	; 64
     41c:	80 83       	st	Z, r24
}
     41e:	ff 91       	pop	r31
     420:	ef 91       	pop	r30
     422:	9f 91       	pop	r25
     424:	8f 91       	pop	r24
     426:	0f 90       	pop	r0
     428:	0f be       	out	0x3f, r0	; 63
     42a:	0f 90       	pop	r0
     42c:	1f 90       	pop	r1
     42e:	18 95       	reti

00000430 <peripheralSetup>:

/************************************************* STARTUP ROUTINE **********************************************************************************/

void peripheralSetup()
{
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
	
	DDRC &= ~(1<<3);
     434:	3b 98       	cbi	0x07, 3	; 7
	PORTC |= (1 << 3);
     436:	43 9a       	sbi	0x08, 3	; 8
		
	ADMUX = (0b01<<REFS0|(0<<ADLAR)|(0b0011<<MUX0));
     438:	83 e4       	ldi	r24, 0x43	; 67
     43a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = (1<<ADEN)|(0<<ADSC)|(0<<ADATE)|(0<<ADIF)|(1<<ADIE)|(0b111<<ADPS0);
     43e:	8f e8       	ldi	r24, 0x8F	; 143
     440:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		
	ADCSRB = 0b000<<ADTS0;
     444:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
	
	PORTE &= ~(1<<3); // Ensure 12V is OFF
     448:	73 98       	cbi	0x0e, 3	; 14
	DDRE &= ~(1<<3);  // Ensure 12V is OFF
     44a:	6b 98       	cbi	0x0d, 3	; 13
	
	//********************************************** PIN CHANGE INTERRUPT SETUP **********************************************//
	DDRC &= ~(_BV(2) | _BV(1) | _BV(4)); // sets PORTC 1, 2, and 4 to input (input from rotary encoder)
     44c:	87 b1       	in	r24, 0x07	; 7
     44e:	89 7e       	andi	r24, 0xE9	; 233
     450:	87 b9       	out	0x07, r24	; 7
	// 4 = SW signal (button press)
	
	
	//********************************************** PWM SETUP **********************************************//
	// Set up PWM on PortB(1)
	DDRB |= (1<<1); // set PINB 1 to output
     452:	21 9a       	sbi	0x04, 1	; 4
	PORTB = ~(1<<1); // Ensure PINB 1 is not outputting voltage
     454:	8d ef       	ldi	r24, 0xFD	; 253
     456:	85 b9       	out	0x05, r24	; 5
	TCCR1A= (0b11 << COM1A0) | ( 0b00 << COM1B0) | (0b10 << WGM10); // set up PWM with pre-scalar
     458:	82 ec       	ldi	r24, 0xC2	; 194
     45a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B= (0b11 << WGM12) | (0b010<< CS10);
     45e:	8a e1       	ldi	r24, 0x1A	; 26
     460:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	ICR1= 40000-1; // (20MS /8 PRESCALAR)
     464:	8f e3       	ldi	r24, 0x3F	; 63
     466:	9c e9       	ldi	r25, 0x9C	; 156
     468:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
     46c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	OCR1A=36000-1; // 1000->4000 0.5ms to 2ms *** adjust ***
     470:	8f e9       	ldi	r24, 0x9F	; 159
     472:	9c e8       	ldi	r25, 0x8C	; 140
     474:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     478:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	
	// Set up 4 second timer for startup
	TCCR3A = 0; //(0b00 << COM3A0) | (0b00 << COM3B0)
     47c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
	TCCR3B = (0 << ICNC3) | (0 << ICES3) | (0b00 << WGM32) | (0b101 << CS30);
     480:	85 e0       	ldi	r24, 0x05	; 5
     482:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__DATA_REGION_ORIGIN__+0x31>
	TIMSK3 = (0 << TOIE3); // Ensure timer 3 is disabled
     486:	c1 e7       	ldi	r28, 0x71	; 113
     488:	d0 e0       	ldi	r29, 0x00	; 0
     48a:	18 82       	st	Y, r1
	TCNT3 = -15625; // One second timer value
     48c:	87 ef       	ldi	r24, 0xF7	; 247
     48e:	92 ec       	ldi	r25, 0xC2	; 194
     490:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
     494:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
	
	sei();
     498:	78 94       	sei
	// Set up LCD and print starting message state
	lcd_init(); // initialize the LCD according to Dr. Viall's 263 code
     49a:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_init>
	lcd_gotoxy(1,1); // go to row 1 column 1 of LCD
     49e:	61 e0       	ldi	r22, 0x01	; 1
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("Starting system"); // Print ->   [HEIGHT] ANGLE
     4a6:	85 e1       	ldi	r24, 0x15	; 21
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(1,2); // go to row 2 column 2 of LCD
     4ae:	62 e0       	ldi	r22, 0x02	; 2
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("Please wait..."); // Print -> 00.0 00.0
     4b6:	85 e2       	ldi	r24, 0x25	; 37
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	
	
	 // enable global interrupts
	
	// ***** SPEED CONTROLLER STARTUP ***** //
	TIMSK3 = (1 << TOIE3); // Enable PWM timer for startup
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	88 83       	st	Y, r24
	//_delay_ms(1);
	PORTE |= (1<<BASE); // TURN ON 12V SUPPLY
     4c2:	73 9a       	sbi	0x0e, 3	; 14
	DDRE |= (1<<BASE);   // TURN ON 12V SUPPLY
     4c4:	6b 9a       	sbi	0x0d, 3	; 13
	//_delay_ms(4000);
	//OCR1A=38000-1;	// adjust pulse width of waveform being generated from 2ms to 1ms
	//_delay_ms(3000);
	while (setupFlag != 1)
     4c6:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <setupFlag>
     4ca:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <setupFlag+0x1>
     4ce:	01 97       	sbiw	r24, 0x01	; 1
     4d0:	d1 f7       	brne	.-12     	; 0x4c6 <peripheralSetup+0x96>
	{
		//wait until setup is completed
	}
}
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	08 95       	ret

000004d8 <main>:
char angleConv[16] = ""; // global character array for storing angle to be output to LCD
char potConv[16] = "";
volatile int overflowCount = 0; // global variable used for tracking how many times the timer overflows (each overflow is equivalent to one second)

int main(void)
{
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	00 d0       	rcall	.+0      	; 0x4de <main+0x6>
     4de:	00 d0       	rcall	.+0      	; 0x4e0 <main+0x8>
     4e0:	00 d0       	rcall	.+0      	; 0x4e2 <main+0xa>
     4e2:	cd b7       	in	r28, 0x3d	; 61
     4e4:	de b7       	in	r29, 0x3e	; 62
	//USART_init();
	// These variables are Char arrays as the LCD cannot output int/float values, it must be sent as a string
	angleConv[0]='0'; // v Set up height and angle to start at 00.0 value
     4e6:	e0 ed       	ldi	r30, 0xD0	; 208
     4e8:	f1 e0       	ldi	r31, 0x01	; 1
     4ea:	80 e3       	ldi	r24, 0x30	; 48
     4ec:	80 83       	st	Z, r24
	angleConv[1]='0';
     4ee:	81 83       	std	Z+1, r24	; 0x01
	angleConv[2]='.';
     4f0:	9e e2       	ldi	r25, 0x2E	; 46
     4f2:	92 83       	std	Z+2, r25	; 0x02
	angleConv[3]='0';
     4f4:	83 83       	std	Z+3, r24	; 0x03
	heightConv[0]='0';
     4f6:	e0 ee       	ldi	r30, 0xE0	; 224
     4f8:	f1 e0       	ldi	r31, 0x01	; 1
     4fa:	80 83       	st	Z, r24
	heightConv[1]='0';
     4fc:	81 83       	std	Z+1, r24	; 0x01
	heightConv[2]='.';
     4fe:	92 83       	std	Z+2, r25	; 0x02
	heightConv[3]='0';// ^
     500:	83 83       	std	Z+3, r24	; 0x03
	
	peripheralSetup();
     502:	0e 94 18 02 	call	0x430	; 0x430 <peripheralSetup>
	ADCSRA |= (1<<ADSC);
     506:	ea e7       	ldi	r30, 0x7A	; 122
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	80 81       	ld	r24, Z
     50c:	80 64       	ori	r24, 0x40	; 64
     50e:	80 83       	st	Z, r24
	//SETUP COMPLETE
	lcd_gotoxy(1,1); // go to row 1 column 1 of LCD
     510:	61 e0       	ldi	r22, 0x01	; 1
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("System start    "); // Print ->   [HEIGHT] ANGLE
     518:	84 e3       	ldi	r24, 0x34	; 52
     51a:	91 e0       	ldi	r25, 0x01	; 1
     51c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(1,2); // go to row 2 column 2 of LCD
     520:	62 e0       	ldi	r22, 0x02	; 2
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("completed!      "); // Print -> 00.0 00.0
     528:	85 e4       	ldi	r24, 0x45	; 69
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     530:	2f ef       	ldi	r18, 0xFF	; 255
     532:	33 ed       	ldi	r19, 0xD3	; 211
     534:	40 e3       	ldi	r20, 0x30	; 48
     536:	21 50       	subi	r18, 0x01	; 1
     538:	30 40       	sbci	r19, 0x00	; 0
     53a:	40 40       	sbci	r20, 0x00	; 0
     53c:	e1 f7       	brne	.-8      	; 0x536 <main+0x5e>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <main+0x68>
     540:	00 00       	nop
	_delay_ms(1000);
	lcd_gotoxy(1,1);
     542:	61 e0       	ldi	r22, 0x01	; 1
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("Enabling UI...  ");
     54a:	86 e5       	ldi	r24, 0x56	; 86
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(1,2);
     552:	62 e0       	ldi	r22, 0x02	; 2
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("Enjoy! :)       ");
     55a:	87 e6       	ldi	r24, 0x67	; 103
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
     562:	5f ef       	ldi	r21, 0xFF	; 255
     564:	87 ea       	ldi	r24, 0xA7	; 167
     566:	91 e6       	ldi	r25, 0x61	; 97
     568:	51 50       	subi	r21, 0x01	; 1
     56a:	80 40       	sbci	r24, 0x00	; 0
     56c:	90 40       	sbci	r25, 0x00	; 0
     56e:	e1 f7       	brne	.-8      	; 0x568 <main+0x90>
     570:	00 c0       	rjmp	.+0      	; 0x572 <main+0x9a>
     572:	00 00       	nop
	_delay_ms(2000);
	
	
	// ***** Enable User Control ***** //		
	PCICR |= (1<<PCIE1); // Enable pin change interrupt on PORTC
     574:	e8 e6       	ldi	r30, 0x68	; 104
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	80 81       	ld	r24, Z
     57a:	82 60       	ori	r24, 0x02	; 2
     57c:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT12) | (1<<PCINT9) | (1<<PCINT10); // Enable Pins 1,2, and 4 to trigger this interrupt
     57e:	ec e6       	ldi	r30, 0x6C	; 108
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	80 81       	ld	r24, Z
     584:	86 61       	ori	r24, 0x16	; 22
     586:	80 83       	st	Z, r24
	
	lcd_gotoxy(1,1); // go to row 1 column 1 of LCD
     588:	61 e0       	ldi	r22, 0x01	; 1
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(HEIGHT_SELECT); // Print ->   [HEIGHT] ANGLE
     590:	88 e7       	ldi	r24, 0x78	; 120
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(1,2); // go to row 2 column 2 of LCD
     598:	62 e0       	ldi	r22, 0x02	; 2
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(DEFAULT_ANGLE); // Print -> 00.0 00.0
     5a0:	89 e8       	ldi	r24, 0x89	; 137
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>

	lcd_gotoxy(1,2);
     5a8:	62 e0       	ldi	r22, 0x02	; 2
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	// ***** MAIN LOOP ***** //
	//USART_init();
	int desiredPosition = 212;
	int currentPosition = potVal;
     5b0:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <potVal>
     5b4:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <potVal+0x1>
	lcd_print(DEFAULT_ANGLE); // Print -> 00.0 00.0

	lcd_gotoxy(1,2);
	// ***** MAIN LOOP ***** //
	//USART_init();
	int desiredPosition = 212;
     5b8:	0f 2e       	mov	r0, r31
     5ba:	f4 ed       	ldi	r31, 0xD4	; 212
     5bc:	2f 2e       	mov	r2, r31
     5be:	31 2c       	mov	r3, r1
     5c0:	f0 2d       	mov	r31, r0
		lcd_gotoxy (1,7);
		lcd_print(potConv);
		
		// Set fan speed
		pwmChange =  -1 * (output); // Liam changed -------------------------------------------------------------------------------
		if((OCR1A + pwmChange) <= 38000 && (OCR1A + pwmChange) >= 36000)
     5c2:	08 e8       	ldi	r16, 0x88	; 136
     5c4:	10 e0       	ldi	r17, 0x00	; 0
		// 3)Adjust speed based on distance
		// 4)loop above
		// rough eq: potVal = 14 + (angle * 3.96);
		
		// need timer = ?
		currentPosition = potVal; // read current potentiometer value from ADC port
     5c6:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <potVal>
     5ca:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <potVal+0x1>
     5ce:	fa 83       	std	Y+2, r31	; 0x02
     5d0:	e9 83       	std	Y+1, r30	; 0x01
		if(valueConfirm == 1)
     5d2:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <valueConfirm>
     5d6:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <valueConfirm+0x1>
     5da:	01 97       	sbiw	r24, 0x01	; 1
     5dc:	e9 f4       	brne	.+58     	; 0x618 <main+0x140>
		{
			desiredPosition = (angle *3.96) + 14;
     5de:	60 91 fe 01 	lds	r22, 0x01FE	; 0x8001fe <angle>
     5e2:	70 91 ff 01 	lds	r23, 0x01FF	; 0x8001ff <angle+0x1>
     5e6:	07 2e       	mov	r0, r23
     5e8:	00 0c       	add	r0, r0
     5ea:	88 0b       	sbc	r24, r24
     5ec:	99 0b       	sbc	r25, r25
     5ee:	0e 94 76 08 	call	0x10ec	; 0x10ec <__floatsisf>
     5f2:	24 ea       	ldi	r18, 0xA4	; 164
     5f4:	30 e7       	ldi	r19, 0x70	; 112
     5f6:	4d e7       	ldi	r20, 0x7D	; 125
     5f8:	50 e4       	ldi	r21, 0x40	; 64
     5fa:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__mulsf3>
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	40 e6       	ldi	r20, 0x60	; 96
     604:	51 e4       	ldi	r21, 0x41	; 65
     606:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__addsf3>
     60a:	0e 94 3e 08 	call	0x107c	; 0x107c <__fixsfsi>
     60e:	1b 01       	movw	r2, r22
			// desiredPosition = 370 - ((angle *3.96) + 14);
			valueConfirm = 0; // reset flag
     610:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <valueConfirm+0x1>
     614:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <valueConfirm>
		
// 		if ( angle == 0)
// 			currentPosition = 0; // calculate desired position
// 		else
// 			currentPosition = 14 + (angle * 3.96); // calculate desired position
		pidError = desiredPosition - currentPosition;
     618:	91 01       	movw	r18, r2
     61a:	49 81       	ldd	r20, Y+1	; 0x01
     61c:	5a 81       	ldd	r21, Y+2	; 0x02
     61e:	24 1b       	sub	r18, r20
     620:	35 0b       	sbc	r19, r21
     622:	3e 83       	std	Y+6, r19	; 0x06
     624:	2d 83       	std	Y+5, r18	; 0x05
		integral = integral + pidError;
     626:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <integral>
     62a:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <integral+0x1>
     62e:	82 0f       	add	r24, r18
     630:	93 1f       	adc	r25, r19
     632:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <integral+0x1>
     636:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <integral>
		derivative = pidError - previousPidError;
     63a:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <previousPidError>
     63e:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <previousPidError+0x1>
     642:	28 1b       	sub	r18, r24
     644:	39 0b       	sbc	r19, r25
     646:	30 93 0d 02 	sts	0x020D, r19	; 0x80020d <derivative+0x1>
     64a:	20 93 0c 02 	sts	0x020C, r18	; 0x80020c <derivative>
		output = kp*pidError + ki*integral + kd*derivative;
     64e:	80 90 06 01 	lds	r8, 0x0106	; 0x800106 <kp>
     652:	90 90 07 01 	lds	r9, 0x0107	; 0x800107 <kp+0x1>
     656:	a0 90 08 01 	lds	r10, 0x0108	; 0x800108 <kp+0x2>
     65a:	b0 90 09 01 	lds	r11, 0x0109	; 0x800109 <kp+0x3>
     65e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <integral>
     662:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <integral+0x1>
     666:	9a 83       	std	Y+2, r25	; 0x02
     668:	89 83       	std	Y+1, r24	; 0x01
     66a:	40 90 04 02 	lds	r4, 0x0204	; 0x800204 <ki>
     66e:	50 90 05 02 	lds	r5, 0x0205	; 0x800205 <ki+0x1>
     672:	60 90 06 02 	lds	r6, 0x0206	; 0x800206 <ki+0x2>
     676:	70 90 07 02 	lds	r7, 0x0207	; 0x800207 <ki+0x3>
     67a:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <derivative>
     67e:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <derivative+0x1>
     682:	fc 83       	std	Y+4, r31	; 0x04
     684:	eb 83       	std	Y+3, r30	; 0x03
     686:	c0 90 02 01 	lds	r12, 0x0102	; 0x800102 <kd>
     68a:	d0 90 03 01 	lds	r13, 0x0103	; 0x800103 <kd+0x1>
     68e:	e0 90 04 01 	lds	r14, 0x0104	; 0x800104 <kd+0x2>
     692:	f0 90 05 01 	lds	r15, 0x0105	; 0x800105 <kd+0x3>
     696:	2d 81       	ldd	r18, Y+5	; 0x05
     698:	3e 81       	ldd	r19, Y+6	; 0x06
     69a:	b9 01       	movw	r22, r18
     69c:	33 0f       	add	r19, r19
     69e:	88 0b       	sbc	r24, r24
     6a0:	99 0b       	sbc	r25, r25
     6a2:	0e 94 76 08 	call	0x10ec	; 0x10ec <__floatsisf>
     6a6:	a5 01       	movw	r20, r10
     6a8:	94 01       	movw	r18, r8
     6aa:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__mulsf3>
     6ae:	4b 01       	movw	r8, r22
     6b0:	5c 01       	movw	r10, r24
     6b2:	49 81       	ldd	r20, Y+1	; 0x01
     6b4:	5a 81       	ldd	r21, Y+2	; 0x02
     6b6:	ba 01       	movw	r22, r20
     6b8:	55 0f       	add	r21, r21
     6ba:	88 0b       	sbc	r24, r24
     6bc:	99 0b       	sbc	r25, r25
     6be:	0e 94 76 08 	call	0x10ec	; 0x10ec <__floatsisf>
     6c2:	a3 01       	movw	r20, r6
     6c4:	92 01       	movw	r18, r4
     6c6:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__mulsf3>
     6ca:	9b 01       	movw	r18, r22
     6cc:	ac 01       	movw	r20, r24
     6ce:	c5 01       	movw	r24, r10
     6d0:	b4 01       	movw	r22, r8
     6d2:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__addsf3>
     6d6:	4b 01       	movw	r8, r22
     6d8:	5c 01       	movw	r10, r24
     6da:	eb 81       	ldd	r30, Y+3	; 0x03
     6dc:	fc 81       	ldd	r31, Y+4	; 0x04
     6de:	bf 01       	movw	r22, r30
     6e0:	ff 0f       	add	r31, r31
     6e2:	88 0b       	sbc	r24, r24
     6e4:	99 0b       	sbc	r25, r25
     6e6:	0e 94 76 08 	call	0x10ec	; 0x10ec <__floatsisf>
     6ea:	a7 01       	movw	r20, r14
     6ec:	96 01       	movw	r18, r12
     6ee:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__mulsf3>
     6f2:	9b 01       	movw	r18, r22
     6f4:	ac 01       	movw	r20, r24
     6f6:	c5 01       	movw	r24, r10
     6f8:	b4 01       	movw	r22, r8
     6fa:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__addsf3>
     6fe:	0e 94 3e 08 	call	0x107c	; 0x107c <__fixsfsi>
     702:	70 93 0b 02 	sts	0x020B, r23	; 0x80020b <output+0x1>
     706:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <output>
		
		itos(abs(pidError), tmpOutput);
     70a:	8d 81       	ldd	r24, Y+5	; 0x05
     70c:	9e 81       	ldd	r25, Y+6	; 0x06
     70e:	99 23       	and	r25, r25
     710:	1c f4       	brge	.+6      	; 0x718 <main+0x240>
     712:	91 95       	neg	r25
     714:	81 95       	neg	r24
     716:	91 09       	sbc	r25, r1
     718:	64 e1       	ldi	r22, 0x14	; 20
     71a:	72 e0       	ldi	r23, 0x02	; 2
     71c:	0e 94 46 01 	call	0x28c	; 0x28c <itos>
		lcd_gotoxy(1,1);
     720:	61 e0       	ldi	r22, 0x01	; 1
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
		lcd_print(tmpOutput);
     728:	84 e1       	ldi	r24, 0x14	; 20
     72a:	92 e0       	ldi	r25, 0x02	; 2
     72c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
		lcd_print("  ");
     730:	85 e7       	ldi	r24, 0x75	; 117
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
		itos(potVal,potConv);
     738:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <potVal>
     73c:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <potVal+0x1>
     740:	60 ec       	ldi	r22, 0xC0	; 192
     742:	71 e0       	ldi	r23, 0x01	; 1
     744:	0e 94 46 01 	call	0x28c	; 0x28c <itos>
		lcd_gotoxy (1,7);
     748:	67 e0       	ldi	r22, 0x07	; 7
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
		lcd_print(potConv);
     750:	80 ec       	ldi	r24, 0xC0	; 192
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
		
		// Set fan speed
		pwmChange =  -1 * (output); // Liam changed -------------------------------------------------------------------------------
     758:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <output>
     75c:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <output+0x1>
     760:	91 95       	neg	r25
     762:	81 95       	neg	r24
     764:	91 09       	sbc	r25, r1
     766:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <pwmChange+0x1>
     76a:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <pwmChange>
		if((OCR1A + pwmChange) <= 38000 && (OCR1A + pwmChange) >= 36000)
     76e:	f8 01       	movw	r30, r16
     770:	80 81       	ld	r24, Z
     772:	91 81       	ldd	r25, Z+1	; 0x01
     774:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <pwmChange>
     778:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <pwmChange+0x1>
     77c:	82 0f       	add	r24, r18
     77e:	93 1f       	adc	r25, r19
     780:	81 37       	cpi	r24, 0x71	; 113
     782:	94 49       	sbci	r25, 0x94	; 148
     784:	c8 f4       	brcc	.+50     	; 0x7b8 <main+0x2e0>
     786:	f8 01       	movw	r30, r16
     788:	80 81       	ld	r24, Z
     78a:	91 81       	ldd	r25, Z+1	; 0x01
     78c:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <pwmChange>
     790:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <pwmChange+0x1>
     794:	82 0f       	add	r24, r18
     796:	93 1f       	adc	r25, r19
     798:	80 3a       	cpi	r24, 0xA0	; 160
     79a:	9c 48       	sbci	r25, 0x8C	; 140
     79c:	68 f0       	brcs	.+26     	; 0x7b8 <main+0x2e0>
			OCR1A = OCR1A + pwmChange - 1;
     79e:	f8 01       	movw	r30, r16
     7a0:	80 81       	ld	r24, Z
     7a2:	91 81       	ldd	r25, Z+1	; 0x01
     7a4:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <pwmChange>
     7a8:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <pwmChange+0x1>
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	82 0f       	add	r24, r18
     7b0:	93 1f       	adc	r25, r19
     7b2:	91 83       	std	Z+1, r25	; 0x01
     7b4:	80 83       	st	Z, r24
     7b6:	51 c0       	rjmp	.+162    	; 0x85a <main+0x382>
		else
		{
			if (OCR1A + pwmChange > 38000 )
     7b8:	f8 01       	movw	r30, r16
     7ba:	80 81       	ld	r24, Z
     7bc:	91 81       	ldd	r25, Z+1	; 0x01
     7be:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <pwmChange>
     7c2:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <pwmChange+0x1>
     7c6:	82 0f       	add	r24, r18
     7c8:	93 1f       	adc	r25, r19
     7ca:	81 37       	cpi	r24, 0x71	; 113
     7cc:	94 49       	sbci	r25, 0x94	; 148
     7ce:	08 f1       	brcs	.+66     	; 0x812 <main+0x33a>
			{
				overflow = OCR1A + pwmChange - 38000;
     7d0:	f8 01       	movw	r30, r16
     7d2:	80 81       	ld	r24, Z
     7d4:	91 81       	ldd	r25, Z+1	; 0x01
     7d6:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <pwmChange>
     7da:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <pwmChange+0x1>
     7de:	80 57       	subi	r24, 0x70	; 112
     7e0:	94 49       	sbci	r25, 0x94	; 148
     7e2:	82 0f       	add	r24, r18
     7e4:	93 1f       	adc	r25, r19
     7e6:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <overflow+0x1>
     7ea:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <overflow>
				OCR1A = OCR1A + (pwmChange - overflow - 1);	
     7ee:	80 81       	ld	r24, Z
     7f0:	91 81       	ldd	r25, Z+1	; 0x01
     7f2:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <pwmChange>
     7f6:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <pwmChange+0x1>
     7fa:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <overflow>
     7fe:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <overflow+0x1>
     802:	24 1b       	sub	r18, r20
     804:	35 0b       	sbc	r19, r21
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	82 0f       	add	r24, r18
     80a:	93 1f       	adc	r25, r19
     80c:	91 83       	std	Z+1, r25	; 0x01
     80e:	80 83       	st	Z, r24
     810:	24 c0       	rjmp	.+72     	; 0x85a <main+0x382>
			}
			else
			{
				overflow = 36000 - (OCR1A + pwmChange);
     812:	f8 01       	movw	r30, r16
     814:	80 81       	ld	r24, Z
     816:	91 81       	ldd	r25, Z+1	; 0x01
     818:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <pwmChange>
     81c:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <pwmChange+0x1>
     820:	40 ea       	ldi	r20, 0xA0	; 160
     822:	5c e8       	ldi	r21, 0x8C	; 140
     824:	48 1b       	sub	r20, r24
     826:	59 0b       	sbc	r21, r25
     828:	ca 01       	movw	r24, r20
     82a:	82 1b       	sub	r24, r18
     82c:	93 0b       	sbc	r25, r19
     82e:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <overflow+0x1>
     832:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <overflow>
				OCR1A = OCR1A + (pwmChange + overflow) + 1;
     836:	20 81       	ld	r18, Z
     838:	31 81       	ldd	r19, Z+1	; 0x01
     83a:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <pwmChange>
     83e:	50 91 13 02 	lds	r21, 0x0213	; 0x800213 <pwmChange+0x1>
     842:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <overflow>
     846:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <overflow+0x1>
     84a:	84 0f       	add	r24, r20
     84c:	95 1f       	adc	r25, r21
     84e:	2f 5f       	subi	r18, 0xFF	; 255
     850:	3f 4f       	sbci	r19, 0xFF	; 255
     852:	82 0f       	add	r24, r18
     854:	93 1f       	adc	r25, r19
     856:	91 83       	std	Z+1, r25	; 0x01
     858:	80 83       	st	Z, r24
			}
		}
		
		previousPidError = pidError;
     85a:	8d 81       	ldd	r24, Y+5	; 0x05
     85c:	9e 81       	ldd	r25, Y+6	; 0x06
     85e:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <previousPidError+0x1>
     862:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <previousPidError>
		//_delay_ms(10);
		
	}
     866:	af ce       	rjmp	.-674    	; 0x5c6 <main+0xee>

00000868 <print_height_angle>:

/************************************************* NUMBER CHANING FUNCTIONS **********************************************************************************/

// Function used to print either the height or angle selection ** THIS FUNCTION IS ONLY FOR CHANGING THE SELECTION **
void print_height_angle(char *angleConv, char *heightConv, int heightSelect)
{
     868:	ef 92       	push	r14
     86a:	ff 92       	push	r15
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	ec 01       	movw	r28, r24
     876:	8b 01       	movw	r16, r22
     878:	7a 01       	movw	r14, r20
	lcd_gotoxy(1,1);
     87a:	61 e0       	ldi	r22, 0x01	; 1
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	if (heightSelect == 1)
     882:	ea 94       	dec	r14
     884:	ef 28       	or	r14, r15
     886:	29 f4       	brne	.+10     	; 0x892 <print_height_angle+0x2a>
		lcd_print(HEIGHT_SELECT);
     888:	88 e7       	ldi	r24, 0x78	; 120
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
     890:	04 c0       	rjmp	.+8      	; 0x89a <print_height_angle+0x32>
	else
		lcd_print(ANGLE_SELECT);
     892:	8a e9       	ldi	r24, 0x9A	; 154
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	// un-select bottom row
	lcd_gotoxy(1,2);
     89a:	62 e0       	ldi	r22, 0x02	; 2
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(" ");
     8a2:	86 e7       	ldi	r24, 0x76	; 118
     8a4:	91 e0       	ldi	r25, 0x01	; 1
     8a6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_print(heightConv);
     8aa:	c8 01       	movw	r24, r16
     8ac:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(6,2);
     8b0:	62 e0       	ldi	r22, 0x02	; 2
     8b2:	86 e0       	ldi	r24, 0x06	; 6
     8b4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(" ");
     8b8:	86 e7       	ldi	r24, 0x76	; 118
     8ba:	91 e0       	ldi	r25, 0x01	; 1
     8bc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(10,2);
     8c0:	62 e0       	ldi	r22, 0x02	; 2
     8c2:	8a e0       	ldi	r24, 0x0A	; 10
     8c4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(" ");
     8c8:	86 e7       	ldi	r24, 0x76	; 118
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_print(angleConv);
     8d0:	ce 01       	movw	r24, r28
     8d2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(15,2);
     8d6:	62 e0       	ldi	r22, 0x02	; 2
     8d8:	8f e0       	ldi	r24, 0x0F	; 15
     8da:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(" ");
     8de:	86 e7       	ldi	r24, 0x76	; 118
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
}
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	1f 91       	pop	r17
     8ec:	0f 91       	pop	r16
     8ee:	ff 90       	pop	r15
     8f0:	ef 90       	pop	r14
     8f2:	08 95       	ret

000008f4 <print_height_change>:

// Function used to print a change in the height value
void print_height_change(char *conversion)
{
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	ec 01       	movw	r28, r24
	//ensure height becomes unselected
	lcd_gotoxy(1,1);
     8fa:	61 e0       	ldi	r22, 0x01	; 1
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(NO_HS_SELECT);
     902:	8b ea       	ldi	r24, 0xAB	; 171
     904:	91 e0       	ldi	r25, 0x01	; 1
     906:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(1,2);
     90a:	62 e0       	ldi	r22, 0x02	; 2
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("[");
     912:	8c eb       	ldi	r24, 0xBC	; 188
     914:	91 e0       	ldi	r25, 0x01	; 1
     916:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(2,2);
     91a:	62 e0       	ldi	r22, 0x02	; 2
     91c:	82 e0       	ldi	r24, 0x02	; 2
     91e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(conversion);
     922:	ce 01       	movw	r24, r28
     924:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(6,2);
     928:	62 e0       	ldi	r22, 0x02	; 2
     92a:	86 e0       	ldi	r24, 0x06	; 6
     92c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("]");
     930:	89 ea       	ldi	r24, 0xA9	; 169
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
}
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	08 95       	ret

0000093e <print_angle_change>:

// Function used to print a change in the angle value
void print_angle_change(char *conversion)
{
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	ec 01       	movw	r28, r24
	lcd_gotoxy(1,1);
     944:	61 e0       	ldi	r22, 0x01	; 1
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(NO_HS_SELECT);
     94c:	8b ea       	ldi	r24, 0xAB	; 171
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(10,2);
     954:	62 e0       	ldi	r22, 0x02	; 2
     956:	8a e0       	ldi	r24, 0x0A	; 10
     958:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("[");
     95c:	8c eb       	ldi	r24, 0xBC	; 188
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(11,2);
     964:	62 e0       	ldi	r22, 0x02	; 2
     966:	8b e0       	ldi	r24, 0x0B	; 11
     968:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(conversion);
     96c:	ce 01       	movw	r24, r28
     96e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(15,2);
     972:	62 e0       	ldi	r22, 0x02	; 2
     974:	8f e0       	ldi	r24, 0x0F	; 15
     976:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("]");
     97a:	89 ea       	ldi	r24, 0xA9	; 169
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	
}
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <__vector_4>:
//		- maybe add feature to indicate height / angle reached max value on LCD
//	-Button press either:
//		- Confirms height / angle adjustment
//		- Selects angle / height and moves user to adjust height / angle
ISR(PCINT1_vect)
{
     988:	1f 92       	push	r1
     98a:	0f 92       	push	r0
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	0f 92       	push	r0
     990:	11 24       	eor	r1, r1
     992:	cf 92       	push	r12
     994:	df 92       	push	r13
     996:	ef 92       	push	r14
     998:	ff 92       	push	r15
     99a:	2f 93       	push	r18
     99c:	3f 93       	push	r19
     99e:	4f 93       	push	r20
     9a0:	5f 93       	push	r21
     9a2:	6f 93       	push	r22
     9a4:	7f 93       	push	r23
     9a6:	8f 93       	push	r24
     9a8:	9f 93       	push	r25
     9aa:	af 93       	push	r26
     9ac:	bf 93       	push	r27
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	ef 93       	push	r30
     9b4:	ff 93       	push	r31
     9b6:	8f e1       	ldi	r24, 0x1F	; 31
     9b8:	9e e4       	ldi	r25, 0x4E	; 78
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	f1 f7       	brne	.-4      	; 0x9ba <__vector_4+0x32>
     9be:	00 c0       	rjmp	.+0      	; 0x9c0 <__vector_4+0x38>
     9c0:	00 00       	nop
	_delay_ms(5);
	
	if(PINC == RIGHT) //if right turn triggered interrupt
     9c2:	86 b1       	in	r24, 0x06	; 6
     9c4:	83 37       	cpi	r24, 0x73	; 115
     9c6:	09 f0       	breq	.+2      	; 0x9ca <__vector_4+0x42>
     9c8:	6b c0       	rjmp	.+214    	; 0xaa0 <__vector_4+0x118>
	{
		switch(state)
     9ca:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <state>
     9ce:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <state+0x1>
     9d2:	82 30       	cpi	r24, 0x02	; 2
     9d4:	91 05       	cpc	r25, r1
     9d6:	a9 f0       	breq	.+42     	; 0xa02 <__vector_4+0x7a>
     9d8:	83 30       	cpi	r24, 0x03	; 3
     9da:	91 05       	cpc	r25, r1
     9dc:	d1 f1       	breq	.+116    	; 0xa52 <__vector_4+0xca>
     9de:	89 2b       	or	r24, r25
     9e0:	09 f0       	breq	.+2      	; 0x9e4 <__vector_4+0x5c>
     9e2:	5e c0       	rjmp	.+188    	; 0xaa0 <__vector_4+0x118>
		{
			case HEIGHT: // change to angle state
				print_height_angle(angleConv,heightConv,0);
     9e4:	40 e0       	ldi	r20, 0x00	; 0
     9e6:	50 e0       	ldi	r21, 0x00	; 0
     9e8:	60 ee       	ldi	r22, 0xE0	; 224
     9ea:	71 e0       	ldi	r23, 0x01	; 1
     9ec:	80 ed       	ldi	r24, 0xD0	; 208
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	0e 94 34 04 	call	0x868	; 0x868 <print_height_angle>
				state = ANGLE;
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <state+0x1>
     9fc:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <state>
				break;
     a00:	4f c0       	rjmp	.+158    	; 0xaa0 <__vector_4+0x118>
			case ANGLE:
			// do nothing
			break;
			case CHEIGHT: // increment height value (as long as < MAX (?))
			if ((height+valueChange) <= MAX_HEIGHT) // total guess right now
     a02:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <height>
     a06:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <height+0x1>
     a0a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     a0e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     a12:	82 0f       	add	r24, r18
     a14:	93 1f       	adc	r25, r19
     a16:	40 97       	sbiw	r24, 0x10	; 16
     a18:	0c f0       	brlt	.+2      	; 0xa1c <__vector_4+0x94>
     a1a:	42 c0       	rjmp	.+132    	; 0xaa0 <__vector_4+0x118>
			{
				height = height + valueChange; //increment height by tenth
     a1c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <height>
     a20:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <height+0x1>
     a24:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     a28:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     a2c:	82 0f       	add	r24, r18
     a2e:	93 1f       	adc	r25, r19
     a30:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <height+0x1>
     a34:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <height>
				ftoa(height,heightConv); // convert height to char array (heightConv) with 1 decimal place
     a38:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <height>
     a3c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <height+0x1>
     a40:	60 ee       	ldi	r22, 0xE0	; 224
     a42:	71 e0       	ldi	r23, 0x01	; 1
     a44:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_height_change(heightConv); // print conversion to LCD
     a48:	80 ee       	ldi	r24, 0xE0	; 224
     a4a:	91 e0       	ldi	r25, 0x01	; 1
     a4c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <print_height_change>
     a50:	27 c0       	rjmp	.+78     	; 0xaa0 <__vector_4+0x118>
			}
			break;
			case CANGLE: // increment angle value (as long as <= MAX (90))
				if ((angle+valueChange) <= MAX_ANGLE)
     a52:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <angle>
     a56:	30 91 ff 01 	lds	r19, 0x01FF	; 0x8001ff <angle+0x1>
     a5a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     a5e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     a62:	82 0f       	add	r24, r18
     a64:	93 1f       	adc	r25, r19
     a66:	8b 35       	cpi	r24, 0x5B	; 91
     a68:	91 05       	cpc	r25, r1
     a6a:	d4 f4       	brge	.+52     	; 0xaa0 <__vector_4+0x118>
				{
					angle=angle + valueChange;
     a6c:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <angle>
     a70:	30 91 ff 01 	lds	r19, 0x01FF	; 0x8001ff <angle+0x1>
     a74:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     a78:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     a7c:	82 0f       	add	r24, r18
     a7e:	93 1f       	adc	r25, r19
     a80:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <angle+0x1>
     a84:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <angle>
					ftoa(angle,angleConv); // convert angle to char array (angleConv) with 1 decimal place
     a88:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <angle>
     a8c:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <angle+0x1>
     a90:	60 ed       	ldi	r22, 0xD0	; 208
     a92:	71 e0       	ldi	r23, 0x01	; 1
     a94:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
					print_angle_change(angleConv);	// print conversion to LCD
     a98:	80 ed       	ldi	r24, 0xD0	; 208
     a9a:	91 e0       	ldi	r25, 0x01	; 1
     a9c:	0e 94 9f 04 	call	0x93e	; 0x93e <print_angle_change>
			break;
		}
	}
	
	
	if (PINC == LEFT) // If left turn triggered interrupt
     aa0:	86 b1       	in	r24, 0x06	; 6
     aa2:	85 37       	cpi	r24, 0x75	; 117
     aa4:	09 f0       	breq	.+2      	; 0xaa8 <__vector_4+0x120>
     aa6:	66 c0       	rjmp	.+204    	; 0xb74 <__vector_4+0x1ec>
	{
		switch(state)
     aa8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <state>
     aac:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <state+0x1>
     ab0:	82 30       	cpi	r24, 0x02	; 2
     ab2:	91 05       	cpc	r25, r1
     ab4:	99 f0       	breq	.+38     	; 0xadc <__vector_4+0x154>
     ab6:	83 30       	cpi	r24, 0x03	; 3
     ab8:	91 05       	cpc	r25, r1
     aba:	b9 f1       	breq	.+110    	; 0xb2a <__vector_4+0x1a2>
     abc:	01 97       	sbiw	r24, 0x01	; 1
     abe:	09 f0       	breq	.+2      	; 0xac2 <__vector_4+0x13a>
     ac0:	59 c0       	rjmp	.+178    	; 0xb74 <__vector_4+0x1ec>
		{
			case HEIGHT: // Change increment/decrement value to 1
			// do nothing
			break;
			case ANGLE: // change to height state
			print_height_angle(angleConv,heightConv, 1);
     ac2:	41 e0       	ldi	r20, 0x01	; 1
     ac4:	50 e0       	ldi	r21, 0x00	; 0
     ac6:	60 ee       	ldi	r22, 0xE0	; 224
     ac8:	71 e0       	ldi	r23, 0x01	; 1
     aca:	80 ed       	ldi	r24, 0xD0	; 208
     acc:	91 e0       	ldi	r25, 0x01	; 1
     ace:	0e 94 34 04 	call	0x868	; 0x868 <print_height_angle>
			state = HEIGHT;
     ad2:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <state+0x1>
     ad6:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <state>
			break;
     ada:	4c c0       	rjmp	.+152    	; 0xb74 <__vector_4+0x1ec>
			case CHEIGHT: // decrement height value (as long as >= MIN (0) )
			if ((height-valueChange) >= 0)
     adc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <height>
     ae0:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <height+0x1>
     ae4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     ae8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     aec:	82 1b       	sub	r24, r18
     aee:	93 0b       	sbc	r25, r19
     af0:	0a f4       	brpl	.+2      	; 0xaf4 <__vector_4+0x16c>
     af2:	40 c0       	rjmp	.+128    	; 0xb74 <__vector_4+0x1ec>
			{
				height = height - valueChange;
     af4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <height>
     af8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <height+0x1>
     afc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     b00:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     b04:	82 1b       	sub	r24, r18
     b06:	93 0b       	sbc	r25, r19
     b08:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <height+0x1>
     b0c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <height>
				ftoa(height,heightConv); // convert height to char array (heightConv) with 1 decimal place
     b10:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <height>
     b14:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <height+0x1>
     b18:	60 ee       	ldi	r22, 0xE0	; 224
     b1a:	71 e0       	ldi	r23, 0x01	; 1
     b1c:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_height_change(heightConv); // print conversion to LCD
     b20:	80 ee       	ldi	r24, 0xE0	; 224
     b22:	91 e0       	ldi	r25, 0x01	; 1
     b24:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <print_height_change>
     b28:	25 c0       	rjmp	.+74     	; 0xb74 <__vector_4+0x1ec>
			}
			break;
			case CANGLE: // increment angle value (as long as >= MIN (0))
			if((angle-valueChange) >= 0)
     b2a:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <angle>
     b2e:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <angle+0x1>
     b32:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     b36:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     b3a:	82 1b       	sub	r24, r18
     b3c:	93 0b       	sbc	r25, r19
     b3e:	d2 f0       	brmi	.+52     	; 0xb74 <__vector_4+0x1ec>
			{
				angle = angle - valueChange;
     b40:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <angle>
     b44:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <angle+0x1>
     b48:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     b4c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     b50:	82 1b       	sub	r24, r18
     b52:	93 0b       	sbc	r25, r19
     b54:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <angle+0x1>
     b58:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <angle>
				ftoa(angle,angleConv); // convert angle to char array (angleConv) with 1 decimal place
     b5c:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <angle>
     b60:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <angle+0x1>
     b64:	60 ed       	ldi	r22, 0xD0	; 208
     b66:	71 e0       	ldi	r23, 0x01	; 1
     b68:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_angle_change(angleConv);	// print conversion to LCD
     b6c:	80 ed       	ldi	r24, 0xD0	; 208
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	0e 94 9f 04 	call	0x93e	; 0x93e <print_angle_change>
			break;
		}
	}


	if(PINC == BUTTON) // If button press triggered interrupt
     b74:	86 b1       	in	r24, 0x06	; 6
     b76:	87 36       	cpi	r24, 0x67	; 103
     b78:	09 f0       	breq	.+2      	; 0xb7c <__vector_4+0x1f4>
     b7a:	71 c1       	rjmp	.+738    	; 0xe5e <__vector_4+0x4d6>
	{
		switch(state)
     b7c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <state>
     b80:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <state+0x1>
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	91 05       	cpc	r25, r1
     b88:	f1 f0       	breq	.+60     	; 0xbc6 <__vector_4+0x23e>
     b8a:	1c f4       	brge	.+6      	; 0xb92 <__vector_4+0x20a>
     b8c:	89 2b       	or	r24, r25
     b8e:	41 f0       	breq	.+16     	; 0xba0 <__vector_4+0x218>
     b90:	66 c1       	rjmp	.+716    	; 0xe5e <__vector_4+0x4d6>
     b92:	82 30       	cpi	r24, 0x02	; 2
     b94:	91 05       	cpc	r25, r1
     b96:	51 f1       	breq	.+84     	; 0xbec <__vector_4+0x264>
     b98:	03 97       	sbiw	r24, 0x03	; 3
     b9a:	09 f4       	brne	.+2      	; 0xb9e <__vector_4+0x216>
     b9c:	c2 c0       	rjmp	.+388    	; 0xd22 <__vector_4+0x39a>
     b9e:	5f c1       	rjmp	.+702    	; 0xe5e <__vector_4+0x4d6>
		{
			case HEIGHT: // change to height change state
				ftoa(height,heightConv);
     ba0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <height>
     ba4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <height+0x1>
     ba8:	60 ee       	ldi	r22, 0xE0	; 224
     baa:	71 e0       	ldi	r23, 0x01	; 1
     bac:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_height_change(heightConv);
     bb0:	80 ee       	ldi	r24, 0xE0	; 224
     bb2:	91 e0       	ldi	r25, 0x01	; 1
     bb4:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <print_height_change>
				state = CHEIGHT;
     bb8:	82 e0       	ldi	r24, 0x02	; 2
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <state+0x1>
     bc0:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <state>
				break;
     bc4:	4c c1       	rjmp	.+664    	; 0xe5e <__vector_4+0x4d6>
			case ANGLE: // change to angle change state
				ftoa(angle,angleConv);
     bc6:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <angle>
     bca:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <angle+0x1>
     bce:	60 ed       	ldi	r22, 0xD0	; 208
     bd0:	71 e0       	ldi	r23, 0x01	; 1
     bd2:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_angle_change(angleConv);
     bd6:	80 ed       	ldi	r24, 0xD0	; 208
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 9f 04 	call	0x93e	; 0x93e <print_angle_change>
				state = CANGLE;
     bde:	83 e0       	ldi	r24, 0x03	; 3
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <state+0x1>
     be6:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <state>
				break;
     bea:	39 c1       	rjmp	.+626    	; 0xe5e <__vector_4+0x4d6>
			case CHEIGHT: // confirm height change value
				valueConfirm = 1; // set flag
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <valueConfirm+0x1>
     bf4:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <valueConfirm>
				// Convert height to angle
				dAngle = height; // save height variable as double
     bf8:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <height>
     bfc:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <height+0x1>
     c00:	07 2e       	mov	r0, r23
     c02:	00 0c       	add	r0, r0
     c04:	88 0b       	sbc	r24, r24
     c06:	99 0b       	sbc	r25, r25
     c08:	0e 94 76 08 	call	0x10ec	; 0x10ec <__floatsisf>
     c0c:	60 93 fa 01 	sts	0x01FA, r22	; 0x8001fa <dAngle>
     c10:	70 93 fb 01 	sts	0x01FB, r23	; 0x8001fb <dAngle+0x1>
     c14:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <dAngle+0x2>
     c18:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <dAngle+0x3>
				dAngle = dAngle * dAngle; // square dAngle
     c1c:	60 91 fa 01 	lds	r22, 0x01FA	; 0x8001fa <dAngle>
     c20:	70 91 fb 01 	lds	r23, 0x01FB	; 0x8001fb <dAngle+0x1>
     c24:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <dAngle+0x2>
     c28:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <dAngle+0x3>
     c2c:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <dAngle>
     c30:	30 91 fb 01 	lds	r19, 0x01FB	; 0x8001fb <dAngle+0x1>
     c34:	40 91 fc 01 	lds	r20, 0x01FC	; 0x8001fc <dAngle+0x2>
     c38:	50 91 fd 01 	lds	r21, 0x01FD	; 0x8001fd <dAngle+0x3>
     c3c:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__mulsf3>
     c40:	60 93 fa 01 	sts	0x01FA, r22	; 0x8001fa <dAngle>
     c44:	70 93 fb 01 	sts	0x01FB, r23	; 0x8001fb <dAngle+0x1>
     c48:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <dAngle+0x2>
     c4c:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <dAngle+0x3>
				dAngle = sqrt(225 - dAngle) / 15;
     c50:	c0 90 fa 01 	lds	r12, 0x01FA	; 0x8001fa <dAngle>
     c54:	d0 90 fb 01 	lds	r13, 0x01FB	; 0x8001fb <dAngle+0x1>
     c58:	e0 90 fc 01 	lds	r14, 0x01FC	; 0x8001fc <dAngle+0x2>
     c5c:	f0 90 fd 01 	lds	r15, 0x01FD	; 0x8001fd <dAngle+0x3>
     c60:	a7 01       	movw	r20, r14
     c62:	96 01       	movw	r18, r12
     c64:	60 e0       	ldi	r22, 0x00	; 0
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	81 e6       	ldi	r24, 0x61	; 97
     c6a:	93 e4       	ldi	r25, 0x43	; 67
     c6c:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__subsf3>
     c70:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <sqrt>
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	40 e7       	ldi	r20, 0x70	; 112
     c7a:	51 e4       	ldi	r21, 0x41	; 65
     c7c:	0e 94 cc 07 	call	0xf98	; 0xf98 <__divsf3>
     c80:	60 93 fa 01 	sts	0x01FA, r22	; 0x8001fa <dAngle>
     c84:	70 93 fb 01 	sts	0x01FB, r23	; 0x8001fb <dAngle+0x1>
     c88:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <dAngle+0x2>
     c8c:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <dAngle+0x3>
				dAngle = acos(dAngle) * (180 / M_PI);  // See Alex's lab notebook for formula used (combo of pythag. and trig.)
     c90:	60 91 fa 01 	lds	r22, 0x01FA	; 0x8001fa <dAngle>
     c94:	70 91 fb 01 	lds	r23, 0x01FB	; 0x8001fb <dAngle+0x1>
     c98:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <dAngle+0x2>
     c9c:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <dAngle+0x3>
     ca0:	0e 94 49 07 	call	0xe92	; 0xe92 <acos>
     ca4:	20 ee       	ldi	r18, 0xE0	; 224
     ca6:	3e e2       	ldi	r19, 0x2E	; 46
     ca8:	45 e6       	ldi	r20, 0x65	; 101
     caa:	52 e4       	ldi	r21, 0x42	; 66
     cac:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__mulsf3>
     cb0:	60 93 fa 01 	sts	0x01FA, r22	; 0x8001fa <dAngle>
     cb4:	70 93 fb 01 	sts	0x01FB, r23	; 0x8001fb <dAngle+0x1>
     cb8:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <dAngle+0x2>
     cbc:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <dAngle+0x3>
				angle = floor(dAngle);
     cc0:	60 91 fa 01 	lds	r22, 0x01FA	; 0x8001fa <dAngle>
     cc4:	70 91 fb 01 	lds	r23, 0x01FB	; 0x8001fb <dAngle+0x1>
     cc8:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <dAngle+0x2>
     ccc:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <dAngle+0x3>
     cd0:	0e 94 b1 08 	call	0x1162	; 0x1162 <floor>
     cd4:	0e 94 3e 08 	call	0x107c	; 0x107c <__fixsfsi>
     cd8:	70 93 ff 01 	sts	0x01FF, r23	; 0x8001ff <angle+0x1>
     cdc:	60 93 fe 01 	sts	0x01FE, r22	; 0x8001fe <angle>
				if (height == 15)
     ce0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <height>
     ce4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <height+0x1>
     ce8:	0f 97       	sbiw	r24, 0x0f	; 15
     cea:	31 f4       	brne	.+12     	; 0xcf8 <__vector_4+0x370>
				{
					angle = 90;
     cec:	8a e5       	ldi	r24, 0x5A	; 90
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <angle+0x1>
     cf4:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <angle>
				}
			ftoa(angle, angleConv);
     cf8:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <angle>
     cfc:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <angle+0x1>
     d00:	60 ed       	ldi	r22, 0xD0	; 208
     d02:	71 e0       	ldi	r23, 0x01	; 1
     d04:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
			print_height_angle(angleConv,heightConv, 1); // refresh screen with height selected
     d08:	41 e0       	ldi	r20, 0x01	; 1
     d0a:	50 e0       	ldi	r21, 0x00	; 0
     d0c:	60 ee       	ldi	r22, 0xE0	; 224
     d0e:	71 e0       	ldi	r23, 0x01	; 1
     d10:	80 ed       	ldi	r24, 0xD0	; 208
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	0e 94 34 04 	call	0x868	; 0x868 <print_height_angle>
			state = HEIGHT; // exit from change function
     d18:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <state+0x1>
     d1c:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <state>
			break;
     d20:	9e c0       	rjmp	.+316    	; 0xe5e <__vector_4+0x4d6>
			case CANGLE: // confirm angle change value
				valueConfirm = 1; // set flag - might need to make unique flag
     d22:	c1 e0       	ldi	r28, 0x01	; 1
     d24:	d0 e0       	ldi	r29, 0x00	; 0
     d26:	d0 93 f5 01 	sts	0x01F5, r29	; 0x8001f5 <valueConfirm+0x1>
     d2a:	c0 93 f4 01 	sts	0x01F4, r28	; 0x8001f4 <valueConfirm>
				// Convert angle to height
				dHeight = angle; // save angle as double
     d2e:	60 91 fe 01 	lds	r22, 0x01FE	; 0x8001fe <angle>
     d32:	70 91 ff 01 	lds	r23, 0x01FF	; 0x8001ff <angle+0x1>
     d36:	07 2e       	mov	r0, r23
     d38:	00 0c       	add	r0, r0
     d3a:	88 0b       	sbc	r24, r24
     d3c:	99 0b       	sbc	r25, r25
     d3e:	0e 94 76 08 	call	0x10ec	; 0x10ec <__floatsisf>
     d42:	60 93 f6 01 	sts	0x01F6, r22	; 0x8001f6 <dHeight>
     d46:	70 93 f7 01 	sts	0x01F7, r23	; 0x8001f7 <dHeight+0x1>
     d4a:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <dHeight+0x2>
     d4e:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <dHeight+0x3>
				dHeight = (dHeight) * (M_PI / 180); // convert angle to radians
     d52:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <dHeight>
     d56:	70 91 f7 01 	lds	r23, 0x01F7	; 0x8001f7 <dHeight+0x1>
     d5a:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <dHeight+0x2>
     d5e:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <dHeight+0x3>
     d62:	25 e3       	ldi	r18, 0x35	; 53
     d64:	3a ef       	ldi	r19, 0xFA	; 250
     d66:	4e e8       	ldi	r20, 0x8E	; 142
     d68:	5c e3       	ldi	r21, 0x3C	; 60
     d6a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__mulsf3>
     d6e:	60 93 f6 01 	sts	0x01F6, r22	; 0x8001f6 <dHeight>
     d72:	70 93 f7 01 	sts	0x01F7, r23	; 0x8001f7 <dHeight+0x1>
     d76:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <dHeight+0x2>
     d7a:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <dHeight+0x3>
				dHeight = 15*(cos(dHeight));
     d7e:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <dHeight>
     d82:	70 91 f7 01 	lds	r23, 0x01F7	; 0x8001f7 <dHeight+0x1>
     d86:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <dHeight+0x2>
     d8a:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <dHeight+0x3>
     d8e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <cos>
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	40 e7       	ldi	r20, 0x70	; 112
     d98:	51 e4       	ldi	r21, 0x41	; 65
     d9a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__mulsf3>
     d9e:	60 93 f6 01 	sts	0x01F6, r22	; 0x8001f6 <dHeight>
     da2:	70 93 f7 01 	sts	0x01F7, r23	; 0x8001f7 <dHeight+0x1>
     da6:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <dHeight+0x2>
     daa:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <dHeight+0x3>
				dHeight = dHeight * dHeight;
     dae:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <dHeight>
     db2:	70 91 f7 01 	lds	r23, 0x01F7	; 0x8001f7 <dHeight+0x1>
     db6:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <dHeight+0x2>
     dba:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <dHeight+0x3>
     dbe:	20 91 f6 01 	lds	r18, 0x01F6	; 0x8001f6 <dHeight>
     dc2:	30 91 f7 01 	lds	r19, 0x01F7	; 0x8001f7 <dHeight+0x1>
     dc6:	40 91 f8 01 	lds	r20, 0x01F8	; 0x8001f8 <dHeight+0x2>
     dca:	50 91 f9 01 	lds	r21, 0x01F9	; 0x8001f9 <dHeight+0x3>
     dce:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__mulsf3>
     dd2:	60 93 f6 01 	sts	0x01F6, r22	; 0x8001f6 <dHeight>
     dd6:	70 93 f7 01 	sts	0x01F7, r23	; 0x8001f7 <dHeight+0x1>
     dda:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <dHeight+0x2>
     dde:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <dHeight+0x3>
				dHeight = sqrt((225-dHeight));
     de2:	c0 90 f6 01 	lds	r12, 0x01F6	; 0x8001f6 <dHeight>
     de6:	d0 90 f7 01 	lds	r13, 0x01F7	; 0x8001f7 <dHeight+0x1>
     dea:	e0 90 f8 01 	lds	r14, 0x01F8	; 0x8001f8 <dHeight+0x2>
     dee:	f0 90 f9 01 	lds	r15, 0x01F9	; 0x8001f9 <dHeight+0x3>
     df2:	a7 01       	movw	r20, r14
     df4:	96 01       	movw	r18, r12
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	81 e6       	ldi	r24, 0x61	; 97
     dfc:	93 e4       	ldi	r25, 0x43	; 67
     dfe:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__subsf3>
     e02:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <sqrt>
     e06:	60 93 f6 01 	sts	0x01F6, r22	; 0x8001f6 <dHeight>
     e0a:	70 93 f7 01 	sts	0x01F7, r23	; 0x8001f7 <dHeight+0x1>
     e0e:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <dHeight+0x2>
     e12:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <dHeight+0x3>
				height = floor(dHeight);
     e16:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <dHeight>
     e1a:	70 91 f7 01 	lds	r23, 0x01F7	; 0x8001f7 <dHeight+0x1>
     e1e:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <dHeight+0x2>
     e22:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <dHeight+0x3>
     e26:	0e 94 b1 08 	call	0x1162	; 0x1162 <floor>
     e2a:	0e 94 3e 08 	call	0x107c	; 0x107c <__fixsfsi>
     e2e:	70 93 01 02 	sts	0x0201, r23	; 0x800201 <height+0x1>
     e32:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <height>
				ftoa(height,heightConv);
     e36:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <height>
     e3a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <height+0x1>
     e3e:	60 ee       	ldi	r22, 0xE0	; 224
     e40:	71 e0       	ldi	r23, 0x01	; 1
     e42:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_height_angle(angleConv,heightConv, 0); // refresh screen with angle selected
     e46:	40 e0       	ldi	r20, 0x00	; 0
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	60 ee       	ldi	r22, 0xE0	; 224
     e4c:	71 e0       	ldi	r23, 0x01	; 1
     e4e:	80 ed       	ldi	r24, 0xD0	; 208
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	0e 94 34 04 	call	0x868	; 0x868 <print_height_angle>
				state = ANGLE;
     e56:	d0 93 03 02 	sts	0x0203, r29	; 0x800203 <state+0x1>
     e5a:	c0 93 02 02 	sts	0x0202, r28	; 0x800202 <state>
			break;
		}
	}
	

	while(PINC != 0b01110111)
     e5e:	86 b1       	in	r24, 0x06	; 6
     e60:	87 37       	cpi	r24, 0x77	; 119
     e62:	e9 f7       	brne	.-6      	; 0xe5e <__vector_4+0x4d6>
	{
		
	}

}
     e64:	ff 91       	pop	r31
     e66:	ef 91       	pop	r30
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	bf 91       	pop	r27
     e6e:	af 91       	pop	r26
     e70:	9f 91       	pop	r25
     e72:	8f 91       	pop	r24
     e74:	7f 91       	pop	r23
     e76:	6f 91       	pop	r22
     e78:	5f 91       	pop	r21
     e7a:	4f 91       	pop	r20
     e7c:	3f 91       	pop	r19
     e7e:	2f 91       	pop	r18
     e80:	ff 90       	pop	r15
     e82:	ef 90       	pop	r14
     e84:	df 90       	pop	r13
     e86:	cf 90       	pop	r12
     e88:	0f 90       	pop	r0
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	0f 90       	pop	r0
     e8e:	1f 90       	pop	r1
     e90:	18 95       	reti

00000e92 <acos>:
     e92:	9f 93       	push	r25
     e94:	9f 77       	andi	r25, 0x7F	; 127
     e96:	0e 94 c8 08 	call	0x1190	; 0x1190 <__fp_arccos>
     e9a:	0f 90       	pop	r0
     e9c:	00 20       	and	r0, r0
     e9e:	42 f4       	brpl	.+16     	; 0xeb0 <acos+0x1e>
     ea0:	90 58       	subi	r25, 0x80	; 128
     ea2:	a2 ea       	ldi	r26, 0xA2	; 162
     ea4:	2a ed       	ldi	r18, 0xDA	; 218
     ea6:	3f e0       	ldi	r19, 0x0F	; 15
     ea8:	49 e4       	ldi	r20, 0x49	; 73
     eaa:	50 e4       	ldi	r21, 0x40	; 64
     eac:	0e 94 72 07 	call	0xee4	; 0xee4 <__addsf3x>
     eb0:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <__fp_round>

00000eb4 <__subsf3>:
     eb4:	50 58       	subi	r21, 0x80	; 128

00000eb6 <__addsf3>:
     eb6:	bb 27       	eor	r27, r27
     eb8:	aa 27       	eor	r26, r26
     eba:	0e 94 72 07 	call	0xee4	; 0xee4 <__addsf3x>
     ebe:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <__fp_round>
     ec2:	0e 94 41 09 	call	0x1282	; 0x1282 <__fp_pscA>
     ec6:	38 f0       	brcs	.+14     	; 0xed6 <__addsf3+0x20>
     ec8:	0e 94 48 09 	call	0x1290	; 0x1290 <__fp_pscB>
     ecc:	20 f0       	brcs	.+8      	; 0xed6 <__addsf3+0x20>
     ece:	39 f4       	brne	.+14     	; 0xede <__addsf3+0x28>
     ed0:	9f 3f       	cpi	r25, 0xFF	; 255
     ed2:	19 f4       	brne	.+6      	; 0xeda <__addsf3+0x24>
     ed4:	26 f4       	brtc	.+8      	; 0xede <__addsf3+0x28>
     ed6:	0c 94 17 09 	jmp	0x122e	; 0x122e <__fp_nan>
     eda:	0e f4       	brtc	.+2      	; 0xede <__addsf3+0x28>
     edc:	e0 95       	com	r30
     ede:	e7 fb       	bst	r30, 7
     ee0:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__fp_inf>

00000ee4 <__addsf3x>:
     ee4:	e9 2f       	mov	r30, r25
     ee6:	0e 94 9f 09 	call	0x133e	; 0x133e <__fp_split3>
     eea:	58 f3       	brcs	.-42     	; 0xec2 <__addsf3+0xc>
     eec:	ba 17       	cp	r27, r26
     eee:	62 07       	cpc	r22, r18
     ef0:	73 07       	cpc	r23, r19
     ef2:	84 07       	cpc	r24, r20
     ef4:	95 07       	cpc	r25, r21
     ef6:	20 f0       	brcs	.+8      	; 0xf00 <__addsf3x+0x1c>
     ef8:	79 f4       	brne	.+30     	; 0xf18 <__addsf3x+0x34>
     efa:	a6 f5       	brtc	.+104    	; 0xf64 <__addsf3x+0x80>
     efc:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <__fp_zero>
     f00:	0e f4       	brtc	.+2      	; 0xf04 <__addsf3x+0x20>
     f02:	e0 95       	com	r30
     f04:	0b 2e       	mov	r0, r27
     f06:	ba 2f       	mov	r27, r26
     f08:	a0 2d       	mov	r26, r0
     f0a:	0b 01       	movw	r0, r22
     f0c:	b9 01       	movw	r22, r18
     f0e:	90 01       	movw	r18, r0
     f10:	0c 01       	movw	r0, r24
     f12:	ca 01       	movw	r24, r20
     f14:	a0 01       	movw	r20, r0
     f16:	11 24       	eor	r1, r1
     f18:	ff 27       	eor	r31, r31
     f1a:	59 1b       	sub	r21, r25
     f1c:	99 f0       	breq	.+38     	; 0xf44 <__addsf3x+0x60>
     f1e:	59 3f       	cpi	r21, 0xF9	; 249
     f20:	50 f4       	brcc	.+20     	; 0xf36 <__addsf3x+0x52>
     f22:	50 3e       	cpi	r21, 0xE0	; 224
     f24:	68 f1       	brcs	.+90     	; 0xf80 <__addsf3x+0x9c>
     f26:	1a 16       	cp	r1, r26
     f28:	f0 40       	sbci	r31, 0x00	; 0
     f2a:	a2 2f       	mov	r26, r18
     f2c:	23 2f       	mov	r18, r19
     f2e:	34 2f       	mov	r19, r20
     f30:	44 27       	eor	r20, r20
     f32:	58 5f       	subi	r21, 0xF8	; 248
     f34:	f3 cf       	rjmp	.-26     	; 0xf1c <__addsf3x+0x38>
     f36:	46 95       	lsr	r20
     f38:	37 95       	ror	r19
     f3a:	27 95       	ror	r18
     f3c:	a7 95       	ror	r26
     f3e:	f0 40       	sbci	r31, 0x00	; 0
     f40:	53 95       	inc	r21
     f42:	c9 f7       	brne	.-14     	; 0xf36 <__addsf3x+0x52>
     f44:	7e f4       	brtc	.+30     	; 0xf64 <__addsf3x+0x80>
     f46:	1f 16       	cp	r1, r31
     f48:	ba 0b       	sbc	r27, r26
     f4a:	62 0b       	sbc	r22, r18
     f4c:	73 0b       	sbc	r23, r19
     f4e:	84 0b       	sbc	r24, r20
     f50:	ba f0       	brmi	.+46     	; 0xf80 <__addsf3x+0x9c>
     f52:	91 50       	subi	r25, 0x01	; 1
     f54:	a1 f0       	breq	.+40     	; 0xf7e <__addsf3x+0x9a>
     f56:	ff 0f       	add	r31, r31
     f58:	bb 1f       	adc	r27, r27
     f5a:	66 1f       	adc	r22, r22
     f5c:	77 1f       	adc	r23, r23
     f5e:	88 1f       	adc	r24, r24
     f60:	c2 f7       	brpl	.-16     	; 0xf52 <__addsf3x+0x6e>
     f62:	0e c0       	rjmp	.+28     	; 0xf80 <__addsf3x+0x9c>
     f64:	ba 0f       	add	r27, r26
     f66:	62 1f       	adc	r22, r18
     f68:	73 1f       	adc	r23, r19
     f6a:	84 1f       	adc	r24, r20
     f6c:	48 f4       	brcc	.+18     	; 0xf80 <__addsf3x+0x9c>
     f6e:	87 95       	ror	r24
     f70:	77 95       	ror	r23
     f72:	67 95       	ror	r22
     f74:	b7 95       	ror	r27
     f76:	f7 95       	ror	r31
     f78:	9e 3f       	cpi	r25, 0xFE	; 254
     f7a:	08 f0       	brcs	.+2      	; 0xf7e <__addsf3x+0x9a>
     f7c:	b0 cf       	rjmp	.-160    	; 0xede <__addsf3+0x28>
     f7e:	93 95       	inc	r25
     f80:	88 0f       	add	r24, r24
     f82:	08 f0       	brcs	.+2      	; 0xf86 <__addsf3x+0xa2>
     f84:	99 27       	eor	r25, r25
     f86:	ee 0f       	add	r30, r30
     f88:	97 95       	ror	r25
     f8a:	87 95       	ror	r24
     f8c:	08 95       	ret

00000f8e <cos>:
     f8e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__fp_rempio2>
     f92:	e3 95       	inc	r30
     f94:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__fp_sinus>

00000f98 <__divsf3>:
     f98:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <__divsf3x>
     f9c:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <__fp_round>
     fa0:	0e 94 48 09 	call	0x1290	; 0x1290 <__fp_pscB>
     fa4:	58 f0       	brcs	.+22     	; 0xfbc <__divsf3+0x24>
     fa6:	0e 94 41 09 	call	0x1282	; 0x1282 <__fp_pscA>
     faa:	40 f0       	brcs	.+16     	; 0xfbc <__divsf3+0x24>
     fac:	29 f4       	brne	.+10     	; 0xfb8 <__divsf3+0x20>
     fae:	5f 3f       	cpi	r21, 0xFF	; 255
     fb0:	29 f0       	breq	.+10     	; 0xfbc <__divsf3+0x24>
     fb2:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__fp_inf>
     fb6:	51 11       	cpse	r21, r1
     fb8:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__fp_szero>
     fbc:	0c 94 17 09 	jmp	0x122e	; 0x122e <__fp_nan>

00000fc0 <__divsf3x>:
     fc0:	0e 94 9f 09 	call	0x133e	; 0x133e <__fp_split3>
     fc4:	68 f3       	brcs	.-38     	; 0xfa0 <__divsf3+0x8>

00000fc6 <__divsf3_pse>:
     fc6:	99 23       	and	r25, r25
     fc8:	b1 f3       	breq	.-20     	; 0xfb6 <__divsf3+0x1e>
     fca:	55 23       	and	r21, r21
     fcc:	91 f3       	breq	.-28     	; 0xfb2 <__divsf3+0x1a>
     fce:	95 1b       	sub	r25, r21
     fd0:	55 0b       	sbc	r21, r21
     fd2:	bb 27       	eor	r27, r27
     fd4:	aa 27       	eor	r26, r26
     fd6:	62 17       	cp	r22, r18
     fd8:	73 07       	cpc	r23, r19
     fda:	84 07       	cpc	r24, r20
     fdc:	38 f0       	brcs	.+14     	; 0xfec <__divsf3_pse+0x26>
     fde:	9f 5f       	subi	r25, 0xFF	; 255
     fe0:	5f 4f       	sbci	r21, 0xFF	; 255
     fe2:	22 0f       	add	r18, r18
     fe4:	33 1f       	adc	r19, r19
     fe6:	44 1f       	adc	r20, r20
     fe8:	aa 1f       	adc	r26, r26
     fea:	a9 f3       	breq	.-22     	; 0xfd6 <__divsf3_pse+0x10>
     fec:	35 d0       	rcall	.+106    	; 0x1058 <__divsf3_pse+0x92>
     fee:	0e 2e       	mov	r0, r30
     ff0:	3a f0       	brmi	.+14     	; 0x1000 <__divsf3_pse+0x3a>
     ff2:	e0 e8       	ldi	r30, 0x80	; 128
     ff4:	32 d0       	rcall	.+100    	; 0x105a <__divsf3_pse+0x94>
     ff6:	91 50       	subi	r25, 0x01	; 1
     ff8:	50 40       	sbci	r21, 0x00	; 0
     ffa:	e6 95       	lsr	r30
     ffc:	00 1c       	adc	r0, r0
     ffe:	ca f7       	brpl	.-14     	; 0xff2 <__divsf3_pse+0x2c>
    1000:	2b d0       	rcall	.+86     	; 0x1058 <__divsf3_pse+0x92>
    1002:	fe 2f       	mov	r31, r30
    1004:	29 d0       	rcall	.+82     	; 0x1058 <__divsf3_pse+0x92>
    1006:	66 0f       	add	r22, r22
    1008:	77 1f       	adc	r23, r23
    100a:	88 1f       	adc	r24, r24
    100c:	bb 1f       	adc	r27, r27
    100e:	26 17       	cp	r18, r22
    1010:	37 07       	cpc	r19, r23
    1012:	48 07       	cpc	r20, r24
    1014:	ab 07       	cpc	r26, r27
    1016:	b0 e8       	ldi	r27, 0x80	; 128
    1018:	09 f0       	breq	.+2      	; 0x101c <__divsf3_pse+0x56>
    101a:	bb 0b       	sbc	r27, r27
    101c:	80 2d       	mov	r24, r0
    101e:	bf 01       	movw	r22, r30
    1020:	ff 27       	eor	r31, r31
    1022:	93 58       	subi	r25, 0x83	; 131
    1024:	5f 4f       	sbci	r21, 0xFF	; 255
    1026:	3a f0       	brmi	.+14     	; 0x1036 <__divsf3_pse+0x70>
    1028:	9e 3f       	cpi	r25, 0xFE	; 254
    102a:	51 05       	cpc	r21, r1
    102c:	78 f0       	brcs	.+30     	; 0x104c <__divsf3_pse+0x86>
    102e:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__fp_inf>
    1032:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__fp_szero>
    1036:	5f 3f       	cpi	r21, 0xFF	; 255
    1038:	e4 f3       	brlt	.-8      	; 0x1032 <__divsf3_pse+0x6c>
    103a:	98 3e       	cpi	r25, 0xE8	; 232
    103c:	d4 f3       	brlt	.-12     	; 0x1032 <__divsf3_pse+0x6c>
    103e:	86 95       	lsr	r24
    1040:	77 95       	ror	r23
    1042:	67 95       	ror	r22
    1044:	b7 95       	ror	r27
    1046:	f7 95       	ror	r31
    1048:	9f 5f       	subi	r25, 0xFF	; 255
    104a:	c9 f7       	brne	.-14     	; 0x103e <__divsf3_pse+0x78>
    104c:	88 0f       	add	r24, r24
    104e:	91 1d       	adc	r25, r1
    1050:	96 95       	lsr	r25
    1052:	87 95       	ror	r24
    1054:	97 f9       	bld	r25, 7
    1056:	08 95       	ret
    1058:	e1 e0       	ldi	r30, 0x01	; 1
    105a:	66 0f       	add	r22, r22
    105c:	77 1f       	adc	r23, r23
    105e:	88 1f       	adc	r24, r24
    1060:	bb 1f       	adc	r27, r27
    1062:	62 17       	cp	r22, r18
    1064:	73 07       	cpc	r23, r19
    1066:	84 07       	cpc	r24, r20
    1068:	ba 07       	cpc	r27, r26
    106a:	20 f0       	brcs	.+8      	; 0x1074 <__divsf3_pse+0xae>
    106c:	62 1b       	sub	r22, r18
    106e:	73 0b       	sbc	r23, r19
    1070:	84 0b       	sbc	r24, r20
    1072:	ba 0b       	sbc	r27, r26
    1074:	ee 1f       	adc	r30, r30
    1076:	88 f7       	brcc	.-30     	; 0x105a <__divsf3_pse+0x94>
    1078:	e0 95       	com	r30
    107a:	08 95       	ret

0000107c <__fixsfsi>:
    107c:	0e 94 45 08 	call	0x108a	; 0x108a <__fixunssfsi>
    1080:	68 94       	set
    1082:	b1 11       	cpse	r27, r1
    1084:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__fp_szero>
    1088:	08 95       	ret

0000108a <__fixunssfsi>:
    108a:	0e 94 a7 09 	call	0x134e	; 0x134e <__fp_splitA>
    108e:	88 f0       	brcs	.+34     	; 0x10b2 <__fixunssfsi+0x28>
    1090:	9f 57       	subi	r25, 0x7F	; 127
    1092:	98 f0       	brcs	.+38     	; 0x10ba <__fixunssfsi+0x30>
    1094:	b9 2f       	mov	r27, r25
    1096:	99 27       	eor	r25, r25
    1098:	b7 51       	subi	r27, 0x17	; 23
    109a:	b0 f0       	brcs	.+44     	; 0x10c8 <__fixunssfsi+0x3e>
    109c:	e1 f0       	breq	.+56     	; 0x10d6 <__fixunssfsi+0x4c>
    109e:	66 0f       	add	r22, r22
    10a0:	77 1f       	adc	r23, r23
    10a2:	88 1f       	adc	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	1a f0       	brmi	.+6      	; 0x10ae <__fixunssfsi+0x24>
    10a8:	ba 95       	dec	r27
    10aa:	c9 f7       	brne	.-14     	; 0x109e <__fixunssfsi+0x14>
    10ac:	14 c0       	rjmp	.+40     	; 0x10d6 <__fixunssfsi+0x4c>
    10ae:	b1 30       	cpi	r27, 0x01	; 1
    10b0:	91 f0       	breq	.+36     	; 0x10d6 <__fixunssfsi+0x4c>
    10b2:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__fp_zero>
    10b6:	b1 e0       	ldi	r27, 0x01	; 1
    10b8:	08 95       	ret
    10ba:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <__fp_zero>
    10be:	67 2f       	mov	r22, r23
    10c0:	78 2f       	mov	r23, r24
    10c2:	88 27       	eor	r24, r24
    10c4:	b8 5f       	subi	r27, 0xF8	; 248
    10c6:	39 f0       	breq	.+14     	; 0x10d6 <__fixunssfsi+0x4c>
    10c8:	b9 3f       	cpi	r27, 0xF9	; 249
    10ca:	cc f3       	brlt	.-14     	; 0x10be <__fixunssfsi+0x34>
    10cc:	86 95       	lsr	r24
    10ce:	77 95       	ror	r23
    10d0:	67 95       	ror	r22
    10d2:	b3 95       	inc	r27
    10d4:	d9 f7       	brne	.-10     	; 0x10cc <__fixunssfsi+0x42>
    10d6:	3e f4       	brtc	.+14     	; 0x10e6 <__fixunssfsi+0x5c>
    10d8:	90 95       	com	r25
    10da:	80 95       	com	r24
    10dc:	70 95       	com	r23
    10de:	61 95       	neg	r22
    10e0:	7f 4f       	sbci	r23, 0xFF	; 255
    10e2:	8f 4f       	sbci	r24, 0xFF	; 255
    10e4:	9f 4f       	sbci	r25, 0xFF	; 255
    10e6:	08 95       	ret

000010e8 <__floatunsisf>:
    10e8:	e8 94       	clt
    10ea:	09 c0       	rjmp	.+18     	; 0x10fe <__floatsisf+0x12>

000010ec <__floatsisf>:
    10ec:	97 fb       	bst	r25, 7
    10ee:	3e f4       	brtc	.+14     	; 0x10fe <__floatsisf+0x12>
    10f0:	90 95       	com	r25
    10f2:	80 95       	com	r24
    10f4:	70 95       	com	r23
    10f6:	61 95       	neg	r22
    10f8:	7f 4f       	sbci	r23, 0xFF	; 255
    10fa:	8f 4f       	sbci	r24, 0xFF	; 255
    10fc:	9f 4f       	sbci	r25, 0xFF	; 255
    10fe:	99 23       	and	r25, r25
    1100:	a9 f0       	breq	.+42     	; 0x112c <__floatsisf+0x40>
    1102:	f9 2f       	mov	r31, r25
    1104:	96 e9       	ldi	r25, 0x96	; 150
    1106:	bb 27       	eor	r27, r27
    1108:	93 95       	inc	r25
    110a:	f6 95       	lsr	r31
    110c:	87 95       	ror	r24
    110e:	77 95       	ror	r23
    1110:	67 95       	ror	r22
    1112:	b7 95       	ror	r27
    1114:	f1 11       	cpse	r31, r1
    1116:	f8 cf       	rjmp	.-16     	; 0x1108 <__floatsisf+0x1c>
    1118:	fa f4       	brpl	.+62     	; 0x1158 <__floatsisf+0x6c>
    111a:	bb 0f       	add	r27, r27
    111c:	11 f4       	brne	.+4      	; 0x1122 <__floatsisf+0x36>
    111e:	60 ff       	sbrs	r22, 0
    1120:	1b c0       	rjmp	.+54     	; 0x1158 <__floatsisf+0x6c>
    1122:	6f 5f       	subi	r22, 0xFF	; 255
    1124:	7f 4f       	sbci	r23, 0xFF	; 255
    1126:	8f 4f       	sbci	r24, 0xFF	; 255
    1128:	9f 4f       	sbci	r25, 0xFF	; 255
    112a:	16 c0       	rjmp	.+44     	; 0x1158 <__floatsisf+0x6c>
    112c:	88 23       	and	r24, r24
    112e:	11 f0       	breq	.+4      	; 0x1134 <__floatsisf+0x48>
    1130:	96 e9       	ldi	r25, 0x96	; 150
    1132:	11 c0       	rjmp	.+34     	; 0x1156 <__floatsisf+0x6a>
    1134:	77 23       	and	r23, r23
    1136:	21 f0       	breq	.+8      	; 0x1140 <__floatsisf+0x54>
    1138:	9e e8       	ldi	r25, 0x8E	; 142
    113a:	87 2f       	mov	r24, r23
    113c:	76 2f       	mov	r23, r22
    113e:	05 c0       	rjmp	.+10     	; 0x114a <__floatsisf+0x5e>
    1140:	66 23       	and	r22, r22
    1142:	71 f0       	breq	.+28     	; 0x1160 <__floatsisf+0x74>
    1144:	96 e8       	ldi	r25, 0x86	; 134
    1146:	86 2f       	mov	r24, r22
    1148:	70 e0       	ldi	r23, 0x00	; 0
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	2a f0       	brmi	.+10     	; 0x1158 <__floatsisf+0x6c>
    114e:	9a 95       	dec	r25
    1150:	66 0f       	add	r22, r22
    1152:	77 1f       	adc	r23, r23
    1154:	88 1f       	adc	r24, r24
    1156:	da f7       	brpl	.-10     	; 0x114e <__floatsisf+0x62>
    1158:	88 0f       	add	r24, r24
    115a:	96 95       	lsr	r25
    115c:	87 95       	ror	r24
    115e:	97 f9       	bld	r25, 7
    1160:	08 95       	ret

00001162 <floor>:
    1162:	0e 94 c1 09 	call	0x1382	; 0x1382 <__fp_trunc>
    1166:	90 f0       	brcs	.+36     	; 0x118c <floor+0x2a>
    1168:	9f 37       	cpi	r25, 0x7F	; 127
    116a:	48 f4       	brcc	.+18     	; 0x117e <floor+0x1c>
    116c:	91 11       	cpse	r25, r1
    116e:	16 f0       	brts	.+4      	; 0x1174 <floor+0x12>
    1170:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__fp_szero>
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	70 e0       	ldi	r23, 0x00	; 0
    1178:	80 e8       	ldi	r24, 0x80	; 128
    117a:	9f eb       	ldi	r25, 0xBF	; 191
    117c:	08 95       	ret
    117e:	26 f4       	brtc	.+8      	; 0x1188 <floor+0x26>
    1180:	1b 16       	cp	r1, r27
    1182:	61 1d       	adc	r22, r1
    1184:	71 1d       	adc	r23, r1
    1186:	81 1d       	adc	r24, r1
    1188:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__fp_mintl>
    118c:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__fp_mpack>

00001190 <__fp_arccos>:
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	1f 93       	push	r17
    1196:	0f 93       	push	r16
    1198:	8b 01       	movw	r16, r22
    119a:	ec 01       	movw	r28, r24
    119c:	e4 eb       	ldi	r30, 0xB4	; 180
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	0e 94 1a 09 	call	0x1234	; 0x1234 <__fp_powser>
    11a4:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <__fp_round>
    11a8:	98 01       	movw	r18, r16
    11aa:	ae 01       	movw	r20, r28
    11ac:	8b 01       	movw	r16, r22
    11ae:	ec 01       	movw	r28, r24
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	80 e8       	ldi	r24, 0x80	; 128
    11b6:	9f e3       	ldi	r25, 0x3F	; 63
    11b8:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__subsf3>
    11bc:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <sqrt>
    11c0:	98 01       	movw	r18, r16
    11c2:	ae 01       	movw	r20, r28
    11c4:	0f 91       	pop	r16
    11c6:	1f 91       	pop	r17
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	0c 94 f3 09 	jmp	0x13e6	; 0x13e6 <__mulsf3x>

000011d0 <__fp_inf>:
    11d0:	97 f9       	bld	r25, 7
    11d2:	9f 67       	ori	r25, 0x7F	; 127
    11d4:	80 e8       	ldi	r24, 0x80	; 128
    11d6:	70 e0       	ldi	r23, 0x00	; 0
    11d8:	60 e0       	ldi	r22, 0x00	; 0
    11da:	08 95       	ret

000011dc <__fp_mintl>:
    11dc:	88 23       	and	r24, r24
    11de:	71 f4       	brne	.+28     	; 0x11fc <__fp_mintl+0x20>
    11e0:	77 23       	and	r23, r23
    11e2:	21 f0       	breq	.+8      	; 0x11ec <__fp_mintl+0x10>
    11e4:	98 50       	subi	r25, 0x08	; 8
    11e6:	87 2b       	or	r24, r23
    11e8:	76 2f       	mov	r23, r22
    11ea:	07 c0       	rjmp	.+14     	; 0x11fa <__fp_mintl+0x1e>
    11ec:	66 23       	and	r22, r22
    11ee:	11 f4       	brne	.+4      	; 0x11f4 <__fp_mintl+0x18>
    11f0:	99 27       	eor	r25, r25
    11f2:	0d c0       	rjmp	.+26     	; 0x120e <__fp_mintl+0x32>
    11f4:	90 51       	subi	r25, 0x10	; 16
    11f6:	86 2b       	or	r24, r22
    11f8:	70 e0       	ldi	r23, 0x00	; 0
    11fa:	60 e0       	ldi	r22, 0x00	; 0
    11fc:	2a f0       	brmi	.+10     	; 0x1208 <__fp_mintl+0x2c>
    11fe:	9a 95       	dec	r25
    1200:	66 0f       	add	r22, r22
    1202:	77 1f       	adc	r23, r23
    1204:	88 1f       	adc	r24, r24
    1206:	da f7       	brpl	.-10     	; 0x11fe <__fp_mintl+0x22>
    1208:	88 0f       	add	r24, r24
    120a:	96 95       	lsr	r25
    120c:	87 95       	ror	r24
    120e:	97 f9       	bld	r25, 7
    1210:	08 95       	ret

00001212 <__fp_mpack>:
    1212:	9f 3f       	cpi	r25, 0xFF	; 255
    1214:	31 f0       	breq	.+12     	; 0x1222 <__fp_mpack_finite+0xc>

00001216 <__fp_mpack_finite>:
    1216:	91 50       	subi	r25, 0x01	; 1
    1218:	20 f4       	brcc	.+8      	; 0x1222 <__fp_mpack_finite+0xc>
    121a:	87 95       	ror	r24
    121c:	77 95       	ror	r23
    121e:	67 95       	ror	r22
    1220:	b7 95       	ror	r27
    1222:	88 0f       	add	r24, r24
    1224:	91 1d       	adc	r25, r1
    1226:	96 95       	lsr	r25
    1228:	87 95       	ror	r24
    122a:	97 f9       	bld	r25, 7
    122c:	08 95       	ret

0000122e <__fp_nan>:
    122e:	9f ef       	ldi	r25, 0xFF	; 255
    1230:	80 ec       	ldi	r24, 0xC0	; 192
    1232:	08 95       	ret

00001234 <__fp_powser>:
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	1f 93       	push	r17
    123a:	0f 93       	push	r16
    123c:	ff 92       	push	r15
    123e:	ef 92       	push	r14
    1240:	df 92       	push	r13
    1242:	7b 01       	movw	r14, r22
    1244:	8c 01       	movw	r16, r24
    1246:	68 94       	set
    1248:	06 c0       	rjmp	.+12     	; 0x1256 <__fp_powser+0x22>
    124a:	da 2e       	mov	r13, r26
    124c:	ef 01       	movw	r28, r30
    124e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__mulsf3x>
    1252:	fe 01       	movw	r30, r28
    1254:	e8 94       	clt
    1256:	a5 91       	lpm	r26, Z+
    1258:	25 91       	lpm	r18, Z+
    125a:	35 91       	lpm	r19, Z+
    125c:	45 91       	lpm	r20, Z+
    125e:	55 91       	lpm	r21, Z+
    1260:	a6 f3       	brts	.-24     	; 0x124a <__fp_powser+0x16>
    1262:	ef 01       	movw	r28, r30
    1264:	0e 94 72 07 	call	0xee4	; 0xee4 <__addsf3x>
    1268:	fe 01       	movw	r30, r28
    126a:	97 01       	movw	r18, r14
    126c:	a8 01       	movw	r20, r16
    126e:	da 94       	dec	r13
    1270:	69 f7       	brne	.-38     	; 0x124c <__fp_powser+0x18>
    1272:	df 90       	pop	r13
    1274:	ef 90       	pop	r14
    1276:	ff 90       	pop	r15
    1278:	0f 91       	pop	r16
    127a:	1f 91       	pop	r17
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <__fp_pscA>:
    1282:	00 24       	eor	r0, r0
    1284:	0a 94       	dec	r0
    1286:	16 16       	cp	r1, r22
    1288:	17 06       	cpc	r1, r23
    128a:	18 06       	cpc	r1, r24
    128c:	09 06       	cpc	r0, r25
    128e:	08 95       	ret

00001290 <__fp_pscB>:
    1290:	00 24       	eor	r0, r0
    1292:	0a 94       	dec	r0
    1294:	12 16       	cp	r1, r18
    1296:	13 06       	cpc	r1, r19
    1298:	14 06       	cpc	r1, r20
    129a:	05 06       	cpc	r0, r21
    129c:	08 95       	ret
    129e:	0c 94 17 09 	jmp	0x122e	; 0x122e <__fp_nan>

000012a2 <__fp_rempio2>:
    12a2:	0e 94 a7 09 	call	0x134e	; 0x134e <__fp_splitA>
    12a6:	d8 f3       	brcs	.-10     	; 0x129e <__fp_pscB+0xe>
    12a8:	e8 94       	clt
    12aa:	e0 e0       	ldi	r30, 0x00	; 0
    12ac:	bb 27       	eor	r27, r27
    12ae:	9f 57       	subi	r25, 0x7F	; 127
    12b0:	f0 f0       	brcs	.+60     	; 0x12ee <__fp_rempio2+0x4c>
    12b2:	2a ed       	ldi	r18, 0xDA	; 218
    12b4:	3f e0       	ldi	r19, 0x0F	; 15
    12b6:	49 ec       	ldi	r20, 0xC9	; 201
    12b8:	06 c0       	rjmp	.+12     	; 0x12c6 <__fp_rempio2+0x24>
    12ba:	ee 0f       	add	r30, r30
    12bc:	bb 0f       	add	r27, r27
    12be:	66 1f       	adc	r22, r22
    12c0:	77 1f       	adc	r23, r23
    12c2:	88 1f       	adc	r24, r24
    12c4:	28 f0       	brcs	.+10     	; 0x12d0 <__fp_rempio2+0x2e>
    12c6:	b2 3a       	cpi	r27, 0xA2	; 162
    12c8:	62 07       	cpc	r22, r18
    12ca:	73 07       	cpc	r23, r19
    12cc:	84 07       	cpc	r24, r20
    12ce:	28 f0       	brcs	.+10     	; 0x12da <__fp_rempio2+0x38>
    12d0:	b2 5a       	subi	r27, 0xA2	; 162
    12d2:	62 0b       	sbc	r22, r18
    12d4:	73 0b       	sbc	r23, r19
    12d6:	84 0b       	sbc	r24, r20
    12d8:	e3 95       	inc	r30
    12da:	9a 95       	dec	r25
    12dc:	72 f7       	brpl	.-36     	; 0x12ba <__fp_rempio2+0x18>
    12de:	80 38       	cpi	r24, 0x80	; 128
    12e0:	30 f4       	brcc	.+12     	; 0x12ee <__fp_rempio2+0x4c>
    12e2:	9a 95       	dec	r25
    12e4:	bb 0f       	add	r27, r27
    12e6:	66 1f       	adc	r22, r22
    12e8:	77 1f       	adc	r23, r23
    12ea:	88 1f       	adc	r24, r24
    12ec:	d2 f7       	brpl	.-12     	; 0x12e2 <__fp_rempio2+0x40>
    12ee:	90 48       	sbci	r25, 0x80	; 128
    12f0:	0c 94 0b 09 	jmp	0x1216	; 0x1216 <__fp_mpack_finite>

000012f4 <__fp_round>:
    12f4:	09 2e       	mov	r0, r25
    12f6:	03 94       	inc	r0
    12f8:	00 0c       	add	r0, r0
    12fa:	11 f4       	brne	.+4      	; 0x1300 <__fp_round+0xc>
    12fc:	88 23       	and	r24, r24
    12fe:	52 f0       	brmi	.+20     	; 0x1314 <__fp_round+0x20>
    1300:	bb 0f       	add	r27, r27
    1302:	40 f4       	brcc	.+16     	; 0x1314 <__fp_round+0x20>
    1304:	bf 2b       	or	r27, r31
    1306:	11 f4       	brne	.+4      	; 0x130c <__fp_round+0x18>
    1308:	60 ff       	sbrs	r22, 0
    130a:	04 c0       	rjmp	.+8      	; 0x1314 <__fp_round+0x20>
    130c:	6f 5f       	subi	r22, 0xFF	; 255
    130e:	7f 4f       	sbci	r23, 0xFF	; 255
    1310:	8f 4f       	sbci	r24, 0xFF	; 255
    1312:	9f 4f       	sbci	r25, 0xFF	; 255
    1314:	08 95       	ret

00001316 <__fp_sinus>:
    1316:	ef 93       	push	r30
    1318:	e0 ff       	sbrs	r30, 0
    131a:	07 c0       	rjmp	.+14     	; 0x132a <__fp_sinus+0x14>
    131c:	a2 ea       	ldi	r26, 0xA2	; 162
    131e:	2a ed       	ldi	r18, 0xDA	; 218
    1320:	3f e0       	ldi	r19, 0x0F	; 15
    1322:	49 ec       	ldi	r20, 0xC9	; 201
    1324:	5f eb       	ldi	r21, 0xBF	; 191
    1326:	0e 94 72 07 	call	0xee4	; 0xee4 <__addsf3x>
    132a:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <__fp_round>
    132e:	0f 90       	pop	r0
    1330:	03 94       	inc	r0
    1332:	01 fc       	sbrc	r0, 1
    1334:	90 58       	subi	r25, 0x80	; 128
    1336:	ec ed       	ldi	r30, 0xDC	; 220
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__fp_powsodd>

0000133e <__fp_split3>:
    133e:	57 fd       	sbrc	r21, 7
    1340:	90 58       	subi	r25, 0x80	; 128
    1342:	44 0f       	add	r20, r20
    1344:	55 1f       	adc	r21, r21
    1346:	59 f0       	breq	.+22     	; 0x135e <__fp_splitA+0x10>
    1348:	5f 3f       	cpi	r21, 0xFF	; 255
    134a:	71 f0       	breq	.+28     	; 0x1368 <__fp_splitA+0x1a>
    134c:	47 95       	ror	r20

0000134e <__fp_splitA>:
    134e:	88 0f       	add	r24, r24
    1350:	97 fb       	bst	r25, 7
    1352:	99 1f       	adc	r25, r25
    1354:	61 f0       	breq	.+24     	; 0x136e <__fp_splitA+0x20>
    1356:	9f 3f       	cpi	r25, 0xFF	; 255
    1358:	79 f0       	breq	.+30     	; 0x1378 <__fp_splitA+0x2a>
    135a:	87 95       	ror	r24
    135c:	08 95       	ret
    135e:	12 16       	cp	r1, r18
    1360:	13 06       	cpc	r1, r19
    1362:	14 06       	cpc	r1, r20
    1364:	55 1f       	adc	r21, r21
    1366:	f2 cf       	rjmp	.-28     	; 0x134c <__fp_split3+0xe>
    1368:	46 95       	lsr	r20
    136a:	f1 df       	rcall	.-30     	; 0x134e <__fp_splitA>
    136c:	08 c0       	rjmp	.+16     	; 0x137e <__fp_splitA+0x30>
    136e:	16 16       	cp	r1, r22
    1370:	17 06       	cpc	r1, r23
    1372:	18 06       	cpc	r1, r24
    1374:	99 1f       	adc	r25, r25
    1376:	f1 cf       	rjmp	.-30     	; 0x135a <__fp_splitA+0xc>
    1378:	86 95       	lsr	r24
    137a:	71 05       	cpc	r23, r1
    137c:	61 05       	cpc	r22, r1
    137e:	08 94       	sec
    1380:	08 95       	ret

00001382 <__fp_trunc>:
    1382:	0e 94 a7 09 	call	0x134e	; 0x134e <__fp_splitA>
    1386:	a0 f0       	brcs	.+40     	; 0x13b0 <__fp_trunc+0x2e>
    1388:	be e7       	ldi	r27, 0x7E	; 126
    138a:	b9 17       	cp	r27, r25
    138c:	88 f4       	brcc	.+34     	; 0x13b0 <__fp_trunc+0x2e>
    138e:	bb 27       	eor	r27, r27
    1390:	9f 38       	cpi	r25, 0x8F	; 143
    1392:	60 f4       	brcc	.+24     	; 0x13ac <__fp_trunc+0x2a>
    1394:	16 16       	cp	r1, r22
    1396:	b1 1d       	adc	r27, r1
    1398:	67 2f       	mov	r22, r23
    139a:	78 2f       	mov	r23, r24
    139c:	88 27       	eor	r24, r24
    139e:	98 5f       	subi	r25, 0xF8	; 248
    13a0:	f7 cf       	rjmp	.-18     	; 0x1390 <__fp_trunc+0xe>
    13a2:	86 95       	lsr	r24
    13a4:	77 95       	ror	r23
    13a6:	67 95       	ror	r22
    13a8:	b1 1d       	adc	r27, r1
    13aa:	93 95       	inc	r25
    13ac:	96 39       	cpi	r25, 0x96	; 150
    13ae:	c8 f3       	brcs	.-14     	; 0x13a2 <__fp_trunc+0x20>
    13b0:	08 95       	ret

000013b2 <__fp_zero>:
    13b2:	e8 94       	clt

000013b4 <__fp_szero>:
    13b4:	bb 27       	eor	r27, r27
    13b6:	66 27       	eor	r22, r22
    13b8:	77 27       	eor	r23, r23
    13ba:	cb 01       	movw	r24, r22
    13bc:	97 f9       	bld	r25, 7
    13be:	08 95       	ret

000013c0 <__mulsf3>:
    13c0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__mulsf3x>
    13c4:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <__fp_round>
    13c8:	0e 94 41 09 	call	0x1282	; 0x1282 <__fp_pscA>
    13cc:	38 f0       	brcs	.+14     	; 0x13dc <__mulsf3+0x1c>
    13ce:	0e 94 48 09 	call	0x1290	; 0x1290 <__fp_pscB>
    13d2:	20 f0       	brcs	.+8      	; 0x13dc <__mulsf3+0x1c>
    13d4:	95 23       	and	r25, r21
    13d6:	11 f0       	breq	.+4      	; 0x13dc <__mulsf3+0x1c>
    13d8:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__fp_inf>
    13dc:	0c 94 17 09 	jmp	0x122e	; 0x122e <__fp_nan>
    13e0:	11 24       	eor	r1, r1
    13e2:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__fp_szero>

000013e6 <__mulsf3x>:
    13e6:	0e 94 9f 09 	call	0x133e	; 0x133e <__fp_split3>
    13ea:	70 f3       	brcs	.-36     	; 0x13c8 <__mulsf3+0x8>

000013ec <__mulsf3_pse>:
    13ec:	95 9f       	mul	r25, r21
    13ee:	c1 f3       	breq	.-16     	; 0x13e0 <__mulsf3+0x20>
    13f0:	95 0f       	add	r25, r21
    13f2:	50 e0       	ldi	r21, 0x00	; 0
    13f4:	55 1f       	adc	r21, r21
    13f6:	62 9f       	mul	r22, r18
    13f8:	f0 01       	movw	r30, r0
    13fa:	72 9f       	mul	r23, r18
    13fc:	bb 27       	eor	r27, r27
    13fe:	f0 0d       	add	r31, r0
    1400:	b1 1d       	adc	r27, r1
    1402:	63 9f       	mul	r22, r19
    1404:	aa 27       	eor	r26, r26
    1406:	f0 0d       	add	r31, r0
    1408:	b1 1d       	adc	r27, r1
    140a:	aa 1f       	adc	r26, r26
    140c:	64 9f       	mul	r22, r20
    140e:	66 27       	eor	r22, r22
    1410:	b0 0d       	add	r27, r0
    1412:	a1 1d       	adc	r26, r1
    1414:	66 1f       	adc	r22, r22
    1416:	82 9f       	mul	r24, r18
    1418:	22 27       	eor	r18, r18
    141a:	b0 0d       	add	r27, r0
    141c:	a1 1d       	adc	r26, r1
    141e:	62 1f       	adc	r22, r18
    1420:	73 9f       	mul	r23, r19
    1422:	b0 0d       	add	r27, r0
    1424:	a1 1d       	adc	r26, r1
    1426:	62 1f       	adc	r22, r18
    1428:	83 9f       	mul	r24, r19
    142a:	a0 0d       	add	r26, r0
    142c:	61 1d       	adc	r22, r1
    142e:	22 1f       	adc	r18, r18
    1430:	74 9f       	mul	r23, r20
    1432:	33 27       	eor	r19, r19
    1434:	a0 0d       	add	r26, r0
    1436:	61 1d       	adc	r22, r1
    1438:	23 1f       	adc	r18, r19
    143a:	84 9f       	mul	r24, r20
    143c:	60 0d       	add	r22, r0
    143e:	21 1d       	adc	r18, r1
    1440:	82 2f       	mov	r24, r18
    1442:	76 2f       	mov	r23, r22
    1444:	6a 2f       	mov	r22, r26
    1446:	11 24       	eor	r1, r1
    1448:	9f 57       	subi	r25, 0x7F	; 127
    144a:	50 40       	sbci	r21, 0x00	; 0
    144c:	9a f0       	brmi	.+38     	; 0x1474 <__mulsf3_pse+0x88>
    144e:	f1 f0       	breq	.+60     	; 0x148c <__mulsf3_pse+0xa0>
    1450:	88 23       	and	r24, r24
    1452:	4a f0       	brmi	.+18     	; 0x1466 <__mulsf3_pse+0x7a>
    1454:	ee 0f       	add	r30, r30
    1456:	ff 1f       	adc	r31, r31
    1458:	bb 1f       	adc	r27, r27
    145a:	66 1f       	adc	r22, r22
    145c:	77 1f       	adc	r23, r23
    145e:	88 1f       	adc	r24, r24
    1460:	91 50       	subi	r25, 0x01	; 1
    1462:	50 40       	sbci	r21, 0x00	; 0
    1464:	a9 f7       	brne	.-22     	; 0x1450 <__mulsf3_pse+0x64>
    1466:	9e 3f       	cpi	r25, 0xFE	; 254
    1468:	51 05       	cpc	r21, r1
    146a:	80 f0       	brcs	.+32     	; 0x148c <__mulsf3_pse+0xa0>
    146c:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__fp_inf>
    1470:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__fp_szero>
    1474:	5f 3f       	cpi	r21, 0xFF	; 255
    1476:	e4 f3       	brlt	.-8      	; 0x1470 <__mulsf3_pse+0x84>
    1478:	98 3e       	cpi	r25, 0xE8	; 232
    147a:	d4 f3       	brlt	.-12     	; 0x1470 <__mulsf3_pse+0x84>
    147c:	86 95       	lsr	r24
    147e:	77 95       	ror	r23
    1480:	67 95       	ror	r22
    1482:	b7 95       	ror	r27
    1484:	f7 95       	ror	r31
    1486:	e7 95       	ror	r30
    1488:	9f 5f       	subi	r25, 0xFF	; 255
    148a:	c1 f7       	brne	.-16     	; 0x147c <__mulsf3_pse+0x90>
    148c:	fe 2b       	or	r31, r30
    148e:	88 0f       	add	r24, r24
    1490:	91 1d       	adc	r25, r1
    1492:	96 95       	lsr	r25
    1494:	87 95       	ror	r24
    1496:	97 f9       	bld	r25, 7
    1498:	08 95       	ret
    149a:	19 f4       	brne	.+6      	; 0x14a2 <__mulsf3_pse+0xb6>
    149c:	16 f4       	brtc	.+4      	; 0x14a2 <__mulsf3_pse+0xb6>
    149e:	0c 94 17 09 	jmp	0x122e	; 0x122e <__fp_nan>
    14a2:	0c 94 09 09 	jmp	0x1212	; 0x1212 <__fp_mpack>

000014a6 <sqrt>:
    14a6:	0e 94 a7 09 	call	0x134e	; 0x134e <__fp_splitA>
    14aa:	b8 f3       	brcs	.-18     	; 0x149a <__mulsf3_pse+0xae>
    14ac:	99 23       	and	r25, r25
    14ae:	c9 f3       	breq	.-14     	; 0x14a2 <__mulsf3_pse+0xb6>
    14b0:	b6 f3       	brts	.-20     	; 0x149e <__mulsf3_pse+0xb2>
    14b2:	9f 57       	subi	r25, 0x7F	; 127
    14b4:	55 0b       	sbc	r21, r21
    14b6:	87 ff       	sbrs	r24, 7
    14b8:	0e 94 93 0a 	call	0x1526	; 0x1526 <__fp_norm2>
    14bc:	00 24       	eor	r0, r0
    14be:	a0 e6       	ldi	r26, 0x60	; 96
    14c0:	40 ea       	ldi	r20, 0xA0	; 160
    14c2:	90 01       	movw	r18, r0
    14c4:	80 58       	subi	r24, 0x80	; 128
    14c6:	56 95       	lsr	r21
    14c8:	97 95       	ror	r25
    14ca:	28 f4       	brcc	.+10     	; 0x14d6 <sqrt+0x30>
    14cc:	80 5c       	subi	r24, 0xC0	; 192
    14ce:	66 0f       	add	r22, r22
    14d0:	77 1f       	adc	r23, r23
    14d2:	88 1f       	adc	r24, r24
    14d4:	20 f0       	brcs	.+8      	; 0x14de <sqrt+0x38>
    14d6:	26 17       	cp	r18, r22
    14d8:	37 07       	cpc	r19, r23
    14da:	48 07       	cpc	r20, r24
    14dc:	30 f4       	brcc	.+12     	; 0x14ea <sqrt+0x44>
    14de:	62 1b       	sub	r22, r18
    14e0:	73 0b       	sbc	r23, r19
    14e2:	84 0b       	sbc	r24, r20
    14e4:	20 29       	or	r18, r0
    14e6:	31 29       	or	r19, r1
    14e8:	4a 2b       	or	r20, r26
    14ea:	a6 95       	lsr	r26
    14ec:	17 94       	ror	r1
    14ee:	07 94       	ror	r0
    14f0:	20 25       	eor	r18, r0
    14f2:	31 25       	eor	r19, r1
    14f4:	4a 27       	eor	r20, r26
    14f6:	58 f7       	brcc	.-42     	; 0x14ce <sqrt+0x28>
    14f8:	66 0f       	add	r22, r22
    14fa:	77 1f       	adc	r23, r23
    14fc:	88 1f       	adc	r24, r24
    14fe:	20 f0       	brcs	.+8      	; 0x1508 <sqrt+0x62>
    1500:	26 17       	cp	r18, r22
    1502:	37 07       	cpc	r19, r23
    1504:	48 07       	cpc	r20, r24
    1506:	30 f4       	brcc	.+12     	; 0x1514 <sqrt+0x6e>
    1508:	62 0b       	sbc	r22, r18
    150a:	73 0b       	sbc	r23, r19
    150c:	84 0b       	sbc	r24, r20
    150e:	20 0d       	add	r18, r0
    1510:	31 1d       	adc	r19, r1
    1512:	41 1d       	adc	r20, r1
    1514:	a0 95       	com	r26
    1516:	81 f7       	brne	.-32     	; 0x14f8 <sqrt+0x52>
    1518:	b9 01       	movw	r22, r18
    151a:	84 2f       	mov	r24, r20
    151c:	91 58       	subi	r25, 0x81	; 129
    151e:	88 0f       	add	r24, r24
    1520:	96 95       	lsr	r25
    1522:	87 95       	ror	r24
    1524:	08 95       	ret

00001526 <__fp_norm2>:
    1526:	91 50       	subi	r25, 0x01	; 1
    1528:	50 40       	sbci	r21, 0x00	; 0
    152a:	66 0f       	add	r22, r22
    152c:	77 1f       	adc	r23, r23
    152e:	88 1f       	adc	r24, r24
    1530:	d2 f7       	brpl	.-12     	; 0x1526 <__fp_norm2>
    1532:	08 95       	ret

00001534 <__fp_powsodd>:
    1534:	9f 93       	push	r25
    1536:	8f 93       	push	r24
    1538:	7f 93       	push	r23
    153a:	6f 93       	push	r22
    153c:	ff 93       	push	r31
    153e:	ef 93       	push	r30
    1540:	9b 01       	movw	r18, r22
    1542:	ac 01       	movw	r20, r24
    1544:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__mulsf3>
    1548:	ef 91       	pop	r30
    154a:	ff 91       	pop	r31
    154c:	0e 94 1a 09 	call	0x1234	; 0x1234 <__fp_powser>
    1550:	2f 91       	pop	r18
    1552:	3f 91       	pop	r19
    1554:	4f 91       	pop	r20
    1556:	5f 91       	pop	r21
    1558:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <__mulsf3>

0000155c <__divmodhi4>:
    155c:	97 fb       	bst	r25, 7
    155e:	07 2e       	mov	r0, r23
    1560:	16 f4       	brtc	.+4      	; 0x1566 <__divmodhi4+0xa>
    1562:	00 94       	com	r0
    1564:	07 d0       	rcall	.+14     	; 0x1574 <__divmodhi4_neg1>
    1566:	77 fd       	sbrc	r23, 7
    1568:	09 d0       	rcall	.+18     	; 0x157c <__divmodhi4_neg2>
    156a:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__udivmodhi4>
    156e:	07 fc       	sbrc	r0, 7
    1570:	05 d0       	rcall	.+10     	; 0x157c <__divmodhi4_neg2>
    1572:	3e f4       	brtc	.+14     	; 0x1582 <__divmodhi4_exit>

00001574 <__divmodhi4_neg1>:
    1574:	90 95       	com	r25
    1576:	81 95       	neg	r24
    1578:	9f 4f       	sbci	r25, 0xFF	; 255
    157a:	08 95       	ret

0000157c <__divmodhi4_neg2>:
    157c:	70 95       	com	r23
    157e:	61 95       	neg	r22
    1580:	7f 4f       	sbci	r23, 0xFF	; 255

00001582 <__divmodhi4_exit>:
    1582:	08 95       	ret

00001584 <__udivmodhi4>:
    1584:	aa 1b       	sub	r26, r26
    1586:	bb 1b       	sub	r27, r27
    1588:	51 e1       	ldi	r21, 0x11	; 17
    158a:	07 c0       	rjmp	.+14     	; 0x159a <__udivmodhi4_ep>

0000158c <__udivmodhi4_loop>:
    158c:	aa 1f       	adc	r26, r26
    158e:	bb 1f       	adc	r27, r27
    1590:	a6 17       	cp	r26, r22
    1592:	b7 07       	cpc	r27, r23
    1594:	10 f0       	brcs	.+4      	; 0x159a <__udivmodhi4_ep>
    1596:	a6 1b       	sub	r26, r22
    1598:	b7 0b       	sbc	r27, r23

0000159a <__udivmodhi4_ep>:
    159a:	88 1f       	adc	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	5a 95       	dec	r21
    15a0:	a9 f7       	brne	.-22     	; 0x158c <__udivmodhi4_loop>
    15a2:	80 95       	com	r24
    15a4:	90 95       	com	r25
    15a6:	bc 01       	movw	r22, r24
    15a8:	cd 01       	movw	r24, r26
    15aa:	08 95       	ret

000015ac <_exit>:
    15ac:	f8 94       	cli

000015ae <__stop_program>:
    15ae:	ff cf       	rjmp	.-2      	; 0x15ae <__stop_program>
