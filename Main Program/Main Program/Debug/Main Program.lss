
Main Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  000013a4  00001438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000056  008001b6  008001b6  000014ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001520  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b51  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bab  00000000  00000000  00003171  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a66  00000000  00000000  00003d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  00004784  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000727  00000000  00000000  00004a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aee  00000000  00000000  0000514b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00005c39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__ctors_end>
       4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      10:	0c 94 be 03 	jmp	0x77c	; 0x77c <__vector_4>
      14:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      18:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      1c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      20:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      24:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      28:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      2c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      30:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      34:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      38:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      3c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      40:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      44:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      48:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      4c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      50:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      54:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <__vector_21>
      58:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      5c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      60:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      64:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      68:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      6c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      70:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      74:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      78:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      7c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      80:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      84:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      88:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      8c:	0c 94 c4 01 	jmp	0x388	; 0x388 <__vector_35>
      90:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      94:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      98:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      9c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      ac:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      b0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      b4:	07 2c       	mov	r0, r7
      b6:	7a a5       	ldd	r23, Y+42	; 0x2a
      b8:	ba 6c       	ori	r27, 0xCA	; 202
      ba:	c5 90       	lpm	r12, Z+
      bc:	da 3b       	cpi	r29, 0xBA	; 186
      be:	93 65       	ori	r25, 0x53	; 83
      c0:	fc 8b       	std	Y+20, r31	; 0x14
      c2:	bc 53       	subi	r27, 0x3C	; 60
      c4:	f8 10       	cpse	r15, r8
      c6:	fd 3c       	cpi	r31, 0xCD	; 205
      c8:	56 92       	lac	Z, r5
      ca:	83 4d       	sbci	r24, 0xD3	; 211
      cc:	bd 87       	std	Y+13, r27	; 0x0d
      ce:	9d 3a       	cpi	r25, 0xAD	; 173
      d0:	b6 3d       	cpi	r27, 0xD6	; 214
      d2:	cb c9       	rjmp	.-3178   	; 0xfffff46a <__eeprom_end+0xff7ef46a>
      d4:	bf 5b       	subi	r27, 0xBF	; 191
      d6:	be 73       	andi	r27, 0x3E	; 62
      d8:	da 0f       	add	r29, r26
      da:	c9 3f       	cpi	r28, 0xF9	; 249
      dc:	05 a8       	ldd	r0, Z+53	; 0x35
      de:	4c cd       	rjmp	.-1384   	; 0xfffffb78 <__eeprom_end+0xff7efb78>
      e0:	b2 d4       	rcall	.+2404   	; 0xa46 <__stack+0x147>
      e2:	4e b9       	out	0x0e, r20	; 14
      e4:	38 36       	cpi	r19, 0x68	; 104
      e6:	a9 02       	muls	r26, r25
      e8:	0c 50       	subi	r16, 0x0C	; 12
      ea:	b9 91       	ld	r27, Y+
      ec:	86 88       	ldd	r8, Z+22	; 0x16
      ee:	08 3c       	cpi	r16, 0xC8	; 200
      f0:	a6 aa       	std	Z+54, r10	; 0x36
      f2:	aa 2a       	or	r10, r26
      f4:	be 00       	.word	0x00be	; ????
      f6:	00 00       	nop
      f8:	80 3f       	cpi	r24, 0xF0	; 240

000000fa <__ctors_end>:
      fa:	11 24       	eor	r1, r1
      fc:	1f be       	out	0x3f, r1	; 63
      fe:	cf ef       	ldi	r28, 0xFF	; 255
     100:	d8 e0       	ldi	r29, 0x08	; 8
     102:	de bf       	out	0x3e, r29	; 62
     104:	cd bf       	out	0x3d, r28	; 61

00000106 <__do_copy_data>:
     106:	11 e0       	ldi	r17, 0x01	; 1
     108:	a0 e0       	ldi	r26, 0x00	; 0
     10a:	b1 e0       	ldi	r27, 0x01	; 1
     10c:	e4 ea       	ldi	r30, 0xA4	; 164
     10e:	f3 e1       	ldi	r31, 0x13	; 19
     110:	02 c0       	rjmp	.+4      	; 0x116 <__do_copy_data+0x10>
     112:	05 90       	lpm	r0, Z+
     114:	0d 92       	st	X+, r0
     116:	a6 3b       	cpi	r26, 0xB6	; 182
     118:	b1 07       	cpc	r27, r17
     11a:	d9 f7       	brne	.-10     	; 0x112 <__do_copy_data+0xc>

0000011c <__do_clear_bss>:
     11c:	22 e0       	ldi	r18, 0x02	; 2
     11e:	a6 eb       	ldi	r26, 0xB6	; 182
     120:	b1 e0       	ldi	r27, 0x01	; 1
     122:	01 c0       	rjmp	.+2      	; 0x126 <.do_clear_bss_start>

00000124 <.do_clear_bss_loop>:
     124:	1d 92       	st	X+, r1

00000126 <.do_clear_bss_start>:
     126:	ac 30       	cpi	r26, 0x0C	; 12
     128:	b2 07       	cpc	r27, r18
     12a:	e1 f7       	brne	.-8      	; 0x124 <.do_clear_bss_loop>
     12c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <main>
     130:	0c 94 d0 09 	jmp	0x13a0	; 0x13a0 <_exit>

00000134 <__bad_interrupt>:
     134:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000138 <lcdCommand>:

	while(*StringPtr != 0x00){
		USART_send(*StringPtr);
	StringPtr++;}

}
     138:	8b b9       	out	0x0b, r24	; 11
     13a:	70 98       	cbi	0x0e, 0	; 14
     13c:	71 98       	cbi	0x0e, 1	; 14
     13e:	72 9a       	sbi	0x0e, 2	; 14
     140:	85 e0       	ldi	r24, 0x05	; 5
     142:	8a 95       	dec	r24
     144:	f1 f7       	brne	.-4      	; 0x142 <lcdCommand+0xa>
     146:	00 00       	nop
     148:	72 98       	cbi	0x0e, 2	; 14
     14a:	8f e8       	ldi	r24, 0x8F	; 143
     14c:	91 e0       	ldi	r25, 0x01	; 1
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <lcdCommand+0x16>
     152:	00 c0       	rjmp	.+0      	; 0x154 <lcdCommand+0x1c>
     154:	00 00       	nop
     156:	08 95       	ret

00000158 <lcdData>:
     158:	8b b9       	out	0x0b, r24	; 11
     15a:	70 9a       	sbi	0x0e, 0	; 14
     15c:	71 98       	cbi	0x0e, 1	; 14
     15e:	72 9a       	sbi	0x0e, 2	; 14
     160:	85 e0       	ldi	r24, 0x05	; 5
     162:	8a 95       	dec	r24
     164:	f1 f7       	brne	.-4      	; 0x162 <lcdData+0xa>
     166:	00 00       	nop
     168:	72 98       	cbi	0x0e, 2	; 14
     16a:	8f e8       	ldi	r24, 0x8F	; 143
     16c:	91 e0       	ldi	r25, 0x01	; 1
     16e:	01 97       	sbiw	r24, 0x01	; 1
     170:	f1 f7       	brne	.-4      	; 0x16e <lcdData+0x16>
     172:	00 c0       	rjmp	.+0      	; 0x174 <lcdData+0x1c>
     174:	00 00       	nop
     176:	08 95       	ret

00000178 <lcd_init>:
     178:	8f ef       	ldi	r24, 0xFF	; 255
     17a:	8a b9       	out	0x0a, r24	; 10
     17c:	8d b9       	out	0x0d, r24	; 13
     17e:	72 98       	cbi	0x0e, 2	; 14
     180:	8f e3       	ldi	r24, 0x3F	; 63
     182:	9f e1       	ldi	r25, 0x1F	; 31
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <lcd_init+0xc>
     188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_init+0x12>
     18a:	00 00       	nop
     18c:	88 e3       	ldi	r24, 0x38	; 56
     18e:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     192:	8c e0       	ldi	r24, 0x0C	; 12
     194:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     19e:	8f e3       	ldi	r24, 0x3F	; 63
     1a0:	9f e1       	ldi	r25, 0x1F	; 31
     1a2:	01 97       	sbiw	r24, 0x01	; 1
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x2a>
     1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x30>
     1a8:	00 00       	nop
     1aa:	86 e0       	ldi	r24, 0x06	; 6
     1ac:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     1b0:	08 95       	ret

000001b2 <lcd_gotoxy>:
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <lcd_gotoxy+0x6>
     1b8:	00 d0       	rcall	.+0      	; 0x1ba <lcd_gotoxy+0x8>
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
     1be:	90 e8       	ldi	r25, 0x80	; 128
     1c0:	99 83       	std	Y+1, r25	; 0x01
     1c2:	90 ec       	ldi	r25, 0xC0	; 192
     1c4:	9a 83       	std	Y+2, r25	; 0x02
     1c6:	94 e9       	ldi	r25, 0x94	; 148
     1c8:	9b 83       	std	Y+3, r25	; 0x03
     1ca:	94 ed       	ldi	r25, 0xD4	; 212
     1cc:	9c 83       	std	Y+4, r25	; 0x04
     1ce:	fe 01       	movw	r30, r28
     1d0:	e6 0f       	add	r30, r22
     1d2:	f1 1d       	adc	r31, r1
     1d4:	81 50       	subi	r24, 0x01	; 1
     1d6:	90 81       	ld	r25, Z
     1d8:	89 0f       	add	r24, r25
     1da:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     1de:	8f e8       	ldi	r24, 0x8F	; 143
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	01 97       	sbiw	r24, 0x01	; 1
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_gotoxy+0x30>
     1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <lcd_gotoxy+0x36>
     1e8:	00 00       	nop
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <lcd_print>:
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	cf 93       	push	r28
     1fe:	fc 01       	movw	r30, r24
     200:	80 81       	ld	r24, Z
     202:	88 23       	and	r24, r24
     204:	59 f0       	breq	.+22     	; 0x21c <lcd_print+0x24>
     206:	8f 01       	movw	r16, r30
     208:	c0 e0       	ldi	r28, 0x00	; 0
     20a:	0e 94 ac 00 	call	0x158	; 0x158 <lcdData>
     20e:	cf 5f       	subi	r28, 0xFF	; 255
     210:	f8 01       	movw	r30, r16
     212:	ec 0f       	add	r30, r28
     214:	f1 1d       	adc	r31, r1
     216:	80 81       	ld	r24, Z
     218:	81 11       	cpse	r24, r1
     21a:	f7 cf       	rjmp	.-18     	; 0x20a <lcd_print+0x12>
     21c:	cf 91       	pop	r28
     21e:	1f 91       	pop	r17
     220:	0f 91       	pop	r16
     222:	08 95       	ret

00000224 <ftoa>:
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	cd b7       	in	r28, 0x3d	; 61
     22a:	de b7       	in	r29, 0x3e	; 62
     22c:	2b 97       	sbiw	r28, 0x0b	; 11
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	f8 94       	cli
     232:	de bf       	out	0x3e, r29	; 62
     234:	0f be       	out	0x3f, r0	; 63
     236:	cd bf       	out	0x3d, r28	; 61
     238:	9b 01       	movw	r18, r22
     23a:	4b e0       	ldi	r20, 0x0B	; 11
     23c:	e2 e0       	ldi	r30, 0x02	; 2
     23e:	f1 e0       	ldi	r31, 0x01	; 1
     240:	de 01       	movw	r26, r28
     242:	11 96       	adiw	r26, 0x01	; 1
     244:	01 90       	ld	r0, Z+
     246:	0d 92       	st	X+, r0
     248:	4a 95       	dec	r20
     24a:	e1 f7       	brne	.-8      	; 0x244 <ftoa+0x20>
     24c:	6a e0       	ldi	r22, 0x0A	; 10
     24e:	70 e0       	ldi	r23, 0x00	; 0
     250:	0e 94 a8 09 	call	0x1350	; 0x1350 <__divmodhi4>
     254:	e1 e0       	ldi	r30, 0x01	; 1
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	ec 0f       	add	r30, r28
     25a:	fd 1f       	adc	r31, r29
     25c:	e6 0f       	add	r30, r22
     25e:	f7 1f       	adc	r31, r23
     260:	40 81       	ld	r20, Z
     262:	f9 01       	movw	r30, r18
     264:	40 83       	st	Z, r20
     266:	e1 e0       	ldi	r30, 0x01	; 1
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	ec 0f       	add	r30, r28
     26c:	fd 1f       	adc	r31, r29
     26e:	e8 0f       	add	r30, r24
     270:	f9 1f       	adc	r31, r25
     272:	80 81       	ld	r24, Z
     274:	f9 01       	movw	r30, r18
     276:	81 83       	std	Z+1, r24	; 0x01
     278:	12 82       	std	Z+2, r1	; 0x02
     27a:	2b 96       	adiw	r28, 0x0b	; 11
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	f8 94       	cli
     280:	de bf       	out	0x3e, r29	; 62
     282:	0f be       	out	0x3f, r0	; 63
     284:	cd bf       	out	0x3d, r28	; 61
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	08 95       	ret

0000028c <itos>:
     28c:	ef 92       	push	r14
     28e:	ff 92       	push	r15
     290:	0f 93       	push	r16
     292:	1f 93       	push	r17
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
     29c:	2b 97       	sbiw	r28, 0x0b	; 11
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	f8 94       	cli
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	cd bf       	out	0x3d, r28	; 61
     2a8:	8c 01       	movw	r16, r24
     2aa:	9b 01       	movw	r18, r22
     2ac:	8b e0       	ldi	r24, 0x0B	; 11
     2ae:	e2 e0       	ldi	r30, 0x02	; 2
     2b0:	f1 e0       	ldi	r31, 0x01	; 1
     2b2:	de 01       	movw	r26, r28
     2b4:	11 96       	adiw	r26, 0x01	; 1
     2b6:	01 90       	ld	r0, Z+
     2b8:	0d 92       	st	X+, r0
     2ba:	8a 95       	dec	r24
     2bc:	e1 f7       	brne	.-8      	; 0x2b6 <itos+0x2a>
     2be:	c8 01       	movw	r24, r16
     2c0:	60 e1       	ldi	r22, 0x10	; 16
     2c2:	77 e2       	ldi	r23, 0x27	; 39
     2c4:	0e 94 a8 09 	call	0x1350	; 0x1350 <__divmodhi4>
     2c8:	e1 e0       	ldi	r30, 0x01	; 1
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	ec 0f       	add	r30, r28
     2ce:	fd 1f       	adc	r31, r29
     2d0:	e6 0f       	add	r30, r22
     2d2:	f7 1f       	adc	r31, r23
     2d4:	40 81       	ld	r20, Z
     2d6:	f9 01       	movw	r30, r18
     2d8:	40 83       	st	Z, r20
     2da:	0f 2e       	mov	r0, r31
     2dc:	f8 ee       	ldi	r31, 0xE8	; 232
     2de:	ef 2e       	mov	r14, r31
     2e0:	f3 e0       	ldi	r31, 0x03	; 3
     2e2:	ff 2e       	mov	r15, r31
     2e4:	f0 2d       	mov	r31, r0
     2e6:	b7 01       	movw	r22, r14
     2e8:	0e 94 a8 09 	call	0x1350	; 0x1350 <__divmodhi4>
     2ec:	e1 e0       	ldi	r30, 0x01	; 1
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	ec 0f       	add	r30, r28
     2f2:	fd 1f       	adc	r31, r29
     2f4:	e6 0f       	add	r30, r22
     2f6:	f7 1f       	adc	r31, r23
     2f8:	80 81       	ld	r24, Z
     2fa:	f9 01       	movw	r30, r18
     2fc:	81 83       	std	Z+1, r24	; 0x01
     2fe:	c8 01       	movw	r24, r16
     300:	b7 01       	movw	r22, r14
     302:	0e 94 a8 09 	call	0x1350	; 0x1350 <__divmodhi4>
     306:	0f 2e       	mov	r0, r31
     308:	f4 e6       	ldi	r31, 0x64	; 100
     30a:	ef 2e       	mov	r14, r31
     30c:	f1 2c       	mov	r15, r1
     30e:	f0 2d       	mov	r31, r0
     310:	b7 01       	movw	r22, r14
     312:	0e 94 a8 09 	call	0x1350	; 0x1350 <__divmodhi4>
     316:	e1 e0       	ldi	r30, 0x01	; 1
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	ec 0f       	add	r30, r28
     31c:	fd 1f       	adc	r31, r29
     31e:	e6 0f       	add	r30, r22
     320:	f7 1f       	adc	r31, r23
     322:	80 81       	ld	r24, Z
     324:	f9 01       	movw	r30, r18
     326:	82 83       	std	Z+2, r24	; 0x02
     328:	c8 01       	movw	r24, r16
     32a:	b7 01       	movw	r22, r14
     32c:	0e 94 a8 09 	call	0x1350	; 0x1350 <__divmodhi4>
     330:	0f 2e       	mov	r0, r31
     332:	fa e0       	ldi	r31, 0x0A	; 10
     334:	ef 2e       	mov	r14, r31
     336:	f1 2c       	mov	r15, r1
     338:	f0 2d       	mov	r31, r0
     33a:	b7 01       	movw	r22, r14
     33c:	0e 94 a8 09 	call	0x1350	; 0x1350 <__divmodhi4>
     340:	e1 e0       	ldi	r30, 0x01	; 1
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	ec 0f       	add	r30, r28
     346:	fd 1f       	adc	r31, r29
     348:	e6 0f       	add	r30, r22
     34a:	f7 1f       	adc	r31, r23
     34c:	80 81       	ld	r24, Z
     34e:	f9 01       	movw	r30, r18
     350:	83 83       	std	Z+3, r24	; 0x03
     352:	c8 01       	movw	r24, r16
     354:	b7 01       	movw	r22, r14
     356:	0e 94 a8 09 	call	0x1350	; 0x1350 <__divmodhi4>
     35a:	e1 e0       	ldi	r30, 0x01	; 1
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	ec 0f       	add	r30, r28
     360:	fd 1f       	adc	r31, r29
     362:	e8 0f       	add	r30, r24
     364:	f9 1f       	adc	r31, r25
     366:	80 81       	ld	r24, Z
     368:	f9 01       	movw	r30, r18
     36a:	84 83       	std	Z+4, r24	; 0x04
     36c:	15 82       	std	Z+5, r1	; 0x05
     36e:	2b 96       	adiw	r28, 0x0b	; 11
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	de bf       	out	0x3e, r29	; 62
     376:	0f be       	out	0x3f, r0	; 63
     378:	cd bf       	out	0x3d, r28	; 61
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	08 95       	ret

00000388 <__vector_35>:



// Timer used to track seconds for startup routine of speed controller
ISR (TIMER3_OVF_vect)
{
     388:	1f 92       	push	r1
     38a:	0f 92       	push	r0
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	0f 92       	push	r0
     390:	11 24       	eor	r1, r1
     392:	8f 93       	push	r24
     394:	9f 93       	push	r25
	TCNT3 = -15625; // reset the 1sec timer value 
     396:	87 ef       	ldi	r24, 0xF7	; 247
     398:	92 ec       	ldi	r25, 0xC2	; 194
     39a:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
     39e:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
	overflowCount++;
     3a2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <__data_end>
     3a6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <__data_end+0x1>
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <__data_end+0x1>
     3b0:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <__data_end>
	if (overflowCount == 5) // wait  seconds
     3b4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <__data_end>
     3b8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <__data_end+0x1>
     3bc:	05 97       	sbiw	r24, 0x05	; 5
     3be:	91 f4       	brne	.+36     	; 0x3e4 <__vector_35+0x5c>
	{
		OCR1A=38000-1;	// adjust pulse width of waveform being generated from 2ms to 1ms
     3c0:	8f e6       	ldi	r24, 0x6F	; 111
     3c2:	94 e9       	ldi	r25, 0x94	; 148
     3c4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     3c8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
		TCNT3 = 0; // set counter to 0
     3cc:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
     3d0:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
		TIMSK3 = (0 << TOIE3); // disable timer
     3d4:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
		setupFlag = 1;
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <setupFlag+0x1>
     3e0:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <setupFlag>
	}
}
     3e4:	9f 91       	pop	r25
     3e6:	8f 91       	pop	r24
     3e8:	0f 90       	pop	r0
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	0f 90       	pop	r0
     3ee:	1f 90       	pop	r1
     3f0:	18 95       	reti

000003f2 <__vector_21>:

ISR(ADC_vect)
{
     3f2:	1f 92       	push	r1
     3f4:	0f 92       	push	r0
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	0f 92       	push	r0
     3fa:	11 24       	eor	r1, r1
     3fc:	8f 93       	push	r24
     3fe:	9f 93       	push	r25
     400:	ef 93       	push	r30
     402:	ff 93       	push	r31
	potVal = ADC;
     404:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     408:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     40c:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <potVal+0x1>
     410:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <potVal>
	ADCSRA |= (1<<ADSC);
     414:	ea e7       	ldi	r30, 0x7A	; 122
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	80 81       	ld	r24, Z
     41a:	80 64       	ori	r24, 0x40	; 64
     41c:	80 83       	st	Z, r24
}
     41e:	ff 91       	pop	r31
     420:	ef 91       	pop	r30
     422:	9f 91       	pop	r25
     424:	8f 91       	pop	r24
     426:	0f 90       	pop	r0
     428:	0f be       	out	0x3f, r0	; 63
     42a:	0f 90       	pop	r0
     42c:	1f 90       	pop	r1
     42e:	18 95       	reti

00000430 <peripheralSetup>:

/************************************************* STARTUP ROUTINE **********************************************************************************/

void peripheralSetup()
{
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
	DDRC &= ~(1<<3);
     434:	3b 98       	cbi	0x07, 3	; 7
	PORTC |= (1 << 3);
     436:	43 9a       	sbi	0x08, 3	; 8
		
	ADMUX = (0b01<<REFS0|(0<<ADLAR)|(0b0011<<MUX0));
     438:	83 e4       	ldi	r24, 0x43	; 67
     43a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = (1<<ADEN)|(0<<ADSC)|(0<<ADATE)|(0<<ADIF)|(1<<ADIE)|(0b111<<ADPS0);
     43e:	8f e8       	ldi	r24, 0x8F	; 143
     440:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		
	ADCSRB = 0b000<<ADTS0;
     444:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
	
	PORTE &= ~(1<<3); // Ensure 12V is OFF
     448:	73 98       	cbi	0x0e, 3	; 14
	DDRE &= ~(1<<3);  // Ensure 12V is OFF
     44a:	6b 98       	cbi	0x0d, 3	; 13
	
	//********************************************** PIN CHANGE INTERRUPT SETUP **********************************************//
	DDRC &= ~(_BV(2) | _BV(1) | _BV(4)); // sets PORTC 1, 2, and 4 to input (input from rotary encoder)
     44c:	87 b1       	in	r24, 0x07	; 7
     44e:	89 7e       	andi	r24, 0xE9	; 233
     450:	87 b9       	out	0x07, r24	; 7
	// 4 = SW signal (button press)
	
	
	//********************************************** PWM SETUP **********************************************//
	// Set up PWM on PortB(1)
	DDRB |= (1<<1); // set PINB 1 to output
     452:	21 9a       	sbi	0x04, 1	; 4
	PORTB = ~(1<<1); // Ensure PINB 1 is not outputting voltage
     454:	8d ef       	ldi	r24, 0xFD	; 253
     456:	85 b9       	out	0x05, r24	; 5
	TCCR1A= (0b11 << COM1A0) | ( 0b00 << COM1B0) | (0b10 << WGM10); // set up PWM with pre-scalar
     458:	82 ec       	ldi	r24, 0xC2	; 194
     45a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B= (0b11 << WGM12) | (0b010<< CS10);
     45e:	8a e1       	ldi	r24, 0x1A	; 26
     460:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	ICR1= 40000-1; // (20MS /8 PRESCALAR)
     464:	8f e3       	ldi	r24, 0x3F	; 63
     466:	9c e9       	ldi	r25, 0x9C	; 156
     468:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
     46c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	OCR1A=36000-1; // 1000->4000 0.5ms to 2ms *** adjust ***
     470:	8f e9       	ldi	r24, 0x9F	; 159
     472:	9c e8       	ldi	r25, 0x8C	; 140
     474:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     478:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	
	// Set up 4 second timer for startup
	TCCR3A = 0; //(0b00 << COM3A0) | (0b00 << COM3B0)
     47c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
	TCCR3B = (0 << ICNC3) | (0 << ICES3) | (0b00 << WGM32) | (0b101 << CS30);
     480:	85 e0       	ldi	r24, 0x05	; 5
     482:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__DATA_REGION_ORIGIN__+0x31>
	TIMSK3 = (0 << TOIE3); // Ensure timer 3 is disabled
     486:	c1 e7       	ldi	r28, 0x71	; 113
     488:	d0 e0       	ldi	r29, 0x00	; 0
     48a:	18 82       	st	Y, r1
	TCNT3 = -15625; // One second timer value
     48c:	87 ef       	ldi	r24, 0xF7	; 247
     48e:	92 ec       	ldi	r25, 0xC2	; 194
     490:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
     494:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
	
	sei();
     498:	78 94       	sei
	// Set up LCD and print starting message state
	lcd_init(); // initialize the LCD according to Dr. Viall's 263 code
     49a:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_init>
	lcd_gotoxy(1,1); // go to row 1 column 1 of LCD
     49e:	61 e0       	ldi	r22, 0x01	; 1
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("Starting system"); // Print ->   [HEIGHT] ANGLE
     4a6:	8d e0       	ldi	r24, 0x0D	; 13
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(1,2); // go to row 2 column 2 of LCD
     4ae:	62 e0       	ldi	r22, 0x02	; 2
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("Please wait..."); // Print -> 00.0 00.0
     4b6:	8d e1       	ldi	r24, 0x1D	; 29
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	
	
	 // enable global interrupts
	
	// ***** SPEED CONTROLLER STARTUP ***** //
	TIMSK3 = (1 << TOIE3); // Enable PWM timer for startup
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	88 83       	st	Y, r24
	//_delay_ms(1);
	PORTE |= (1<<BASE); // TURN ON 12V SUPPLY
     4c2:	73 9a       	sbi	0x0e, 3	; 14
	DDRE |= (1<<BASE);   // TURN ON 12V SUPPLY
     4c4:	6b 9a       	sbi	0x0d, 3	; 13
	//_delay_ms(4000);
	//OCR1A=38000-1;	// adjust pulse width of waveform being generated from 2ms to 1ms
	//_delay_ms(3000);
	while (setupFlag != 1)
     4c6:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <setupFlag>
     4ca:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <setupFlag+0x1>
     4ce:	01 97       	sbiw	r24, 0x01	; 1
     4d0:	d1 f7       	brne	.-12     	; 0x4c6 <peripheralSetup+0x96>
	{
		//wait until setup is completed
	}
}
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	08 95       	ret

000004d8 <main>:

int main(void)
{
	//USART_init();
	// These variables are Char arrays as the LCD cannot output int/float values, it must be sent as a string
	angleConv[0]='0'; // v Set up height and angle to start at 00.0 value
     4d8:	e8 ec       	ldi	r30, 0xC8	; 200
     4da:	f1 e0       	ldi	r31, 0x01	; 1
     4dc:	80 e3       	ldi	r24, 0x30	; 48
     4de:	80 83       	st	Z, r24
	angleConv[1]='0';
     4e0:	81 83       	std	Z+1, r24	; 0x01
	angleConv[2]='.';
     4e2:	9e e2       	ldi	r25, 0x2E	; 46
     4e4:	92 83       	std	Z+2, r25	; 0x02
	angleConv[3]='0';
     4e6:	83 83       	std	Z+3, r24	; 0x03
	heightConv[0]='0';
     4e8:	e8 ed       	ldi	r30, 0xD8	; 216
     4ea:	f1 e0       	ldi	r31, 0x01	; 1
     4ec:	80 83       	st	Z, r24
	heightConv[1]='0';
     4ee:	81 83       	std	Z+1, r24	; 0x01
	heightConv[2]='.';
     4f0:	92 83       	std	Z+2, r25	; 0x02
	heightConv[3]='0';// ^
     4f2:	83 83       	std	Z+3, r24	; 0x03
	
	peripheralSetup();
     4f4:	0e 94 18 02 	call	0x430	; 0x430 <peripheralSetup>
	ADCSRA |= (1<<ADSC);
     4f8:	ea e7       	ldi	r30, 0x7A	; 122
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	80 81       	ld	r24, Z
     4fe:	80 64       	ori	r24, 0x40	; 64
     500:	80 83       	st	Z, r24
	//SETUP COMPLETE
	lcd_gotoxy(1,1); // go to row 1 column 1 of LCD
     502:	61 e0       	ldi	r22, 0x01	; 1
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("System start    "); // Print ->   [HEIGHT] ANGLE
     50a:	8c e2       	ldi	r24, 0x2C	; 44
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(1,2); // go to row 2 column 2 of LCD
     512:	62 e0       	ldi	r22, 0x02	; 2
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("completed!      "); // Print -> 00.0 00.0
     51a:	8d e3       	ldi	r24, 0x3D	; 61
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     522:	2f ef       	ldi	r18, 0xFF	; 255
     524:	83 ed       	ldi	r24, 0xD3	; 211
     526:	90 e3       	ldi	r25, 0x30	; 48
     528:	21 50       	subi	r18, 0x01	; 1
     52a:	80 40       	sbci	r24, 0x00	; 0
     52c:	90 40       	sbci	r25, 0x00	; 0
     52e:	e1 f7       	brne	.-8      	; 0x528 <main+0x50>
     530:	00 c0       	rjmp	.+0      	; 0x532 <main+0x5a>
     532:	00 00       	nop
	_delay_ms(1000);
	lcd_gotoxy(1,1);
     534:	61 e0       	ldi	r22, 0x01	; 1
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("Enabling UI...  ");
     53c:	8e e4       	ldi	r24, 0x4E	; 78
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(1,2);
     544:	62 e0       	ldi	r22, 0x02	; 2
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("Enjoy! :)       ");
     54c:	8f e5       	ldi	r24, 0x5F	; 95
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
     554:	2f ef       	ldi	r18, 0xFF	; 255
     556:	87 ea       	ldi	r24, 0xA7	; 167
     558:	91 e6       	ldi	r25, 0x61	; 97
     55a:	21 50       	subi	r18, 0x01	; 1
     55c:	80 40       	sbci	r24, 0x00	; 0
     55e:	90 40       	sbci	r25, 0x00	; 0
     560:	e1 f7       	brne	.-8      	; 0x55a <main+0x82>
     562:	00 c0       	rjmp	.+0      	; 0x564 <main+0x8c>
     564:	00 00       	nop
	_delay_ms(2000);
	
	
	// ***** Enable User Control ***** //		
	PCICR |= (1<<PCIE1); // Enable pin change interrupt on PORTC
     566:	e8 e6       	ldi	r30, 0x68	; 104
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	80 81       	ld	r24, Z
     56c:	82 60       	ori	r24, 0x02	; 2
     56e:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT12) | (1<<PCINT9) | (1<<PCINT10); // Enable Pins 1,2, and 4 to trigger this interrupt
     570:	ec e6       	ldi	r30, 0x6C	; 108
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	80 81       	ld	r24, Z
     576:	86 61       	ori	r24, 0x16	; 22
     578:	80 83       	st	Z, r24
	
	lcd_gotoxy(1,1); // go to row 1 column 1 of LCD
     57a:	61 e0       	ldi	r22, 0x01	; 1
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(HEIGHT_SELECT); // Print ->   [HEIGHT] ANGLE
     582:	80 e7       	ldi	r24, 0x70	; 112
     584:	91 e0       	ldi	r25, 0x01	; 1
     586:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(1,2); // go to row 2 column 2 of LCD
     58a:	62 e0       	ldi	r22, 0x02	; 2
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(DEFAULT_ANGLE); // Print -> 00.0 00.0
     592:	81 e8       	ldi	r24, 0x81	; 129
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>

	lcd_gotoxy(1,2);
     59a:	62 e0       	ldi	r22, 0x02	; 2
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	// ***** MAIN LOOP ***** //
	//USART_init();
	int desiredPosition = 0;
	int currentPosition = potVal;
     5a2:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <potVal>
     5a6:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <potVal+0x1>
	lcd_print(DEFAULT_ANGLE); // Print -> 00.0 00.0

	lcd_gotoxy(1,2);
	// ***** MAIN LOOP ***** //
	//USART_init();
	int desiredPosition = 0;
     5aa:	00 e0       	ldi	r16, 0x00	; 0
     5ac:	10 e0       	ldi	r17, 0x00	; 0
		// 3)Adjust speed based on distance
		// 4)loop above
		// rough eq: potVal = 14 + (angle * 3.96);
		
		// need timer = ?
		currentPosition = potVal; // read current potentiometer value from ADC port
     5ae:	c0 91 e8 01 	lds	r28, 0x01E8	; 0x8001e8 <potVal>
     5b2:	d0 91 e9 01 	lds	r29, 0x01E9	; 0x8001e9 <potVal+0x1>
		if(valueConfirm == 1)
     5b6:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <valueConfirm>
     5ba:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <valueConfirm+0x1>
     5be:	01 97       	sbiw	r24, 0x01	; 1
     5c0:	e9 f4       	brne	.+58     	; 0x5fc <main+0x124>
		{
			desiredPosition = 14 + (angle *3.96);
     5c2:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <angle>
     5c6:	70 91 f7 01 	lds	r23, 0x01F7	; 0x8001f7 <angle+0x1>
     5ca:	07 2e       	mov	r0, r23
     5cc:	00 0c       	add	r0, r0
     5ce:	88 0b       	sbc	r24, r24
     5d0:	99 0b       	sbc	r25, r25
     5d2:	0e 94 70 07 	call	0xee0	; 0xee0 <__floatsisf>
     5d6:	24 ea       	ldi	r18, 0xA4	; 164
     5d8:	30 e7       	ldi	r19, 0x70	; 112
     5da:	4d e7       	ldi	r20, 0x7D	; 125
     5dc:	50 e4       	ldi	r21, 0x40	; 64
     5de:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__mulsf3>
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	40 e6       	ldi	r20, 0x60	; 96
     5e8:	51 e4       	ldi	r21, 0x41	; 65
     5ea:	0e 94 55 06 	call	0xcaa	; 0xcaa <__addsf3>
     5ee:	0e 94 38 07 	call	0xe70	; 0xe70 <__fixsfsi>
     5f2:	8b 01       	movw	r16, r22
			valueConfirm = 0; // reset flag
     5f4:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <valueConfirm+0x1>
     5f8:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <valueConfirm>
		pidError = desiredPosition - currentPosition;
		//integral = integral + pidError;
		//derivative = pidError - previousPidError;
		//output = kp*pidError;
		
		itos(abs(pidError), tmpOutput);
     5fc:	98 01       	movw	r18, r16
     5fe:	2c 1b       	sub	r18, r28
     600:	3d 0b       	sbc	r19, r29
     602:	c9 01       	movw	r24, r18
     604:	99 23       	and	r25, r25
     606:	24 f4       	brge	.+8      	; 0x610 <main+0x138>
     608:	88 27       	eor	r24, r24
     60a:	99 27       	eor	r25, r25
     60c:	82 1b       	sub	r24, r18
     60e:	93 0b       	sbc	r25, r19
     610:	6c ef       	ldi	r22, 0xFC	; 252
     612:	71 e0       	ldi	r23, 0x01	; 1
     614:	0e 94 46 01 	call	0x28c	; 0x28c <itos>
		lcd_gotoxy(1,1);
     618:	61 e0       	ldi	r22, 0x01	; 1
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
		lcd_print(tmpOutput);
     620:	8c ef       	ldi	r24, 0xFC	; 252
     622:	91 e0       	ldi	r25, 0x01	; 1
     624:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
		lcd_print("  ");
     628:	8d e6       	ldi	r24, 0x6D	; 109
     62a:	91 e0       	ldi	r25, 0x01	; 1
     62c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
		itos(potVal,potConv);
     630:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <potVal>
     634:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <potVal+0x1>
     638:	68 eb       	ldi	r22, 0xB8	; 184
     63a:	71 e0       	ldi	r23, 0x01	; 1
     63c:	0e 94 46 01 	call	0x28c	; 0x28c <itos>
		lcd_print(potConv);
     640:	88 eb       	ldi	r24, 0xB8	; 184
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
     648:	2f ef       	ldi	r18, 0xFF	; 255
     64a:	80 e7       	ldi	r24, 0x70	; 112
     64c:	92 e0       	ldi	r25, 0x02	; 2
     64e:	21 50       	subi	r18, 0x01	; 1
     650:	80 40       	sbci	r24, 0x00	; 0
     652:	90 40       	sbci	r25, 0x00	; 0
     654:	e1 f7       	brne	.-8      	; 0x64e <main+0x176>
     656:	00 c0       	rjmp	.+0      	; 0x658 <main+0x180>
     658:	00 00       	nop
     65a:	a9 cf       	rjmp	.-174    	; 0x5ae <main+0xd6>

0000065c <print_height_angle>:

/************************************************* NUMBER CHANING FUNCTIONS **********************************************************************************/

// Function used to print either the height or angle selection ** THIS FUNCTION IS ONLY FOR CHANGING THE SELECTION **
void print_height_angle(char *angleConv, char *heightConv, int heightSelect)
{
     65c:	ef 92       	push	r14
     65e:	ff 92       	push	r15
     660:	0f 93       	push	r16
     662:	1f 93       	push	r17
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	ec 01       	movw	r28, r24
     66a:	8b 01       	movw	r16, r22
     66c:	7a 01       	movw	r14, r20
	lcd_gotoxy(1,1);
     66e:	61 e0       	ldi	r22, 0x01	; 1
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	if (heightSelect == 1)
     676:	ea 94       	dec	r14
     678:	ef 28       	or	r14, r15
     67a:	29 f4       	brne	.+10     	; 0x686 <print_height_angle+0x2a>
		lcd_print(HEIGHT_SELECT);
     67c:	80 e7       	ldi	r24, 0x70	; 112
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
     684:	04 c0       	rjmp	.+8      	; 0x68e <print_height_angle+0x32>
	else
		lcd_print(ANGLE_SELECT);
     686:	82 e9       	ldi	r24, 0x92	; 146
     688:	91 e0       	ldi	r25, 0x01	; 1
     68a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	// un-select bottom row
	lcd_gotoxy(1,2);
     68e:	62 e0       	ldi	r22, 0x02	; 2
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(" ");
     696:	8e e6       	ldi	r24, 0x6E	; 110
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_print(heightConv);
     69e:	c8 01       	movw	r24, r16
     6a0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(6,2);
     6a4:	62 e0       	ldi	r22, 0x02	; 2
     6a6:	86 e0       	ldi	r24, 0x06	; 6
     6a8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(" ");
     6ac:	8e e6       	ldi	r24, 0x6E	; 110
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(10,2);
     6b4:	62 e0       	ldi	r22, 0x02	; 2
     6b6:	8a e0       	ldi	r24, 0x0A	; 10
     6b8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(" ");
     6bc:	8e e6       	ldi	r24, 0x6E	; 110
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_print(angleConv);
     6c4:	ce 01       	movw	r24, r28
     6c6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(15,2);
     6ca:	62 e0       	ldi	r22, 0x02	; 2
     6cc:	8f e0       	ldi	r24, 0x0F	; 15
     6ce:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(" ");
     6d2:	8e e6       	ldi	r24, 0x6E	; 110
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
}
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	ff 90       	pop	r15
     6e4:	ef 90       	pop	r14
     6e6:	08 95       	ret

000006e8 <print_height_change>:

// Function used to print a change in the height value
void print_height_change(char *conversion)
{
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	ec 01       	movw	r28, r24
	//ensure height becomes unselected
	lcd_gotoxy(1,1);
     6ee:	61 e0       	ldi	r22, 0x01	; 1
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(NO_HS_SELECT);
     6f6:	83 ea       	ldi	r24, 0xA3	; 163
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(1,2);
     6fe:	62 e0       	ldi	r22, 0x02	; 2
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("[");
     706:	84 eb       	ldi	r24, 0xB4	; 180
     708:	91 e0       	ldi	r25, 0x01	; 1
     70a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(2,2);
     70e:	62 e0       	ldi	r22, 0x02	; 2
     710:	82 e0       	ldi	r24, 0x02	; 2
     712:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(conversion);
     716:	ce 01       	movw	r24, r28
     718:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(6,2);
     71c:	62 e0       	ldi	r22, 0x02	; 2
     71e:	86 e0       	ldi	r24, 0x06	; 6
     720:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("]");
     724:	81 ea       	ldi	r24, 0xA1	; 161
     726:	91 e0       	ldi	r25, 0x01	; 1
     728:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
}
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	08 95       	ret

00000732 <print_angle_change>:

// Function used to print a change in the angle value
void print_angle_change(char *conversion)
{
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	ec 01       	movw	r28, r24
	lcd_gotoxy(1,1);
     738:	61 e0       	ldi	r22, 0x01	; 1
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(NO_HS_SELECT);
     740:	83 ea       	ldi	r24, 0xA3	; 163
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(10,2);
     748:	62 e0       	ldi	r22, 0x02	; 2
     74a:	8a e0       	ldi	r24, 0x0A	; 10
     74c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("[");
     750:	84 eb       	ldi	r24, 0xB4	; 180
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(11,2);
     758:	62 e0       	ldi	r22, 0x02	; 2
     75a:	8b e0       	ldi	r24, 0x0B	; 11
     75c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(conversion);
     760:	ce 01       	movw	r24, r28
     762:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(15,2);
     766:	62 e0       	ldi	r22, 0x02	; 2
     768:	8f e0       	ldi	r24, 0x0F	; 15
     76a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("]");
     76e:	81 ea       	ldi	r24, 0xA1	; 161
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	
}
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	08 95       	ret

0000077c <__vector_4>:
//	-Button press either:
//		- Confirms height / angle adjustment
//		- Selects angle / height and moves user to adjust height / angle

ISR(PCINT1_vect)
{
     77c:	1f 92       	push	r1
     77e:	0f 92       	push	r0
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	0f 92       	push	r0
     784:	11 24       	eor	r1, r1
     786:	cf 92       	push	r12
     788:	df 92       	push	r13
     78a:	ef 92       	push	r14
     78c:	ff 92       	push	r15
     78e:	2f 93       	push	r18
     790:	3f 93       	push	r19
     792:	4f 93       	push	r20
     794:	5f 93       	push	r21
     796:	6f 93       	push	r22
     798:	7f 93       	push	r23
     79a:	8f 93       	push	r24
     79c:	9f 93       	push	r25
     79e:	af 93       	push	r26
     7a0:	bf 93       	push	r27
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	ef 93       	push	r30
     7a8:	ff 93       	push	r31
     7aa:	8f e1       	ldi	r24, 0x1F	; 31
     7ac:	9e e4       	ldi	r25, 0x4E	; 78
     7ae:	01 97       	sbiw	r24, 0x01	; 1
     7b0:	f1 f7       	brne	.-4      	; 0x7ae <__vector_4+0x32>
     7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <__vector_4+0x38>
     7b4:	00 00       	nop
	_delay_ms(5);
	
	if(PINC == RIGHT) //if right turn triggered interrupt
     7b6:	86 b1       	in	r24, 0x06	; 6
     7b8:	83 37       	cpi	r24, 0x73	; 115
     7ba:	09 f0       	breq	.+2      	; 0x7be <__vector_4+0x42>
     7bc:	6b c0       	rjmp	.+214    	; 0x894 <__vector_4+0x118>
	{
		switch(state)
     7be:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <state>
     7c2:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <state+0x1>
     7c6:	82 30       	cpi	r24, 0x02	; 2
     7c8:	91 05       	cpc	r25, r1
     7ca:	a9 f0       	breq	.+42     	; 0x7f6 <__vector_4+0x7a>
     7cc:	83 30       	cpi	r24, 0x03	; 3
     7ce:	91 05       	cpc	r25, r1
     7d0:	d1 f1       	breq	.+116    	; 0x846 <__vector_4+0xca>
     7d2:	89 2b       	or	r24, r25
     7d4:	09 f0       	breq	.+2      	; 0x7d8 <__vector_4+0x5c>
     7d6:	5e c0       	rjmp	.+188    	; 0x894 <__vector_4+0x118>
		{
			case HEIGHT: // change to angle state
				print_height_angle(angleConv,heightConv,0);
     7d8:	40 e0       	ldi	r20, 0x00	; 0
     7da:	50 e0       	ldi	r21, 0x00	; 0
     7dc:	68 ed       	ldi	r22, 0xD8	; 216
     7de:	71 e0       	ldi	r23, 0x01	; 1
     7e0:	88 ec       	ldi	r24, 0xC8	; 200
     7e2:	91 e0       	ldi	r25, 0x01	; 1
     7e4:	0e 94 2e 03 	call	0x65c	; 0x65c <print_height_angle>
				state = ANGLE;
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <state+0x1>
     7f0:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <state>
				break;
     7f4:	4f c0       	rjmp	.+158    	; 0x894 <__vector_4+0x118>
			case ANGLE:
			// do nothing
			break;
			case CHEIGHT: // increment height value (as long as < MAX (?))
			if ((height+valueChange) <= MAX_HEIGHT) // total guess right now
     7f6:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <height>
     7fa:	30 91 f9 01 	lds	r19, 0x01F9	; 0x8001f9 <height+0x1>
     7fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     802:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     806:	82 0f       	add	r24, r18
     808:	93 1f       	adc	r25, r19
     80a:	40 97       	sbiw	r24, 0x10	; 16
     80c:	0c f0       	brlt	.+2      	; 0x810 <__vector_4+0x94>
     80e:	42 c0       	rjmp	.+132    	; 0x894 <__vector_4+0x118>
			{
				height = height + valueChange; //increment height by tenth
     810:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <height>
     814:	30 91 f9 01 	lds	r19, 0x01F9	; 0x8001f9 <height+0x1>
     818:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     81c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     820:	82 0f       	add	r24, r18
     822:	93 1f       	adc	r25, r19
     824:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <height+0x1>
     828:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <height>
				ftoa(height,heightConv); // convert height to char array (heightConv) with 1 decimal place
     82c:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <height>
     830:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <height+0x1>
     834:	68 ed       	ldi	r22, 0xD8	; 216
     836:	71 e0       	ldi	r23, 0x01	; 1
     838:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_height_change(heightConv); // print conversion to LCD
     83c:	88 ed       	ldi	r24, 0xD8	; 216
     83e:	91 e0       	ldi	r25, 0x01	; 1
     840:	0e 94 74 03 	call	0x6e8	; 0x6e8 <print_height_change>
     844:	27 c0       	rjmp	.+78     	; 0x894 <__vector_4+0x118>
			}
			break;
			case CANGLE: // increment angle value (as long as <= MAX (90))
				if ((angle+valueChange) <= MAX_ANGLE)
     846:	20 91 f6 01 	lds	r18, 0x01F6	; 0x8001f6 <angle>
     84a:	30 91 f7 01 	lds	r19, 0x01F7	; 0x8001f7 <angle+0x1>
     84e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     852:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     856:	82 0f       	add	r24, r18
     858:	93 1f       	adc	r25, r19
     85a:	8b 35       	cpi	r24, 0x5B	; 91
     85c:	91 05       	cpc	r25, r1
     85e:	d4 f4       	brge	.+52     	; 0x894 <__vector_4+0x118>
				{
					angle=angle + valueChange;
     860:	20 91 f6 01 	lds	r18, 0x01F6	; 0x8001f6 <angle>
     864:	30 91 f7 01 	lds	r19, 0x01F7	; 0x8001f7 <angle+0x1>
     868:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     86c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     870:	82 0f       	add	r24, r18
     872:	93 1f       	adc	r25, r19
     874:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <angle+0x1>
     878:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <angle>
					ftoa(angle,angleConv); // convert angle to char array (angleConv) with 1 decimal place
     87c:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <angle>
     880:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <angle+0x1>
     884:	68 ec       	ldi	r22, 0xC8	; 200
     886:	71 e0       	ldi	r23, 0x01	; 1
     888:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
					print_angle_change(angleConv);	// print conversion to LCD
     88c:	88 ec       	ldi	r24, 0xC8	; 200
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	0e 94 99 03 	call	0x732	; 0x732 <print_angle_change>
			break;
		}
	}
	
	
	if (PINC == LEFT) // If left turn triggered interrupt
     894:	86 b1       	in	r24, 0x06	; 6
     896:	85 37       	cpi	r24, 0x75	; 117
     898:	09 f0       	breq	.+2      	; 0x89c <__vector_4+0x120>
     89a:	66 c0       	rjmp	.+204    	; 0x968 <__stack+0x69>
	{
		switch(state)
     89c:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <state>
     8a0:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <state+0x1>
     8a4:	82 30       	cpi	r24, 0x02	; 2
     8a6:	91 05       	cpc	r25, r1
     8a8:	99 f0       	breq	.+38     	; 0x8d0 <__vector_4+0x154>
     8aa:	83 30       	cpi	r24, 0x03	; 3
     8ac:	91 05       	cpc	r25, r1
     8ae:	b9 f1       	breq	.+110    	; 0x91e <__stack+0x1f>
     8b0:	01 97       	sbiw	r24, 0x01	; 1
     8b2:	09 f0       	breq	.+2      	; 0x8b6 <__vector_4+0x13a>
     8b4:	59 c0       	rjmp	.+178    	; 0x968 <__stack+0x69>
		{
			case HEIGHT: // Change increment/decrement value to 1
			// do nothing
			break;
			case ANGLE: // change to height state
			print_height_angle(angleConv,heightConv, 1);
     8b6:	41 e0       	ldi	r20, 0x01	; 1
     8b8:	50 e0       	ldi	r21, 0x00	; 0
     8ba:	68 ed       	ldi	r22, 0xD8	; 216
     8bc:	71 e0       	ldi	r23, 0x01	; 1
     8be:	88 ec       	ldi	r24, 0xC8	; 200
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	0e 94 2e 03 	call	0x65c	; 0x65c <print_height_angle>
			state = HEIGHT;
     8c6:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <state+0x1>
     8ca:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <state>
			break;
     8ce:	4c c0       	rjmp	.+152    	; 0x968 <__stack+0x69>
			case CHEIGHT: // decrement height value (as long as >= MIN (0) )
			if ((height-valueChange) >= 0)
     8d0:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <height>
     8d4:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <height+0x1>
     8d8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     8dc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     8e0:	82 1b       	sub	r24, r18
     8e2:	93 0b       	sbc	r25, r19
     8e4:	0a f4       	brpl	.+2      	; 0x8e8 <__vector_4+0x16c>
     8e6:	40 c0       	rjmp	.+128    	; 0x968 <__stack+0x69>
			{
				height = height - valueChange;
     8e8:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <height>
     8ec:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <height+0x1>
     8f0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     8f4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     8f8:	82 1b       	sub	r24, r18
     8fa:	93 0b       	sbc	r25, r19
     8fc:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <height+0x1>
     900:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <height>
				ftoa(height,heightConv); // convert height to char array (heightConv) with 1 decimal place
     904:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <height>
     908:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <height+0x1>
     90c:	68 ed       	ldi	r22, 0xD8	; 216
     90e:	71 e0       	ldi	r23, 0x01	; 1
     910:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_height_change(heightConv); // print conversion to LCD
     914:	88 ed       	ldi	r24, 0xD8	; 216
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	0e 94 74 03 	call	0x6e8	; 0x6e8 <print_height_change>
     91c:	25 c0       	rjmp	.+74     	; 0x968 <__stack+0x69>
			}
			break;
			case CANGLE: // increment angle value (as long as >= MIN (0))
			if((angle-valueChange) >= 0)
     91e:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <angle>
     922:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <angle+0x1>
     926:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     92a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     92e:	82 1b       	sub	r24, r18
     930:	93 0b       	sbc	r25, r19
     932:	d2 f0       	brmi	.+52     	; 0x968 <__stack+0x69>
			{
				angle = angle - valueChange;
     934:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <angle>
     938:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <angle+0x1>
     93c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     940:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     944:	82 1b       	sub	r24, r18
     946:	93 0b       	sbc	r25, r19
     948:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <angle+0x1>
     94c:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <angle>
				ftoa(angle,angleConv); // convert angle to char array (angleConv) with 1 decimal place
     950:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <angle>
     954:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <angle+0x1>
     958:	68 ec       	ldi	r22, 0xC8	; 200
     95a:	71 e0       	ldi	r23, 0x01	; 1
     95c:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_angle_change(angleConv);	// print conversion to LCD
     960:	88 ec       	ldi	r24, 0xC8	; 200
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	0e 94 99 03 	call	0x732	; 0x732 <print_angle_change>
			break;
		}
	}


	if(PINC == BUTTON) // If button press triggered interrupt
     968:	86 b1       	in	r24, 0x06	; 6
     96a:	87 36       	cpi	r24, 0x67	; 103
     96c:	09 f0       	breq	.+2      	; 0x970 <__stack+0x71>
     96e:	71 c1       	rjmp	.+738    	; 0xc52 <__stack+0x353>
	{
		switch(state)
     970:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <state>
     974:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <state+0x1>
     978:	81 30       	cpi	r24, 0x01	; 1
     97a:	91 05       	cpc	r25, r1
     97c:	f1 f0       	breq	.+60     	; 0x9ba <__stack+0xbb>
     97e:	1c f4       	brge	.+6      	; 0x986 <__stack+0x87>
     980:	89 2b       	or	r24, r25
     982:	41 f0       	breq	.+16     	; 0x994 <__stack+0x95>
     984:	66 c1       	rjmp	.+716    	; 0xc52 <__stack+0x353>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	91 05       	cpc	r25, r1
     98a:	51 f1       	breq	.+84     	; 0x9e0 <__stack+0xe1>
     98c:	03 97       	sbiw	r24, 0x03	; 3
     98e:	09 f4       	brne	.+2      	; 0x992 <__stack+0x93>
     990:	c2 c0       	rjmp	.+388    	; 0xb16 <__stack+0x217>
     992:	5f c1       	rjmp	.+702    	; 0xc52 <__stack+0x353>
		{
			case HEIGHT: // change to height change state
				ftoa(height,heightConv);
     994:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <height>
     998:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <height+0x1>
     99c:	68 ed       	ldi	r22, 0xD8	; 216
     99e:	71 e0       	ldi	r23, 0x01	; 1
     9a0:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_height_change(heightConv);
     9a4:	88 ed       	ldi	r24, 0xD8	; 216
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	0e 94 74 03 	call	0x6e8	; 0x6e8 <print_height_change>
				state = CHEIGHT;
     9ac:	82 e0       	ldi	r24, 0x02	; 2
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <state+0x1>
     9b4:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <state>
				break;
     9b8:	4c c1       	rjmp	.+664    	; 0xc52 <__stack+0x353>
			case ANGLE: // change to angle change state
				ftoa(angle,angleConv);
     9ba:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <angle>
     9be:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <angle+0x1>
     9c2:	68 ec       	ldi	r22, 0xC8	; 200
     9c4:	71 e0       	ldi	r23, 0x01	; 1
     9c6:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_angle_change(angleConv);
     9ca:	88 ec       	ldi	r24, 0xC8	; 200
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	0e 94 99 03 	call	0x732	; 0x732 <print_angle_change>
				state = CANGLE;
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <state+0x1>
     9da:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <state>
				break;
     9de:	39 c1       	rjmp	.+626    	; 0xc52 <__stack+0x353>
			case CHEIGHT: // confirm height change value
				valueConfirm = 1; // set flag
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <valueConfirm+0x1>
     9e8:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <valueConfirm>
				// Convert height to angle
				dAngle = height; // save height variable as double
     9ec:	60 91 f8 01 	lds	r22, 0x01F8	; 0x8001f8 <height>
     9f0:	70 91 f9 01 	lds	r23, 0x01F9	; 0x8001f9 <height+0x1>
     9f4:	07 2e       	mov	r0, r23
     9f6:	00 0c       	add	r0, r0
     9f8:	88 0b       	sbc	r24, r24
     9fa:	99 0b       	sbc	r25, r25
     9fc:	0e 94 70 07 	call	0xee0	; 0xee0 <__floatsisf>
     a00:	60 93 f2 01 	sts	0x01F2, r22	; 0x8001f2 <dAngle>
     a04:	70 93 f3 01 	sts	0x01F3, r23	; 0x8001f3 <dAngle+0x1>
     a08:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <dAngle+0x2>
     a0c:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <dAngle+0x3>
				dAngle = dAngle * dAngle; // square dAngle
     a10:	60 91 f2 01 	lds	r22, 0x01F2	; 0x8001f2 <dAngle>
     a14:	70 91 f3 01 	lds	r23, 0x01F3	; 0x8001f3 <dAngle+0x1>
     a18:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <dAngle+0x2>
     a1c:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <dAngle+0x3>
     a20:	20 91 f2 01 	lds	r18, 0x01F2	; 0x8001f2 <dAngle>
     a24:	30 91 f3 01 	lds	r19, 0x01F3	; 0x8001f3 <dAngle+0x1>
     a28:	40 91 f4 01 	lds	r20, 0x01F4	; 0x8001f4 <dAngle+0x2>
     a2c:	50 91 f5 01 	lds	r21, 0x01F5	; 0x8001f5 <dAngle+0x3>
     a30:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__mulsf3>
     a34:	60 93 f2 01 	sts	0x01F2, r22	; 0x8001f2 <dAngle>
     a38:	70 93 f3 01 	sts	0x01F3, r23	; 0x8001f3 <dAngle+0x1>
     a3c:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <dAngle+0x2>
     a40:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <dAngle+0x3>
				dAngle = sqrt(225 - dAngle) / 15;
     a44:	c0 90 f2 01 	lds	r12, 0x01F2	; 0x8001f2 <dAngle>
     a48:	d0 90 f3 01 	lds	r13, 0x01F3	; 0x8001f3 <dAngle+0x1>
     a4c:	e0 90 f4 01 	lds	r14, 0x01F4	; 0x8001f4 <dAngle+0x2>
     a50:	f0 90 f5 01 	lds	r15, 0x01F5	; 0x8001f5 <dAngle+0x3>
     a54:	a7 01       	movw	r20, r14
     a56:	96 01       	movw	r18, r12
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	81 e6       	ldi	r24, 0x61	; 97
     a5e:	93 e4       	ldi	r25, 0x43	; 67
     a60:	0e 94 54 06 	call	0xca8	; 0xca8 <__subsf3>
     a64:	0e 94 4d 09 	call	0x129a	; 0x129a <sqrt>
     a68:	20 e0       	ldi	r18, 0x00	; 0
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	40 e7       	ldi	r20, 0x70	; 112
     a6e:	51 e4       	ldi	r21, 0x41	; 65
     a70:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__divsf3>
     a74:	60 93 f2 01 	sts	0x01F2, r22	; 0x8001f2 <dAngle>
     a78:	70 93 f3 01 	sts	0x01F3, r23	; 0x8001f3 <dAngle+0x1>
     a7c:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <dAngle+0x2>
     a80:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <dAngle+0x3>
				dAngle = acos(dAngle) * (180 / M_PI);  // See Alex's lab notebook for formula used (combo of pythag. and trig.)
     a84:	60 91 f2 01 	lds	r22, 0x01F2	; 0x8001f2 <dAngle>
     a88:	70 91 f3 01 	lds	r23, 0x01F3	; 0x8001f3 <dAngle+0x1>
     a8c:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <dAngle+0x2>
     a90:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <dAngle+0x3>
     a94:	0e 94 43 06 	call	0xc86	; 0xc86 <acos>
     a98:	20 ee       	ldi	r18, 0xE0	; 224
     a9a:	3e e2       	ldi	r19, 0x2E	; 46
     a9c:	45 e6       	ldi	r20, 0x65	; 101
     a9e:	52 e4       	ldi	r21, 0x42	; 66
     aa0:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__mulsf3>
     aa4:	60 93 f2 01 	sts	0x01F2, r22	; 0x8001f2 <dAngle>
     aa8:	70 93 f3 01 	sts	0x01F3, r23	; 0x8001f3 <dAngle+0x1>
     aac:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <dAngle+0x2>
     ab0:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <dAngle+0x3>
				angle = floor(dAngle);
     ab4:	60 91 f2 01 	lds	r22, 0x01F2	; 0x8001f2 <dAngle>
     ab8:	70 91 f3 01 	lds	r23, 0x01F3	; 0x8001f3 <dAngle+0x1>
     abc:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <dAngle+0x2>
     ac0:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <dAngle+0x3>
     ac4:	0e 94 ab 07 	call	0xf56	; 0xf56 <floor>
     ac8:	0e 94 38 07 	call	0xe70	; 0xe70 <__fixsfsi>
     acc:	70 93 f7 01 	sts	0x01F7, r23	; 0x8001f7 <angle+0x1>
     ad0:	60 93 f6 01 	sts	0x01F6, r22	; 0x8001f6 <angle>
				if (height == 15)
     ad4:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <height>
     ad8:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <height+0x1>
     adc:	0f 97       	sbiw	r24, 0x0f	; 15
     ade:	31 f4       	brne	.+12     	; 0xaec <__stack+0x1ed>
				{
					angle = 90;
     ae0:	8a e5       	ldi	r24, 0x5A	; 90
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <angle+0x1>
     ae8:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <angle>
				}
			ftoa(angle, angleConv);
     aec:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <angle>
     af0:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <angle+0x1>
     af4:	68 ec       	ldi	r22, 0xC8	; 200
     af6:	71 e0       	ldi	r23, 0x01	; 1
     af8:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
			print_height_angle(angleConv,heightConv, 1); // refresh screen with height selected
     afc:	41 e0       	ldi	r20, 0x01	; 1
     afe:	50 e0       	ldi	r21, 0x00	; 0
     b00:	68 ed       	ldi	r22, 0xD8	; 216
     b02:	71 e0       	ldi	r23, 0x01	; 1
     b04:	88 ec       	ldi	r24, 0xC8	; 200
     b06:	91 e0       	ldi	r25, 0x01	; 1
     b08:	0e 94 2e 03 	call	0x65c	; 0x65c <print_height_angle>
			state = HEIGHT; // exit from change function
     b0c:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <state+0x1>
     b10:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <state>
			break;
     b14:	9e c0       	rjmp	.+316    	; 0xc52 <__stack+0x353>
			case CANGLE: // confirm angle change value
				valueConfirm = 1; // set flag - might need to make unique flag
     b16:	c1 e0       	ldi	r28, 0x01	; 1
     b18:	d0 e0       	ldi	r29, 0x00	; 0
     b1a:	d0 93 ed 01 	sts	0x01ED, r29	; 0x8001ed <valueConfirm+0x1>
     b1e:	c0 93 ec 01 	sts	0x01EC, r28	; 0x8001ec <valueConfirm>
				// Convert angle to height
				dHeight = angle; // save angle as double
     b22:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <angle>
     b26:	70 91 f7 01 	lds	r23, 0x01F7	; 0x8001f7 <angle+0x1>
     b2a:	07 2e       	mov	r0, r23
     b2c:	00 0c       	add	r0, r0
     b2e:	88 0b       	sbc	r24, r24
     b30:	99 0b       	sbc	r25, r25
     b32:	0e 94 70 07 	call	0xee0	; 0xee0 <__floatsisf>
     b36:	60 93 ee 01 	sts	0x01EE, r22	; 0x8001ee <dHeight>
     b3a:	70 93 ef 01 	sts	0x01EF, r23	; 0x8001ef <dHeight+0x1>
     b3e:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <dHeight+0x2>
     b42:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <dHeight+0x3>
				dHeight = (dHeight) * (M_PI / 180); // convert angle to radians
     b46:	60 91 ee 01 	lds	r22, 0x01EE	; 0x8001ee <dHeight>
     b4a:	70 91 ef 01 	lds	r23, 0x01EF	; 0x8001ef <dHeight+0x1>
     b4e:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <dHeight+0x2>
     b52:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <dHeight+0x3>
     b56:	25 e3       	ldi	r18, 0x35	; 53
     b58:	3a ef       	ldi	r19, 0xFA	; 250
     b5a:	4e e8       	ldi	r20, 0x8E	; 142
     b5c:	5c e3       	ldi	r21, 0x3C	; 60
     b5e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__mulsf3>
     b62:	60 93 ee 01 	sts	0x01EE, r22	; 0x8001ee <dHeight>
     b66:	70 93 ef 01 	sts	0x01EF, r23	; 0x8001ef <dHeight+0x1>
     b6a:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <dHeight+0x2>
     b6e:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <dHeight+0x3>
				dHeight = 15*(cos(dHeight));
     b72:	60 91 ee 01 	lds	r22, 0x01EE	; 0x8001ee <dHeight>
     b76:	70 91 ef 01 	lds	r23, 0x01EF	; 0x8001ef <dHeight+0x1>
     b7a:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <dHeight+0x2>
     b7e:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <dHeight+0x3>
     b82:	0e 94 c1 06 	call	0xd82	; 0xd82 <cos>
     b86:	20 e0       	ldi	r18, 0x00	; 0
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	40 e7       	ldi	r20, 0x70	; 112
     b8c:	51 e4       	ldi	r21, 0x41	; 65
     b8e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__mulsf3>
     b92:	60 93 ee 01 	sts	0x01EE, r22	; 0x8001ee <dHeight>
     b96:	70 93 ef 01 	sts	0x01EF, r23	; 0x8001ef <dHeight+0x1>
     b9a:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <dHeight+0x2>
     b9e:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <dHeight+0x3>
				dHeight = dHeight * dHeight;
     ba2:	60 91 ee 01 	lds	r22, 0x01EE	; 0x8001ee <dHeight>
     ba6:	70 91 ef 01 	lds	r23, 0x01EF	; 0x8001ef <dHeight+0x1>
     baa:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <dHeight+0x2>
     bae:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <dHeight+0x3>
     bb2:	20 91 ee 01 	lds	r18, 0x01EE	; 0x8001ee <dHeight>
     bb6:	30 91 ef 01 	lds	r19, 0x01EF	; 0x8001ef <dHeight+0x1>
     bba:	40 91 f0 01 	lds	r20, 0x01F0	; 0x8001f0 <dHeight+0x2>
     bbe:	50 91 f1 01 	lds	r21, 0x01F1	; 0x8001f1 <dHeight+0x3>
     bc2:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__mulsf3>
     bc6:	60 93 ee 01 	sts	0x01EE, r22	; 0x8001ee <dHeight>
     bca:	70 93 ef 01 	sts	0x01EF, r23	; 0x8001ef <dHeight+0x1>
     bce:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <dHeight+0x2>
     bd2:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <dHeight+0x3>
				dHeight = sqrt((225-dHeight));
     bd6:	c0 90 ee 01 	lds	r12, 0x01EE	; 0x8001ee <dHeight>
     bda:	d0 90 ef 01 	lds	r13, 0x01EF	; 0x8001ef <dHeight+0x1>
     bde:	e0 90 f0 01 	lds	r14, 0x01F0	; 0x8001f0 <dHeight+0x2>
     be2:	f0 90 f1 01 	lds	r15, 0x01F1	; 0x8001f1 <dHeight+0x3>
     be6:	a7 01       	movw	r20, r14
     be8:	96 01       	movw	r18, r12
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	81 e6       	ldi	r24, 0x61	; 97
     bf0:	93 e4       	ldi	r25, 0x43	; 67
     bf2:	0e 94 54 06 	call	0xca8	; 0xca8 <__subsf3>
     bf6:	0e 94 4d 09 	call	0x129a	; 0x129a <sqrt>
     bfa:	60 93 ee 01 	sts	0x01EE, r22	; 0x8001ee <dHeight>
     bfe:	70 93 ef 01 	sts	0x01EF, r23	; 0x8001ef <dHeight+0x1>
     c02:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <dHeight+0x2>
     c06:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <dHeight+0x3>
				height = floor(dHeight);
     c0a:	60 91 ee 01 	lds	r22, 0x01EE	; 0x8001ee <dHeight>
     c0e:	70 91 ef 01 	lds	r23, 0x01EF	; 0x8001ef <dHeight+0x1>
     c12:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <dHeight+0x2>
     c16:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <dHeight+0x3>
     c1a:	0e 94 ab 07 	call	0xf56	; 0xf56 <floor>
     c1e:	0e 94 38 07 	call	0xe70	; 0xe70 <__fixsfsi>
     c22:	70 93 f9 01 	sts	0x01F9, r23	; 0x8001f9 <height+0x1>
     c26:	60 93 f8 01 	sts	0x01F8, r22	; 0x8001f8 <height>
				ftoa(height,heightConv);
     c2a:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <height>
     c2e:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <height+0x1>
     c32:	68 ed       	ldi	r22, 0xD8	; 216
     c34:	71 e0       	ldi	r23, 0x01	; 1
     c36:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_height_angle(angleConv,heightConv, 0); // refresh screen with angle selected
     c3a:	40 e0       	ldi	r20, 0x00	; 0
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	68 ed       	ldi	r22, 0xD8	; 216
     c40:	71 e0       	ldi	r23, 0x01	; 1
     c42:	88 ec       	ldi	r24, 0xC8	; 200
     c44:	91 e0       	ldi	r25, 0x01	; 1
     c46:	0e 94 2e 03 	call	0x65c	; 0x65c <print_height_angle>
				state = ANGLE;
     c4a:	d0 93 fb 01 	sts	0x01FB, r29	; 0x8001fb <state+0x1>
     c4e:	c0 93 fa 01 	sts	0x01FA, r28	; 0x8001fa <state>
			break;
		}
	}
	
	while(PINC != 0b01110111)
     c52:	86 b1       	in	r24, 0x06	; 6
     c54:	87 37       	cpi	r24, 0x77	; 119
     c56:	e9 f7       	brne	.-6      	; 0xc52 <__stack+0x353>
	{
		
	}

}
     c58:	ff 91       	pop	r31
     c5a:	ef 91       	pop	r30
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	bf 91       	pop	r27
     c62:	af 91       	pop	r26
     c64:	9f 91       	pop	r25
     c66:	8f 91       	pop	r24
     c68:	7f 91       	pop	r23
     c6a:	6f 91       	pop	r22
     c6c:	5f 91       	pop	r21
     c6e:	4f 91       	pop	r20
     c70:	3f 91       	pop	r19
     c72:	2f 91       	pop	r18
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	cf 90       	pop	r12
     c7c:	0f 90       	pop	r0
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	0f 90       	pop	r0
     c82:	1f 90       	pop	r1
     c84:	18 95       	reti

00000c86 <acos>:
     c86:	9f 93       	push	r25
     c88:	9f 77       	andi	r25, 0x7F	; 127
     c8a:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fp_arccos>
     c8e:	0f 90       	pop	r0
     c90:	00 20       	and	r0, r0
     c92:	42 f4       	brpl	.+16     	; 0xca4 <acos+0x1e>
     c94:	90 58       	subi	r25, 0x80	; 128
     c96:	a2 ea       	ldi	r26, 0xA2	; 162
     c98:	2a ed       	ldi	r18, 0xDA	; 218
     c9a:	3f e0       	ldi	r19, 0x0F	; 15
     c9c:	49 e4       	ldi	r20, 0x49	; 73
     c9e:	50 e4       	ldi	r21, 0x40	; 64
     ca0:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__addsf3x>
     ca4:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__fp_round>

00000ca8 <__subsf3>:
     ca8:	50 58       	subi	r21, 0x80	; 128

00000caa <__addsf3>:
     caa:	bb 27       	eor	r27, r27
     cac:	aa 27       	eor	r26, r26
     cae:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__addsf3x>
     cb2:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__fp_round>
     cb6:	0e 94 3b 08 	call	0x1076	; 0x1076 <__fp_pscA>
     cba:	38 f0       	brcs	.+14     	; 0xcca <__addsf3+0x20>
     cbc:	0e 94 42 08 	call	0x1084	; 0x1084 <__fp_pscB>
     cc0:	20 f0       	brcs	.+8      	; 0xcca <__addsf3+0x20>
     cc2:	39 f4       	brne	.+14     	; 0xcd2 <__addsf3+0x28>
     cc4:	9f 3f       	cpi	r25, 0xFF	; 255
     cc6:	19 f4       	brne	.+6      	; 0xcce <__addsf3+0x24>
     cc8:	26 f4       	brtc	.+8      	; 0xcd2 <__addsf3+0x28>
     cca:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__fp_nan>
     cce:	0e f4       	brtc	.+2      	; 0xcd2 <__addsf3+0x28>
     cd0:	e0 95       	com	r30
     cd2:	e7 fb       	bst	r30, 7
     cd4:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__fp_inf>

00000cd8 <__addsf3x>:
     cd8:	e9 2f       	mov	r30, r25
     cda:	0e 94 99 08 	call	0x1132	; 0x1132 <__fp_split3>
     cde:	58 f3       	brcs	.-42     	; 0xcb6 <__addsf3+0xc>
     ce0:	ba 17       	cp	r27, r26
     ce2:	62 07       	cpc	r22, r18
     ce4:	73 07       	cpc	r23, r19
     ce6:	84 07       	cpc	r24, r20
     ce8:	95 07       	cpc	r25, r21
     cea:	20 f0       	brcs	.+8      	; 0xcf4 <__addsf3x+0x1c>
     cec:	79 f4       	brne	.+30     	; 0xd0c <__addsf3x+0x34>
     cee:	a6 f5       	brtc	.+104    	; 0xd58 <__addsf3x+0x80>
     cf0:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_zero>
     cf4:	0e f4       	brtc	.+2      	; 0xcf8 <__addsf3x+0x20>
     cf6:	e0 95       	com	r30
     cf8:	0b 2e       	mov	r0, r27
     cfa:	ba 2f       	mov	r27, r26
     cfc:	a0 2d       	mov	r26, r0
     cfe:	0b 01       	movw	r0, r22
     d00:	b9 01       	movw	r22, r18
     d02:	90 01       	movw	r18, r0
     d04:	0c 01       	movw	r0, r24
     d06:	ca 01       	movw	r24, r20
     d08:	a0 01       	movw	r20, r0
     d0a:	11 24       	eor	r1, r1
     d0c:	ff 27       	eor	r31, r31
     d0e:	59 1b       	sub	r21, r25
     d10:	99 f0       	breq	.+38     	; 0xd38 <__addsf3x+0x60>
     d12:	59 3f       	cpi	r21, 0xF9	; 249
     d14:	50 f4       	brcc	.+20     	; 0xd2a <__addsf3x+0x52>
     d16:	50 3e       	cpi	r21, 0xE0	; 224
     d18:	68 f1       	brcs	.+90     	; 0xd74 <__addsf3x+0x9c>
     d1a:	1a 16       	cp	r1, r26
     d1c:	f0 40       	sbci	r31, 0x00	; 0
     d1e:	a2 2f       	mov	r26, r18
     d20:	23 2f       	mov	r18, r19
     d22:	34 2f       	mov	r19, r20
     d24:	44 27       	eor	r20, r20
     d26:	58 5f       	subi	r21, 0xF8	; 248
     d28:	f3 cf       	rjmp	.-26     	; 0xd10 <__addsf3x+0x38>
     d2a:	46 95       	lsr	r20
     d2c:	37 95       	ror	r19
     d2e:	27 95       	ror	r18
     d30:	a7 95       	ror	r26
     d32:	f0 40       	sbci	r31, 0x00	; 0
     d34:	53 95       	inc	r21
     d36:	c9 f7       	brne	.-14     	; 0xd2a <__addsf3x+0x52>
     d38:	7e f4       	brtc	.+30     	; 0xd58 <__addsf3x+0x80>
     d3a:	1f 16       	cp	r1, r31
     d3c:	ba 0b       	sbc	r27, r26
     d3e:	62 0b       	sbc	r22, r18
     d40:	73 0b       	sbc	r23, r19
     d42:	84 0b       	sbc	r24, r20
     d44:	ba f0       	brmi	.+46     	; 0xd74 <__addsf3x+0x9c>
     d46:	91 50       	subi	r25, 0x01	; 1
     d48:	a1 f0       	breq	.+40     	; 0xd72 <__addsf3x+0x9a>
     d4a:	ff 0f       	add	r31, r31
     d4c:	bb 1f       	adc	r27, r27
     d4e:	66 1f       	adc	r22, r22
     d50:	77 1f       	adc	r23, r23
     d52:	88 1f       	adc	r24, r24
     d54:	c2 f7       	brpl	.-16     	; 0xd46 <__addsf3x+0x6e>
     d56:	0e c0       	rjmp	.+28     	; 0xd74 <__addsf3x+0x9c>
     d58:	ba 0f       	add	r27, r26
     d5a:	62 1f       	adc	r22, r18
     d5c:	73 1f       	adc	r23, r19
     d5e:	84 1f       	adc	r24, r20
     d60:	48 f4       	brcc	.+18     	; 0xd74 <__addsf3x+0x9c>
     d62:	87 95       	ror	r24
     d64:	77 95       	ror	r23
     d66:	67 95       	ror	r22
     d68:	b7 95       	ror	r27
     d6a:	f7 95       	ror	r31
     d6c:	9e 3f       	cpi	r25, 0xFE	; 254
     d6e:	08 f0       	brcs	.+2      	; 0xd72 <__addsf3x+0x9a>
     d70:	b0 cf       	rjmp	.-160    	; 0xcd2 <__addsf3+0x28>
     d72:	93 95       	inc	r25
     d74:	88 0f       	add	r24, r24
     d76:	08 f0       	brcs	.+2      	; 0xd7a <__addsf3x+0xa2>
     d78:	99 27       	eor	r25, r25
     d7a:	ee 0f       	add	r30, r30
     d7c:	97 95       	ror	r25
     d7e:	87 95       	ror	r24
     d80:	08 95       	ret

00000d82 <cos>:
     d82:	0e 94 4b 08 	call	0x1096	; 0x1096 <__fp_rempio2>
     d86:	e3 95       	inc	r30
     d88:	0c 94 85 08 	jmp	0x110a	; 0x110a <__fp_sinus>

00000d8c <__divsf3>:
     d8c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <__divsf3x>
     d90:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__fp_round>
     d94:	0e 94 42 08 	call	0x1084	; 0x1084 <__fp_pscB>
     d98:	58 f0       	brcs	.+22     	; 0xdb0 <__divsf3+0x24>
     d9a:	0e 94 3b 08 	call	0x1076	; 0x1076 <__fp_pscA>
     d9e:	40 f0       	brcs	.+16     	; 0xdb0 <__divsf3+0x24>
     da0:	29 f4       	brne	.+10     	; 0xdac <__divsf3+0x20>
     da2:	5f 3f       	cpi	r21, 0xFF	; 255
     da4:	29 f0       	breq	.+10     	; 0xdb0 <__divsf3+0x24>
     da6:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__fp_inf>
     daa:	51 11       	cpse	r21, r1
     dac:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <__fp_szero>
     db0:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__fp_nan>

00000db4 <__divsf3x>:
     db4:	0e 94 99 08 	call	0x1132	; 0x1132 <__fp_split3>
     db8:	68 f3       	brcs	.-38     	; 0xd94 <__divsf3+0x8>

00000dba <__divsf3_pse>:
     dba:	99 23       	and	r25, r25
     dbc:	b1 f3       	breq	.-20     	; 0xdaa <__divsf3+0x1e>
     dbe:	55 23       	and	r21, r21
     dc0:	91 f3       	breq	.-28     	; 0xda6 <__divsf3+0x1a>
     dc2:	95 1b       	sub	r25, r21
     dc4:	55 0b       	sbc	r21, r21
     dc6:	bb 27       	eor	r27, r27
     dc8:	aa 27       	eor	r26, r26
     dca:	62 17       	cp	r22, r18
     dcc:	73 07       	cpc	r23, r19
     dce:	84 07       	cpc	r24, r20
     dd0:	38 f0       	brcs	.+14     	; 0xde0 <__divsf3_pse+0x26>
     dd2:	9f 5f       	subi	r25, 0xFF	; 255
     dd4:	5f 4f       	sbci	r21, 0xFF	; 255
     dd6:	22 0f       	add	r18, r18
     dd8:	33 1f       	adc	r19, r19
     dda:	44 1f       	adc	r20, r20
     ddc:	aa 1f       	adc	r26, r26
     dde:	a9 f3       	breq	.-22     	; 0xdca <__divsf3_pse+0x10>
     de0:	35 d0       	rcall	.+106    	; 0xe4c <__divsf3_pse+0x92>
     de2:	0e 2e       	mov	r0, r30
     de4:	3a f0       	brmi	.+14     	; 0xdf4 <__divsf3_pse+0x3a>
     de6:	e0 e8       	ldi	r30, 0x80	; 128
     de8:	32 d0       	rcall	.+100    	; 0xe4e <__divsf3_pse+0x94>
     dea:	91 50       	subi	r25, 0x01	; 1
     dec:	50 40       	sbci	r21, 0x00	; 0
     dee:	e6 95       	lsr	r30
     df0:	00 1c       	adc	r0, r0
     df2:	ca f7       	brpl	.-14     	; 0xde6 <__divsf3_pse+0x2c>
     df4:	2b d0       	rcall	.+86     	; 0xe4c <__divsf3_pse+0x92>
     df6:	fe 2f       	mov	r31, r30
     df8:	29 d0       	rcall	.+82     	; 0xe4c <__divsf3_pse+0x92>
     dfa:	66 0f       	add	r22, r22
     dfc:	77 1f       	adc	r23, r23
     dfe:	88 1f       	adc	r24, r24
     e00:	bb 1f       	adc	r27, r27
     e02:	26 17       	cp	r18, r22
     e04:	37 07       	cpc	r19, r23
     e06:	48 07       	cpc	r20, r24
     e08:	ab 07       	cpc	r26, r27
     e0a:	b0 e8       	ldi	r27, 0x80	; 128
     e0c:	09 f0       	breq	.+2      	; 0xe10 <__divsf3_pse+0x56>
     e0e:	bb 0b       	sbc	r27, r27
     e10:	80 2d       	mov	r24, r0
     e12:	bf 01       	movw	r22, r30
     e14:	ff 27       	eor	r31, r31
     e16:	93 58       	subi	r25, 0x83	; 131
     e18:	5f 4f       	sbci	r21, 0xFF	; 255
     e1a:	3a f0       	brmi	.+14     	; 0xe2a <__divsf3_pse+0x70>
     e1c:	9e 3f       	cpi	r25, 0xFE	; 254
     e1e:	51 05       	cpc	r21, r1
     e20:	78 f0       	brcs	.+30     	; 0xe40 <__divsf3_pse+0x86>
     e22:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__fp_inf>
     e26:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <__fp_szero>
     e2a:	5f 3f       	cpi	r21, 0xFF	; 255
     e2c:	e4 f3       	brlt	.-8      	; 0xe26 <__divsf3_pse+0x6c>
     e2e:	98 3e       	cpi	r25, 0xE8	; 232
     e30:	d4 f3       	brlt	.-12     	; 0xe26 <__divsf3_pse+0x6c>
     e32:	86 95       	lsr	r24
     e34:	77 95       	ror	r23
     e36:	67 95       	ror	r22
     e38:	b7 95       	ror	r27
     e3a:	f7 95       	ror	r31
     e3c:	9f 5f       	subi	r25, 0xFF	; 255
     e3e:	c9 f7       	brne	.-14     	; 0xe32 <__divsf3_pse+0x78>
     e40:	88 0f       	add	r24, r24
     e42:	91 1d       	adc	r25, r1
     e44:	96 95       	lsr	r25
     e46:	87 95       	ror	r24
     e48:	97 f9       	bld	r25, 7
     e4a:	08 95       	ret
     e4c:	e1 e0       	ldi	r30, 0x01	; 1
     e4e:	66 0f       	add	r22, r22
     e50:	77 1f       	adc	r23, r23
     e52:	88 1f       	adc	r24, r24
     e54:	bb 1f       	adc	r27, r27
     e56:	62 17       	cp	r22, r18
     e58:	73 07       	cpc	r23, r19
     e5a:	84 07       	cpc	r24, r20
     e5c:	ba 07       	cpc	r27, r26
     e5e:	20 f0       	brcs	.+8      	; 0xe68 <__divsf3_pse+0xae>
     e60:	62 1b       	sub	r22, r18
     e62:	73 0b       	sbc	r23, r19
     e64:	84 0b       	sbc	r24, r20
     e66:	ba 0b       	sbc	r27, r26
     e68:	ee 1f       	adc	r30, r30
     e6a:	88 f7       	brcc	.-30     	; 0xe4e <__divsf3_pse+0x94>
     e6c:	e0 95       	com	r30
     e6e:	08 95       	ret

00000e70 <__fixsfsi>:
     e70:	0e 94 3f 07 	call	0xe7e	; 0xe7e <__fixunssfsi>
     e74:	68 94       	set
     e76:	b1 11       	cpse	r27, r1
     e78:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <__fp_szero>
     e7c:	08 95       	ret

00000e7e <__fixunssfsi>:
     e7e:	0e 94 a1 08 	call	0x1142	; 0x1142 <__fp_splitA>
     e82:	88 f0       	brcs	.+34     	; 0xea6 <__fixunssfsi+0x28>
     e84:	9f 57       	subi	r25, 0x7F	; 127
     e86:	98 f0       	brcs	.+38     	; 0xeae <__fixunssfsi+0x30>
     e88:	b9 2f       	mov	r27, r25
     e8a:	99 27       	eor	r25, r25
     e8c:	b7 51       	subi	r27, 0x17	; 23
     e8e:	b0 f0       	brcs	.+44     	; 0xebc <__fixunssfsi+0x3e>
     e90:	e1 f0       	breq	.+56     	; 0xeca <__fixunssfsi+0x4c>
     e92:	66 0f       	add	r22, r22
     e94:	77 1f       	adc	r23, r23
     e96:	88 1f       	adc	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	1a f0       	brmi	.+6      	; 0xea2 <__fixunssfsi+0x24>
     e9c:	ba 95       	dec	r27
     e9e:	c9 f7       	brne	.-14     	; 0xe92 <__fixunssfsi+0x14>
     ea0:	14 c0       	rjmp	.+40     	; 0xeca <__fixunssfsi+0x4c>
     ea2:	b1 30       	cpi	r27, 0x01	; 1
     ea4:	91 f0       	breq	.+36     	; 0xeca <__fixunssfsi+0x4c>
     ea6:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__fp_zero>
     eaa:	b1 e0       	ldi	r27, 0x01	; 1
     eac:	08 95       	ret
     eae:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_zero>
     eb2:	67 2f       	mov	r22, r23
     eb4:	78 2f       	mov	r23, r24
     eb6:	88 27       	eor	r24, r24
     eb8:	b8 5f       	subi	r27, 0xF8	; 248
     eba:	39 f0       	breq	.+14     	; 0xeca <__fixunssfsi+0x4c>
     ebc:	b9 3f       	cpi	r27, 0xF9	; 249
     ebe:	cc f3       	brlt	.-14     	; 0xeb2 <__fixunssfsi+0x34>
     ec0:	86 95       	lsr	r24
     ec2:	77 95       	ror	r23
     ec4:	67 95       	ror	r22
     ec6:	b3 95       	inc	r27
     ec8:	d9 f7       	brne	.-10     	; 0xec0 <__fixunssfsi+0x42>
     eca:	3e f4       	brtc	.+14     	; 0xeda <__fixunssfsi+0x5c>
     ecc:	90 95       	com	r25
     ece:	80 95       	com	r24
     ed0:	70 95       	com	r23
     ed2:	61 95       	neg	r22
     ed4:	7f 4f       	sbci	r23, 0xFF	; 255
     ed6:	8f 4f       	sbci	r24, 0xFF	; 255
     ed8:	9f 4f       	sbci	r25, 0xFF	; 255
     eda:	08 95       	ret

00000edc <__floatunsisf>:
     edc:	e8 94       	clt
     ede:	09 c0       	rjmp	.+18     	; 0xef2 <__floatsisf+0x12>

00000ee0 <__floatsisf>:
     ee0:	97 fb       	bst	r25, 7
     ee2:	3e f4       	brtc	.+14     	; 0xef2 <__floatsisf+0x12>
     ee4:	90 95       	com	r25
     ee6:	80 95       	com	r24
     ee8:	70 95       	com	r23
     eea:	61 95       	neg	r22
     eec:	7f 4f       	sbci	r23, 0xFF	; 255
     eee:	8f 4f       	sbci	r24, 0xFF	; 255
     ef0:	9f 4f       	sbci	r25, 0xFF	; 255
     ef2:	99 23       	and	r25, r25
     ef4:	a9 f0       	breq	.+42     	; 0xf20 <__floatsisf+0x40>
     ef6:	f9 2f       	mov	r31, r25
     ef8:	96 e9       	ldi	r25, 0x96	; 150
     efa:	bb 27       	eor	r27, r27
     efc:	93 95       	inc	r25
     efe:	f6 95       	lsr	r31
     f00:	87 95       	ror	r24
     f02:	77 95       	ror	r23
     f04:	67 95       	ror	r22
     f06:	b7 95       	ror	r27
     f08:	f1 11       	cpse	r31, r1
     f0a:	f8 cf       	rjmp	.-16     	; 0xefc <__floatsisf+0x1c>
     f0c:	fa f4       	brpl	.+62     	; 0xf4c <__floatsisf+0x6c>
     f0e:	bb 0f       	add	r27, r27
     f10:	11 f4       	brne	.+4      	; 0xf16 <__floatsisf+0x36>
     f12:	60 ff       	sbrs	r22, 0
     f14:	1b c0       	rjmp	.+54     	; 0xf4c <__floatsisf+0x6c>
     f16:	6f 5f       	subi	r22, 0xFF	; 255
     f18:	7f 4f       	sbci	r23, 0xFF	; 255
     f1a:	8f 4f       	sbci	r24, 0xFF	; 255
     f1c:	9f 4f       	sbci	r25, 0xFF	; 255
     f1e:	16 c0       	rjmp	.+44     	; 0xf4c <__floatsisf+0x6c>
     f20:	88 23       	and	r24, r24
     f22:	11 f0       	breq	.+4      	; 0xf28 <__floatsisf+0x48>
     f24:	96 e9       	ldi	r25, 0x96	; 150
     f26:	11 c0       	rjmp	.+34     	; 0xf4a <__floatsisf+0x6a>
     f28:	77 23       	and	r23, r23
     f2a:	21 f0       	breq	.+8      	; 0xf34 <__floatsisf+0x54>
     f2c:	9e e8       	ldi	r25, 0x8E	; 142
     f2e:	87 2f       	mov	r24, r23
     f30:	76 2f       	mov	r23, r22
     f32:	05 c0       	rjmp	.+10     	; 0xf3e <__floatsisf+0x5e>
     f34:	66 23       	and	r22, r22
     f36:	71 f0       	breq	.+28     	; 0xf54 <__floatsisf+0x74>
     f38:	96 e8       	ldi	r25, 0x86	; 134
     f3a:	86 2f       	mov	r24, r22
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	2a f0       	brmi	.+10     	; 0xf4c <__floatsisf+0x6c>
     f42:	9a 95       	dec	r25
     f44:	66 0f       	add	r22, r22
     f46:	77 1f       	adc	r23, r23
     f48:	88 1f       	adc	r24, r24
     f4a:	da f7       	brpl	.-10     	; 0xf42 <__floatsisf+0x62>
     f4c:	88 0f       	add	r24, r24
     f4e:	96 95       	lsr	r25
     f50:	87 95       	ror	r24
     f52:	97 f9       	bld	r25, 7
     f54:	08 95       	ret

00000f56 <floor>:
     f56:	0e 94 bb 08 	call	0x1176	; 0x1176 <__fp_trunc>
     f5a:	90 f0       	brcs	.+36     	; 0xf80 <floor+0x2a>
     f5c:	9f 37       	cpi	r25, 0x7F	; 127
     f5e:	48 f4       	brcc	.+18     	; 0xf72 <floor+0x1c>
     f60:	91 11       	cpse	r25, r1
     f62:	16 f0       	brts	.+4      	; 0xf68 <floor+0x12>
     f64:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <__fp_szero>
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	70 e0       	ldi	r23, 0x00	; 0
     f6c:	80 e8       	ldi	r24, 0x80	; 128
     f6e:	9f eb       	ldi	r25, 0xBF	; 191
     f70:	08 95       	ret
     f72:	26 f4       	brtc	.+8      	; 0xf7c <floor+0x26>
     f74:	1b 16       	cp	r1, r27
     f76:	61 1d       	adc	r22, r1
     f78:	71 1d       	adc	r23, r1
     f7a:	81 1d       	adc	r24, r1
     f7c:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_mintl>
     f80:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__fp_mpack>

00000f84 <__fp_arccos>:
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	1f 93       	push	r17
     f8a:	0f 93       	push	r16
     f8c:	8b 01       	movw	r16, r22
     f8e:	ec 01       	movw	r28, r24
     f90:	e4 eb       	ldi	r30, 0xB4	; 180
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	0e 94 14 08 	call	0x1028	; 0x1028 <__fp_powser>
     f98:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__fp_round>
     f9c:	98 01       	movw	r18, r16
     f9e:	ae 01       	movw	r20, r28
     fa0:	8b 01       	movw	r16, r22
     fa2:	ec 01       	movw	r28, r24
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	80 e8       	ldi	r24, 0x80	; 128
     faa:	9f e3       	ldi	r25, 0x3F	; 63
     fac:	0e 94 54 06 	call	0xca8	; 0xca8 <__subsf3>
     fb0:	0e 94 4d 09 	call	0x129a	; 0x129a <sqrt>
     fb4:	98 01       	movw	r18, r16
     fb6:	ae 01       	movw	r20, r28
     fb8:	0f 91       	pop	r16
     fba:	1f 91       	pop	r17
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	0c 94 ed 08 	jmp	0x11da	; 0x11da <__mulsf3x>

00000fc4 <__fp_inf>:
     fc4:	97 f9       	bld	r25, 7
     fc6:	9f 67       	ori	r25, 0x7F	; 127
     fc8:	80 e8       	ldi	r24, 0x80	; 128
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	08 95       	ret

00000fd0 <__fp_mintl>:
     fd0:	88 23       	and	r24, r24
     fd2:	71 f4       	brne	.+28     	; 0xff0 <__fp_mintl+0x20>
     fd4:	77 23       	and	r23, r23
     fd6:	21 f0       	breq	.+8      	; 0xfe0 <__fp_mintl+0x10>
     fd8:	98 50       	subi	r25, 0x08	; 8
     fda:	87 2b       	or	r24, r23
     fdc:	76 2f       	mov	r23, r22
     fde:	07 c0       	rjmp	.+14     	; 0xfee <__fp_mintl+0x1e>
     fe0:	66 23       	and	r22, r22
     fe2:	11 f4       	brne	.+4      	; 0xfe8 <__fp_mintl+0x18>
     fe4:	99 27       	eor	r25, r25
     fe6:	0d c0       	rjmp	.+26     	; 0x1002 <__fp_mintl+0x32>
     fe8:	90 51       	subi	r25, 0x10	; 16
     fea:	86 2b       	or	r24, r22
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	60 e0       	ldi	r22, 0x00	; 0
     ff0:	2a f0       	brmi	.+10     	; 0xffc <__fp_mintl+0x2c>
     ff2:	9a 95       	dec	r25
     ff4:	66 0f       	add	r22, r22
     ff6:	77 1f       	adc	r23, r23
     ff8:	88 1f       	adc	r24, r24
     ffa:	da f7       	brpl	.-10     	; 0xff2 <__fp_mintl+0x22>
     ffc:	88 0f       	add	r24, r24
     ffe:	96 95       	lsr	r25
    1000:	87 95       	ror	r24
    1002:	97 f9       	bld	r25, 7
    1004:	08 95       	ret

00001006 <__fp_mpack>:
    1006:	9f 3f       	cpi	r25, 0xFF	; 255
    1008:	31 f0       	breq	.+12     	; 0x1016 <__fp_mpack_finite+0xc>

0000100a <__fp_mpack_finite>:
    100a:	91 50       	subi	r25, 0x01	; 1
    100c:	20 f4       	brcc	.+8      	; 0x1016 <__fp_mpack_finite+0xc>
    100e:	87 95       	ror	r24
    1010:	77 95       	ror	r23
    1012:	67 95       	ror	r22
    1014:	b7 95       	ror	r27
    1016:	88 0f       	add	r24, r24
    1018:	91 1d       	adc	r25, r1
    101a:	96 95       	lsr	r25
    101c:	87 95       	ror	r24
    101e:	97 f9       	bld	r25, 7
    1020:	08 95       	ret

00001022 <__fp_nan>:
    1022:	9f ef       	ldi	r25, 0xFF	; 255
    1024:	80 ec       	ldi	r24, 0xC0	; 192
    1026:	08 95       	ret

00001028 <__fp_powser>:
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	1f 93       	push	r17
    102e:	0f 93       	push	r16
    1030:	ff 92       	push	r15
    1032:	ef 92       	push	r14
    1034:	df 92       	push	r13
    1036:	7b 01       	movw	r14, r22
    1038:	8c 01       	movw	r16, r24
    103a:	68 94       	set
    103c:	06 c0       	rjmp	.+12     	; 0x104a <__fp_powser+0x22>
    103e:	da 2e       	mov	r13, r26
    1040:	ef 01       	movw	r28, r30
    1042:	0e 94 ed 08 	call	0x11da	; 0x11da <__mulsf3x>
    1046:	fe 01       	movw	r30, r28
    1048:	e8 94       	clt
    104a:	a5 91       	lpm	r26, Z+
    104c:	25 91       	lpm	r18, Z+
    104e:	35 91       	lpm	r19, Z+
    1050:	45 91       	lpm	r20, Z+
    1052:	55 91       	lpm	r21, Z+
    1054:	a6 f3       	brts	.-24     	; 0x103e <__fp_powser+0x16>
    1056:	ef 01       	movw	r28, r30
    1058:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__addsf3x>
    105c:	fe 01       	movw	r30, r28
    105e:	97 01       	movw	r18, r14
    1060:	a8 01       	movw	r20, r16
    1062:	da 94       	dec	r13
    1064:	69 f7       	brne	.-38     	; 0x1040 <__fp_powser+0x18>
    1066:	df 90       	pop	r13
    1068:	ef 90       	pop	r14
    106a:	ff 90       	pop	r15
    106c:	0f 91       	pop	r16
    106e:	1f 91       	pop	r17
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <__fp_pscA>:
    1076:	00 24       	eor	r0, r0
    1078:	0a 94       	dec	r0
    107a:	16 16       	cp	r1, r22
    107c:	17 06       	cpc	r1, r23
    107e:	18 06       	cpc	r1, r24
    1080:	09 06       	cpc	r0, r25
    1082:	08 95       	ret

00001084 <__fp_pscB>:
    1084:	00 24       	eor	r0, r0
    1086:	0a 94       	dec	r0
    1088:	12 16       	cp	r1, r18
    108a:	13 06       	cpc	r1, r19
    108c:	14 06       	cpc	r1, r20
    108e:	05 06       	cpc	r0, r21
    1090:	08 95       	ret
    1092:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__fp_nan>

00001096 <__fp_rempio2>:
    1096:	0e 94 a1 08 	call	0x1142	; 0x1142 <__fp_splitA>
    109a:	d8 f3       	brcs	.-10     	; 0x1092 <__fp_pscB+0xe>
    109c:	e8 94       	clt
    109e:	e0 e0       	ldi	r30, 0x00	; 0
    10a0:	bb 27       	eor	r27, r27
    10a2:	9f 57       	subi	r25, 0x7F	; 127
    10a4:	f0 f0       	brcs	.+60     	; 0x10e2 <__fp_rempio2+0x4c>
    10a6:	2a ed       	ldi	r18, 0xDA	; 218
    10a8:	3f e0       	ldi	r19, 0x0F	; 15
    10aa:	49 ec       	ldi	r20, 0xC9	; 201
    10ac:	06 c0       	rjmp	.+12     	; 0x10ba <__fp_rempio2+0x24>
    10ae:	ee 0f       	add	r30, r30
    10b0:	bb 0f       	add	r27, r27
    10b2:	66 1f       	adc	r22, r22
    10b4:	77 1f       	adc	r23, r23
    10b6:	88 1f       	adc	r24, r24
    10b8:	28 f0       	brcs	.+10     	; 0x10c4 <__fp_rempio2+0x2e>
    10ba:	b2 3a       	cpi	r27, 0xA2	; 162
    10bc:	62 07       	cpc	r22, r18
    10be:	73 07       	cpc	r23, r19
    10c0:	84 07       	cpc	r24, r20
    10c2:	28 f0       	brcs	.+10     	; 0x10ce <__fp_rempio2+0x38>
    10c4:	b2 5a       	subi	r27, 0xA2	; 162
    10c6:	62 0b       	sbc	r22, r18
    10c8:	73 0b       	sbc	r23, r19
    10ca:	84 0b       	sbc	r24, r20
    10cc:	e3 95       	inc	r30
    10ce:	9a 95       	dec	r25
    10d0:	72 f7       	brpl	.-36     	; 0x10ae <__fp_rempio2+0x18>
    10d2:	80 38       	cpi	r24, 0x80	; 128
    10d4:	30 f4       	brcc	.+12     	; 0x10e2 <__fp_rempio2+0x4c>
    10d6:	9a 95       	dec	r25
    10d8:	bb 0f       	add	r27, r27
    10da:	66 1f       	adc	r22, r22
    10dc:	77 1f       	adc	r23, r23
    10de:	88 1f       	adc	r24, r24
    10e0:	d2 f7       	brpl	.-12     	; 0x10d6 <__fp_rempio2+0x40>
    10e2:	90 48       	sbci	r25, 0x80	; 128
    10e4:	0c 94 05 08 	jmp	0x100a	; 0x100a <__fp_mpack_finite>

000010e8 <__fp_round>:
    10e8:	09 2e       	mov	r0, r25
    10ea:	03 94       	inc	r0
    10ec:	00 0c       	add	r0, r0
    10ee:	11 f4       	brne	.+4      	; 0x10f4 <__fp_round+0xc>
    10f0:	88 23       	and	r24, r24
    10f2:	52 f0       	brmi	.+20     	; 0x1108 <__fp_round+0x20>
    10f4:	bb 0f       	add	r27, r27
    10f6:	40 f4       	brcc	.+16     	; 0x1108 <__fp_round+0x20>
    10f8:	bf 2b       	or	r27, r31
    10fa:	11 f4       	brne	.+4      	; 0x1100 <__fp_round+0x18>
    10fc:	60 ff       	sbrs	r22, 0
    10fe:	04 c0       	rjmp	.+8      	; 0x1108 <__fp_round+0x20>
    1100:	6f 5f       	subi	r22, 0xFF	; 255
    1102:	7f 4f       	sbci	r23, 0xFF	; 255
    1104:	8f 4f       	sbci	r24, 0xFF	; 255
    1106:	9f 4f       	sbci	r25, 0xFF	; 255
    1108:	08 95       	ret

0000110a <__fp_sinus>:
    110a:	ef 93       	push	r30
    110c:	e0 ff       	sbrs	r30, 0
    110e:	07 c0       	rjmp	.+14     	; 0x111e <__fp_sinus+0x14>
    1110:	a2 ea       	ldi	r26, 0xA2	; 162
    1112:	2a ed       	ldi	r18, 0xDA	; 218
    1114:	3f e0       	ldi	r19, 0x0F	; 15
    1116:	49 ec       	ldi	r20, 0xC9	; 201
    1118:	5f eb       	ldi	r21, 0xBF	; 191
    111a:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__addsf3x>
    111e:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__fp_round>
    1122:	0f 90       	pop	r0
    1124:	03 94       	inc	r0
    1126:	01 fc       	sbrc	r0, 1
    1128:	90 58       	subi	r25, 0x80	; 128
    112a:	ec ed       	ldi	r30, 0xDC	; 220
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__fp_powsodd>

00001132 <__fp_split3>:
    1132:	57 fd       	sbrc	r21, 7
    1134:	90 58       	subi	r25, 0x80	; 128
    1136:	44 0f       	add	r20, r20
    1138:	55 1f       	adc	r21, r21
    113a:	59 f0       	breq	.+22     	; 0x1152 <__fp_splitA+0x10>
    113c:	5f 3f       	cpi	r21, 0xFF	; 255
    113e:	71 f0       	breq	.+28     	; 0x115c <__fp_splitA+0x1a>
    1140:	47 95       	ror	r20

00001142 <__fp_splitA>:
    1142:	88 0f       	add	r24, r24
    1144:	97 fb       	bst	r25, 7
    1146:	99 1f       	adc	r25, r25
    1148:	61 f0       	breq	.+24     	; 0x1162 <__fp_splitA+0x20>
    114a:	9f 3f       	cpi	r25, 0xFF	; 255
    114c:	79 f0       	breq	.+30     	; 0x116c <__fp_splitA+0x2a>
    114e:	87 95       	ror	r24
    1150:	08 95       	ret
    1152:	12 16       	cp	r1, r18
    1154:	13 06       	cpc	r1, r19
    1156:	14 06       	cpc	r1, r20
    1158:	55 1f       	adc	r21, r21
    115a:	f2 cf       	rjmp	.-28     	; 0x1140 <__fp_split3+0xe>
    115c:	46 95       	lsr	r20
    115e:	f1 df       	rcall	.-30     	; 0x1142 <__fp_splitA>
    1160:	08 c0       	rjmp	.+16     	; 0x1172 <__fp_splitA+0x30>
    1162:	16 16       	cp	r1, r22
    1164:	17 06       	cpc	r1, r23
    1166:	18 06       	cpc	r1, r24
    1168:	99 1f       	adc	r25, r25
    116a:	f1 cf       	rjmp	.-30     	; 0x114e <__fp_splitA+0xc>
    116c:	86 95       	lsr	r24
    116e:	71 05       	cpc	r23, r1
    1170:	61 05       	cpc	r22, r1
    1172:	08 94       	sec
    1174:	08 95       	ret

00001176 <__fp_trunc>:
    1176:	0e 94 a1 08 	call	0x1142	; 0x1142 <__fp_splitA>
    117a:	a0 f0       	brcs	.+40     	; 0x11a4 <__fp_trunc+0x2e>
    117c:	be e7       	ldi	r27, 0x7E	; 126
    117e:	b9 17       	cp	r27, r25
    1180:	88 f4       	brcc	.+34     	; 0x11a4 <__fp_trunc+0x2e>
    1182:	bb 27       	eor	r27, r27
    1184:	9f 38       	cpi	r25, 0x8F	; 143
    1186:	60 f4       	brcc	.+24     	; 0x11a0 <__fp_trunc+0x2a>
    1188:	16 16       	cp	r1, r22
    118a:	b1 1d       	adc	r27, r1
    118c:	67 2f       	mov	r22, r23
    118e:	78 2f       	mov	r23, r24
    1190:	88 27       	eor	r24, r24
    1192:	98 5f       	subi	r25, 0xF8	; 248
    1194:	f7 cf       	rjmp	.-18     	; 0x1184 <__fp_trunc+0xe>
    1196:	86 95       	lsr	r24
    1198:	77 95       	ror	r23
    119a:	67 95       	ror	r22
    119c:	b1 1d       	adc	r27, r1
    119e:	93 95       	inc	r25
    11a0:	96 39       	cpi	r25, 0x96	; 150
    11a2:	c8 f3       	brcs	.-14     	; 0x1196 <__fp_trunc+0x20>
    11a4:	08 95       	ret

000011a6 <__fp_zero>:
    11a6:	e8 94       	clt

000011a8 <__fp_szero>:
    11a8:	bb 27       	eor	r27, r27
    11aa:	66 27       	eor	r22, r22
    11ac:	77 27       	eor	r23, r23
    11ae:	cb 01       	movw	r24, r22
    11b0:	97 f9       	bld	r25, 7
    11b2:	08 95       	ret

000011b4 <__mulsf3>:
    11b4:	0e 94 ed 08 	call	0x11da	; 0x11da <__mulsf3x>
    11b8:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__fp_round>
    11bc:	0e 94 3b 08 	call	0x1076	; 0x1076 <__fp_pscA>
    11c0:	38 f0       	brcs	.+14     	; 0x11d0 <__mulsf3+0x1c>
    11c2:	0e 94 42 08 	call	0x1084	; 0x1084 <__fp_pscB>
    11c6:	20 f0       	brcs	.+8      	; 0x11d0 <__mulsf3+0x1c>
    11c8:	95 23       	and	r25, r21
    11ca:	11 f0       	breq	.+4      	; 0x11d0 <__mulsf3+0x1c>
    11cc:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__fp_inf>
    11d0:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__fp_nan>
    11d4:	11 24       	eor	r1, r1
    11d6:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <__fp_szero>

000011da <__mulsf3x>:
    11da:	0e 94 99 08 	call	0x1132	; 0x1132 <__fp_split3>
    11de:	70 f3       	brcs	.-36     	; 0x11bc <__mulsf3+0x8>

000011e0 <__mulsf3_pse>:
    11e0:	95 9f       	mul	r25, r21
    11e2:	c1 f3       	breq	.-16     	; 0x11d4 <__mulsf3+0x20>
    11e4:	95 0f       	add	r25, r21
    11e6:	50 e0       	ldi	r21, 0x00	; 0
    11e8:	55 1f       	adc	r21, r21
    11ea:	62 9f       	mul	r22, r18
    11ec:	f0 01       	movw	r30, r0
    11ee:	72 9f       	mul	r23, r18
    11f0:	bb 27       	eor	r27, r27
    11f2:	f0 0d       	add	r31, r0
    11f4:	b1 1d       	adc	r27, r1
    11f6:	63 9f       	mul	r22, r19
    11f8:	aa 27       	eor	r26, r26
    11fa:	f0 0d       	add	r31, r0
    11fc:	b1 1d       	adc	r27, r1
    11fe:	aa 1f       	adc	r26, r26
    1200:	64 9f       	mul	r22, r20
    1202:	66 27       	eor	r22, r22
    1204:	b0 0d       	add	r27, r0
    1206:	a1 1d       	adc	r26, r1
    1208:	66 1f       	adc	r22, r22
    120a:	82 9f       	mul	r24, r18
    120c:	22 27       	eor	r18, r18
    120e:	b0 0d       	add	r27, r0
    1210:	a1 1d       	adc	r26, r1
    1212:	62 1f       	adc	r22, r18
    1214:	73 9f       	mul	r23, r19
    1216:	b0 0d       	add	r27, r0
    1218:	a1 1d       	adc	r26, r1
    121a:	62 1f       	adc	r22, r18
    121c:	83 9f       	mul	r24, r19
    121e:	a0 0d       	add	r26, r0
    1220:	61 1d       	adc	r22, r1
    1222:	22 1f       	adc	r18, r18
    1224:	74 9f       	mul	r23, r20
    1226:	33 27       	eor	r19, r19
    1228:	a0 0d       	add	r26, r0
    122a:	61 1d       	adc	r22, r1
    122c:	23 1f       	adc	r18, r19
    122e:	84 9f       	mul	r24, r20
    1230:	60 0d       	add	r22, r0
    1232:	21 1d       	adc	r18, r1
    1234:	82 2f       	mov	r24, r18
    1236:	76 2f       	mov	r23, r22
    1238:	6a 2f       	mov	r22, r26
    123a:	11 24       	eor	r1, r1
    123c:	9f 57       	subi	r25, 0x7F	; 127
    123e:	50 40       	sbci	r21, 0x00	; 0
    1240:	9a f0       	brmi	.+38     	; 0x1268 <__mulsf3_pse+0x88>
    1242:	f1 f0       	breq	.+60     	; 0x1280 <__mulsf3_pse+0xa0>
    1244:	88 23       	and	r24, r24
    1246:	4a f0       	brmi	.+18     	; 0x125a <__mulsf3_pse+0x7a>
    1248:	ee 0f       	add	r30, r30
    124a:	ff 1f       	adc	r31, r31
    124c:	bb 1f       	adc	r27, r27
    124e:	66 1f       	adc	r22, r22
    1250:	77 1f       	adc	r23, r23
    1252:	88 1f       	adc	r24, r24
    1254:	91 50       	subi	r25, 0x01	; 1
    1256:	50 40       	sbci	r21, 0x00	; 0
    1258:	a9 f7       	brne	.-22     	; 0x1244 <__mulsf3_pse+0x64>
    125a:	9e 3f       	cpi	r25, 0xFE	; 254
    125c:	51 05       	cpc	r21, r1
    125e:	80 f0       	brcs	.+32     	; 0x1280 <__mulsf3_pse+0xa0>
    1260:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <__fp_inf>
    1264:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <__fp_szero>
    1268:	5f 3f       	cpi	r21, 0xFF	; 255
    126a:	e4 f3       	brlt	.-8      	; 0x1264 <__mulsf3_pse+0x84>
    126c:	98 3e       	cpi	r25, 0xE8	; 232
    126e:	d4 f3       	brlt	.-12     	; 0x1264 <__mulsf3_pse+0x84>
    1270:	86 95       	lsr	r24
    1272:	77 95       	ror	r23
    1274:	67 95       	ror	r22
    1276:	b7 95       	ror	r27
    1278:	f7 95       	ror	r31
    127a:	e7 95       	ror	r30
    127c:	9f 5f       	subi	r25, 0xFF	; 255
    127e:	c1 f7       	brne	.-16     	; 0x1270 <__mulsf3_pse+0x90>
    1280:	fe 2b       	or	r31, r30
    1282:	88 0f       	add	r24, r24
    1284:	91 1d       	adc	r25, r1
    1286:	96 95       	lsr	r25
    1288:	87 95       	ror	r24
    128a:	97 f9       	bld	r25, 7
    128c:	08 95       	ret
    128e:	19 f4       	brne	.+6      	; 0x1296 <__mulsf3_pse+0xb6>
    1290:	16 f4       	brtc	.+4      	; 0x1296 <__mulsf3_pse+0xb6>
    1292:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__fp_nan>
    1296:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__fp_mpack>

0000129a <sqrt>:
    129a:	0e 94 a1 08 	call	0x1142	; 0x1142 <__fp_splitA>
    129e:	b8 f3       	brcs	.-18     	; 0x128e <__mulsf3_pse+0xae>
    12a0:	99 23       	and	r25, r25
    12a2:	c9 f3       	breq	.-14     	; 0x1296 <__mulsf3_pse+0xb6>
    12a4:	b6 f3       	brts	.-20     	; 0x1292 <__mulsf3_pse+0xb2>
    12a6:	9f 57       	subi	r25, 0x7F	; 127
    12a8:	55 0b       	sbc	r21, r21
    12aa:	87 ff       	sbrs	r24, 7
    12ac:	0e 94 8d 09 	call	0x131a	; 0x131a <__fp_norm2>
    12b0:	00 24       	eor	r0, r0
    12b2:	a0 e6       	ldi	r26, 0x60	; 96
    12b4:	40 ea       	ldi	r20, 0xA0	; 160
    12b6:	90 01       	movw	r18, r0
    12b8:	80 58       	subi	r24, 0x80	; 128
    12ba:	56 95       	lsr	r21
    12bc:	97 95       	ror	r25
    12be:	28 f4       	brcc	.+10     	; 0x12ca <sqrt+0x30>
    12c0:	80 5c       	subi	r24, 0xC0	; 192
    12c2:	66 0f       	add	r22, r22
    12c4:	77 1f       	adc	r23, r23
    12c6:	88 1f       	adc	r24, r24
    12c8:	20 f0       	brcs	.+8      	; 0x12d2 <sqrt+0x38>
    12ca:	26 17       	cp	r18, r22
    12cc:	37 07       	cpc	r19, r23
    12ce:	48 07       	cpc	r20, r24
    12d0:	30 f4       	brcc	.+12     	; 0x12de <sqrt+0x44>
    12d2:	62 1b       	sub	r22, r18
    12d4:	73 0b       	sbc	r23, r19
    12d6:	84 0b       	sbc	r24, r20
    12d8:	20 29       	or	r18, r0
    12da:	31 29       	or	r19, r1
    12dc:	4a 2b       	or	r20, r26
    12de:	a6 95       	lsr	r26
    12e0:	17 94       	ror	r1
    12e2:	07 94       	ror	r0
    12e4:	20 25       	eor	r18, r0
    12e6:	31 25       	eor	r19, r1
    12e8:	4a 27       	eor	r20, r26
    12ea:	58 f7       	brcc	.-42     	; 0x12c2 <sqrt+0x28>
    12ec:	66 0f       	add	r22, r22
    12ee:	77 1f       	adc	r23, r23
    12f0:	88 1f       	adc	r24, r24
    12f2:	20 f0       	brcs	.+8      	; 0x12fc <sqrt+0x62>
    12f4:	26 17       	cp	r18, r22
    12f6:	37 07       	cpc	r19, r23
    12f8:	48 07       	cpc	r20, r24
    12fa:	30 f4       	brcc	.+12     	; 0x1308 <sqrt+0x6e>
    12fc:	62 0b       	sbc	r22, r18
    12fe:	73 0b       	sbc	r23, r19
    1300:	84 0b       	sbc	r24, r20
    1302:	20 0d       	add	r18, r0
    1304:	31 1d       	adc	r19, r1
    1306:	41 1d       	adc	r20, r1
    1308:	a0 95       	com	r26
    130a:	81 f7       	brne	.-32     	; 0x12ec <sqrt+0x52>
    130c:	b9 01       	movw	r22, r18
    130e:	84 2f       	mov	r24, r20
    1310:	91 58       	subi	r25, 0x81	; 129
    1312:	88 0f       	add	r24, r24
    1314:	96 95       	lsr	r25
    1316:	87 95       	ror	r24
    1318:	08 95       	ret

0000131a <__fp_norm2>:
    131a:	91 50       	subi	r25, 0x01	; 1
    131c:	50 40       	sbci	r21, 0x00	; 0
    131e:	66 0f       	add	r22, r22
    1320:	77 1f       	adc	r23, r23
    1322:	88 1f       	adc	r24, r24
    1324:	d2 f7       	brpl	.-12     	; 0x131a <__fp_norm2>
    1326:	08 95       	ret

00001328 <__fp_powsodd>:
    1328:	9f 93       	push	r25
    132a:	8f 93       	push	r24
    132c:	7f 93       	push	r23
    132e:	6f 93       	push	r22
    1330:	ff 93       	push	r31
    1332:	ef 93       	push	r30
    1334:	9b 01       	movw	r18, r22
    1336:	ac 01       	movw	r20, r24
    1338:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__mulsf3>
    133c:	ef 91       	pop	r30
    133e:	ff 91       	pop	r31
    1340:	0e 94 14 08 	call	0x1028	; 0x1028 <__fp_powser>
    1344:	2f 91       	pop	r18
    1346:	3f 91       	pop	r19
    1348:	4f 91       	pop	r20
    134a:	5f 91       	pop	r21
    134c:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__mulsf3>

00001350 <__divmodhi4>:
    1350:	97 fb       	bst	r25, 7
    1352:	07 2e       	mov	r0, r23
    1354:	16 f4       	brtc	.+4      	; 0x135a <__divmodhi4+0xa>
    1356:	00 94       	com	r0
    1358:	07 d0       	rcall	.+14     	; 0x1368 <__divmodhi4_neg1>
    135a:	77 fd       	sbrc	r23, 7
    135c:	09 d0       	rcall	.+18     	; 0x1370 <__divmodhi4_neg2>
    135e:	0e 94 bc 09 	call	0x1378	; 0x1378 <__udivmodhi4>
    1362:	07 fc       	sbrc	r0, 7
    1364:	05 d0       	rcall	.+10     	; 0x1370 <__divmodhi4_neg2>
    1366:	3e f4       	brtc	.+14     	; 0x1376 <__divmodhi4_exit>

00001368 <__divmodhi4_neg1>:
    1368:	90 95       	com	r25
    136a:	81 95       	neg	r24
    136c:	9f 4f       	sbci	r25, 0xFF	; 255
    136e:	08 95       	ret

00001370 <__divmodhi4_neg2>:
    1370:	70 95       	com	r23
    1372:	61 95       	neg	r22
    1374:	7f 4f       	sbci	r23, 0xFF	; 255

00001376 <__divmodhi4_exit>:
    1376:	08 95       	ret

00001378 <__udivmodhi4>:
    1378:	aa 1b       	sub	r26, r26
    137a:	bb 1b       	sub	r27, r27
    137c:	51 e1       	ldi	r21, 0x11	; 17
    137e:	07 c0       	rjmp	.+14     	; 0x138e <__udivmodhi4_ep>

00001380 <__udivmodhi4_loop>:
    1380:	aa 1f       	adc	r26, r26
    1382:	bb 1f       	adc	r27, r27
    1384:	a6 17       	cp	r26, r22
    1386:	b7 07       	cpc	r27, r23
    1388:	10 f0       	brcs	.+4      	; 0x138e <__udivmodhi4_ep>
    138a:	a6 1b       	sub	r26, r22
    138c:	b7 0b       	sbc	r27, r23

0000138e <__udivmodhi4_ep>:
    138e:	88 1f       	adc	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	5a 95       	dec	r21
    1394:	a9 f7       	brne	.-22     	; 0x1380 <__udivmodhi4_loop>
    1396:	80 95       	com	r24
    1398:	90 95       	com	r25
    139a:	bc 01       	movw	r22, r24
    139c:	cd 01       	movw	r24, r26
    139e:	08 95       	ret

000013a0 <_exit>:
    13a0:	f8 94       	cli

000013a2 <__stop_program>:
    13a2:	ff cf       	rjmp	.-2      	; 0x13a2 <__stop_program>
