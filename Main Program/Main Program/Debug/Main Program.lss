
Main Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d6  00800100  0000131a  000013ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000131a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000034  008001d6  008001d6  00001484  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000192a  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b3e  00000000  00000000  00002eae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000984  00000000  00000000  000039ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  00004370  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000639  00000000  00000000  00004574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000097d  00000000  00000000  00004bad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000552a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__ctors_end>
       4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      10:	0c 94 02 03 	jmp	0x604	; 0x604 <__vector_4>
      14:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      18:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      1c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      20:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      24:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      28:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      2c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      30:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      34:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      38:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      3c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      40:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      44:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      48:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      4c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      50:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      54:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      58:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      5c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      60:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      64:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      68:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      6c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      70:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      74:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      78:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      7c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      80:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      84:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      88:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      8c:	0c 94 a9 01 	jmp	0x352	; 0x352 <__vector_35>
      90:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      94:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      98:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      9c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      ac:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      b0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      b4:	07 2c       	mov	r0, r7
      b6:	7a a5       	ldd	r23, Y+42	; 0x2a
      b8:	ba 6c       	ori	r27, 0xCA	; 202
      ba:	c5 90       	lpm	r12, Z+
      bc:	da 3b       	cpi	r29, 0xBA	; 186
      be:	93 65       	ori	r25, 0x53	; 83
      c0:	fc 8b       	std	Y+20, r31	; 0x14
      c2:	bc 53       	subi	r27, 0x3C	; 60
      c4:	f8 10       	cpse	r15, r8
      c6:	fd 3c       	cpi	r31, 0xCD	; 205
      c8:	56 92       	lac	Z, r5
      ca:	83 4d       	sbci	r24, 0xD3	; 211
      cc:	bd 87       	std	Y+13, r27	; 0x0d
      ce:	9d 3a       	cpi	r25, 0xAD	; 173
      d0:	b6 3d       	cpi	r27, 0xD6	; 214
      d2:	cb c9       	rjmp	.-3178   	; 0xfffff46a <__eeprom_end+0xff7ef46a>
      d4:	bf 5b       	subi	r27, 0xBF	; 191
      d6:	be 73       	andi	r27, 0x3E	; 62
      d8:	da 0f       	add	r29, r26
      da:	c9 3f       	cpi	r28, 0xF9	; 249
      dc:	05 a8       	ldd	r0, Z+53	; 0x35
      de:	4c cd       	rjmp	.-1384   	; 0xfffffb78 <__eeprom_end+0xff7efb78>
      e0:	b2 d4       	rcall	.+2404   	; 0xa46 <__stack+0x147>
      e2:	4e b9       	out	0x0e, r20	; 14
      e4:	38 36       	cpi	r19, 0x68	; 104
      e6:	a9 02       	muls	r26, r25
      e8:	0c 50       	subi	r16, 0x0C	; 12
      ea:	b9 91       	ld	r27, Y+
      ec:	86 88       	ldd	r8, Z+22	; 0x16
      ee:	08 3c       	cpi	r16, 0xC8	; 200
      f0:	a6 aa       	std	Z+54, r10	; 0x36
      f2:	aa 2a       	or	r10, r26
      f4:	be 00       	.word	0x00be	; ????
      f6:	00 00       	nop
      f8:	80 3f       	cpi	r24, 0xF0	; 240

000000fa <__ctors_end>:
      fa:	11 24       	eor	r1, r1
      fc:	1f be       	out	0x3f, r1	; 63
      fe:	cf ef       	ldi	r28, 0xFF	; 255
     100:	d8 e0       	ldi	r29, 0x08	; 8
     102:	de bf       	out	0x3e, r29	; 62
     104:	cd bf       	out	0x3d, r28	; 61

00000106 <__do_copy_data>:
     106:	11 e0       	ldi	r17, 0x01	; 1
     108:	a0 e0       	ldi	r26, 0x00	; 0
     10a:	b1 e0       	ldi	r27, 0x01	; 1
     10c:	ea e1       	ldi	r30, 0x1A	; 26
     10e:	f3 e1       	ldi	r31, 0x13	; 19
     110:	02 c0       	rjmp	.+4      	; 0x116 <__do_copy_data+0x10>
     112:	05 90       	lpm	r0, Z+
     114:	0d 92       	st	X+, r0
     116:	a6 3d       	cpi	r26, 0xD6	; 214
     118:	b1 07       	cpc	r27, r17
     11a:	d9 f7       	brne	.-10     	; 0x112 <__do_copy_data+0xc>

0000011c <__do_clear_bss>:
     11c:	22 e0       	ldi	r18, 0x02	; 2
     11e:	a6 ed       	ldi	r26, 0xD6	; 214
     120:	b1 e0       	ldi	r27, 0x01	; 1
     122:	01 c0       	rjmp	.+2      	; 0x126 <.do_clear_bss_start>

00000124 <.do_clear_bss_loop>:
     124:	1d 92       	st	X+, r1

00000126 <.do_clear_bss_start>:
     126:	aa 30       	cpi	r26, 0x0A	; 10
     128:	b2 07       	cpc	r27, r18
     12a:	e1 f7       	brne	.-8      	; 0x124 <.do_clear_bss_loop>
     12c:	0e 94 26 02 	call	0x44c	; 0x44c <main>
     130:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <_exit>

00000134 <__bad_interrupt>:
     134:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000138 <lcdCommand>:


//*******************************************************
void lcdCommand( unsigned char cmnd )
{
  LCD_DPRT = cmnd;			
     138:	8b b9       	out	0x0b, r24	; 11
  LCD_CPRT &= ~ (1<<LCD_RS);
     13a:	70 98       	cbi	0x0e, 0	; 14
  LCD_CPRT &= ~ (1<<LCD_RW);
     13c:	71 98       	cbi	0x0e, 1	; 14
  LCD_CPRT |= (1<<LCD_EN);	
     13e:	72 9a       	sbi	0x0e, 2	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     140:	85 e0       	ldi	r24, 0x05	; 5
     142:	8a 95       	dec	r24
     144:	f1 f7       	brne	.-4      	; 0x142 <lcdCommand+0xa>
     146:	00 00       	nop
  _delay_us(1);				
  LCD_CPRT &= ~ (1<<LCD_EN);
     148:	72 98       	cbi	0x0e, 2	; 14
     14a:	8f e8       	ldi	r24, 0x8F	; 143
     14c:	91 e0       	ldi	r25, 0x01	; 1
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <lcdCommand+0x16>
     152:	00 c0       	rjmp	.+0      	; 0x154 <lcdCommand+0x1c>
     154:	00 00       	nop
     156:	08 95       	ret

00000158 <lcdData>:
}

//*******************************************************
void lcdData( unsigned char data )
{
  LCD_DPRT = data;			
     158:	8b b9       	out	0x0b, r24	; 11
  LCD_CPRT |= (1<<LCD_RS);	
     15a:	70 9a       	sbi	0x0e, 0	; 14
  LCD_CPRT &= ~ (1<<LCD_RW);
     15c:	71 98       	cbi	0x0e, 1	; 14
  LCD_CPRT |= (1<<LCD_EN);	
     15e:	72 9a       	sbi	0x0e, 2	; 14
     160:	85 e0       	ldi	r24, 0x05	; 5
     162:	8a 95       	dec	r24
     164:	f1 f7       	brne	.-4      	; 0x162 <lcdData+0xa>
     166:	00 00       	nop
  _delay_us(1);				
  LCD_CPRT &= ~ (1<<LCD_EN);
     168:	72 98       	cbi	0x0e, 2	; 14
     16a:	8f e8       	ldi	r24, 0x8F	; 143
     16c:	91 e0       	ldi	r25, 0x01	; 1
     16e:	01 97       	sbiw	r24, 0x01	; 1
     170:	f1 f7       	brne	.-4      	; 0x16e <lcdData+0x16>
     172:	00 c0       	rjmp	.+0      	; 0x174 <lcdData+0x1c>
     174:	00 00       	nop
     176:	08 95       	ret

00000178 <lcd_init>:
}

//*******************************************************
void lcd_init()
{
  LCD_DDDR = 0xFF;
     178:	8f ef       	ldi	r24, 0xFF	; 255
     17a:	8a b9       	out	0x0a, r24	; 10
  LCD_CDDR = 0xFF;
     17c:	8d b9       	out	0x0d, r24	; 13
 
  LCD_CPRT &=~(1<<LCD_EN);	
     17e:	72 98       	cbi	0x0e, 2	; 14
     180:	8f e3       	ldi	r24, 0x3F	; 63
     182:	9f e1       	ldi	r25, 0x1F	; 31
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <lcd_init+0xc>
     188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_init+0x12>
     18a:	00 00       	nop
  _delay_us(2000);			
  lcdCommand(0x38);					
     18c:	88 e3       	ldi	r24, 0x38	; 56
     18e:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
  lcdCommand(0x0C);
     192:	8c e0       	ldi	r24, 0x0C	; 12
     194:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
  lcdCommand(0x01); //clear
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     19e:	8f e3       	ldi	r24, 0x3F	; 63
     1a0:	9f e1       	ldi	r25, 0x1F	; 31
     1a2:	01 97       	sbiw	r24, 0x01	; 1
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x2a>
     1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x30>
     1a8:	00 00       	nop
  _delay_us(2000);			
  lcdCommand(0x06);			
     1aa:	86 e0       	ldi	r24, 0x06	; 6
     1ac:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     1b0:	08 95       	ret

000001b2 <lcd_gotoxy>:
}

//*******************************************************
void lcd_gotoxy(unsigned char x, unsigned char y)
{  
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <lcd_gotoxy+0x6>
     1b8:	00 d0       	rcall	.+0      	; 0x1ba <lcd_gotoxy+0x8>
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
 unsigned char firstCharAdr[]={0x80,0xC0,0x94,0xD4};//table 12-5  
     1be:	90 e8       	ldi	r25, 0x80	; 128
     1c0:	99 83       	std	Y+1, r25	; 0x01
     1c2:	90 ec       	ldi	r25, 0xC0	; 192
     1c4:	9a 83       	std	Y+2, r25	; 0x02
     1c6:	94 e9       	ldi	r25, 0x94	; 148
     1c8:	9b 83       	std	Y+3, r25	; 0x03
     1ca:	94 ed       	ldi	r25, 0xD4	; 212
     1cc:	9c 83       	std	Y+4, r25	; 0x04
 lcdCommand(firstCharAdr[y-1] + x - 1);
     1ce:	fe 01       	movw	r30, r28
     1d0:	e6 0f       	add	r30, r22
     1d2:	f1 1d       	adc	r31, r1
     1d4:	81 50       	subi	r24, 0x01	; 1
     1d6:	90 81       	ld	r25, Z
     1d8:	89 0f       	add	r24, r25
     1da:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     1de:	8f e8       	ldi	r24, 0x8F	; 143
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	01 97       	sbiw	r24, 0x01	; 1
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_gotoxy+0x30>
     1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <lcd_gotoxy+0x36>
     1e8:	00 00       	nop
 _delay_us(100);	
}
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <lcd_print>:

//*******************************************************
void lcd_print( char * str )
{
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	cf 93       	push	r28
     1fe:	fc 01       	movw	r30, r24
  unsigned char i = 0 ;
  while(str[i]!=0)
     200:	80 81       	ld	r24, Z
     202:	88 23       	and	r24, r24
     204:	59 f0       	breq	.+22     	; 0x21c <lcd_print+0x24>
     206:	8f 01       	movw	r16, r30
     208:	c0 e0       	ldi	r28, 0x00	; 0
  {
    lcdData(str[i]);
     20a:	0e 94 ac 00 	call	0x158	; 0x158 <lcdData>
    i++ ;
     20e:	cf 5f       	subi	r28, 0xFF	; 255

//*******************************************************
void lcd_print( char * str )
{
  unsigned char i = 0 ;
  while(str[i]!=0)
     210:	f8 01       	movw	r30, r16
     212:	ec 0f       	add	r30, r28
     214:	f1 1d       	adc	r31, r1
     216:	80 81       	ld	r24, Z
     218:	81 11       	cpse	r24, r1
     21a:	f7 cf       	rjmp	.-18     	; 0x20a <lcd_print+0x12>
  {
    lcdData(str[i]);
    i++ ;
  }
}
     21c:	cf 91       	pop	r28
     21e:	1f 91       	pop	r17
     220:	0f 91       	pop	r16
     222:	08 95       	ret

00000224 <ftoa>:
 */ 

#ifndef FLOATCONVERT_H_
#define FLOATCONVERT_H_
void ftoa(int n, char* res)
{
     224:	ef 92       	push	r14
     226:	ff 92       	push	r15
     228:	0f 93       	push	r16
     22a:	1f 93       	push	r17
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
     234:	2b 97       	sbiw	r28, 0x0b	; 11
     236:	0f b6       	in	r0, 0x3f	; 63
     238:	f8 94       	cli
     23a:	de bf       	out	0x3e, r29	; 62
     23c:	0f be       	out	0x3f, r0	; 63
     23e:	cd bf       	out	0x3d, r28	; 61
     240:	8c 01       	movw	r16, r24
     242:	9b 01       	movw	r18, r22
	char numbers[11] = "0123456789";
     244:	8b e0       	ldi	r24, 0x0B	; 11
     246:	e2 e0       	ldi	r30, 0x02	; 2
     248:	f1 e0       	ldi	r31, 0x01	; 1
     24a:	de 01       	movw	r26, r28
     24c:	11 96       	adiw	r26, 0x01	; 1
     24e:	01 90       	ld	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	8a 95       	dec	r24
     254:	e1 f7       	brne	.-8      	; 0x24e <ftoa+0x2a>
	int power = 0;

	if (n < 10)
     256:	0a 30       	cpi	r16, 0x0A	; 10
     258:	11 05       	cpc	r17, r1
     25a:	0c f4       	brge	.+2      	; 0x25e <ftoa+0x3a>
     25c:	5a c0       	rjmp	.+180    	; 0x312 <ftoa+0xee>
	power = 0;
	else if (n < 100)
     25e:	04 36       	cpi	r16, 0x64	; 100
     260:	11 05       	cpc	r17, r1
     262:	0c f5       	brge	.+66     	; 0x2a6 <ftoa+0x82>

		break;
		
		
		case 1:
		res[0] = '0';
     264:	80 e3       	ldi	r24, 0x30	; 48
     266:	db 01       	movw	r26, r22
     268:	8c 93       	st	X, r24
		res[1] = numbers[n/10];
     26a:	c8 01       	movw	r24, r16
     26c:	6a e0       	ldi	r22, 0x0A	; 10
     26e:	70 e0       	ldi	r23, 0x00	; 0
     270:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__divmodhi4>
     274:	e1 e0       	ldi	r30, 0x01	; 1
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	ec 0f       	add	r30, r28
     27a:	fd 1f       	adc	r31, r29
     27c:	e6 0f       	add	r30, r22
     27e:	f7 1f       	adc	r31, r23
     280:	40 81       	ld	r20, Z
     282:	f9 01       	movw	r30, r18
     284:	41 83       	std	Z+1, r20	; 0x01
		res[2] = '.';
     286:	4e e2       	ldi	r20, 0x2E	; 46
     288:	42 83       	std	Z+2, r20	; 0x02
		res[3] = numbers[n % 10];
     28a:	e1 e0       	ldi	r30, 0x01	; 1
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	ec 0f       	add	r30, r28
     290:	fd 1f       	adc	r31, r29
     292:	e8 0f       	add	r30, r24
     294:	f9 1f       	adc	r31, r25
     296:	80 81       	ld	r24, Z
     298:	d9 01       	movw	r26, r18
     29a:	13 96       	adiw	r26, 0x03	; 3
     29c:	8c 93       	st	X, r24
     29e:	13 97       	sbiw	r26, 0x03	; 3
		res[4] = '\0';
     2a0:	14 96       	adiw	r26, 0x04	; 4
     2a2:	1c 92       	st	X, r1

		break;
     2a4:	49 c0       	rjmp	.+146    	; 0x338 <ftoa+0x114>
		
		
		case 2:
		res[0] = numbers[n / 100];
     2a6:	c8 01       	movw	r24, r16
     2a8:	64 e6       	ldi	r22, 0x64	; 100
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__divmodhi4>
     2b0:	7c 01       	movw	r14, r24
     2b2:	e1 e0       	ldi	r30, 0x01	; 1
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	ec 0f       	add	r30, r28
     2b8:	fd 1f       	adc	r31, r29
     2ba:	e6 0f       	add	r30, r22
     2bc:	f7 1f       	adc	r31, r23
     2be:	80 81       	ld	r24, Z
     2c0:	f9 01       	movw	r30, r18
     2c2:	80 83       	st	Z, r24
		res[1] = numbers[(n / 10) % 10];
     2c4:	ea e0       	ldi	r30, 0x0A	; 10
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	c8 01       	movw	r24, r16
     2ca:	bf 01       	movw	r22, r30
     2cc:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__divmodhi4>
     2d0:	cb 01       	movw	r24, r22
     2d2:	bf 01       	movw	r22, r30
     2d4:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__divmodhi4>
     2d8:	a1 e0       	ldi	r26, 0x01	; 1
     2da:	b0 e0       	ldi	r27, 0x00	; 0
     2dc:	ac 0f       	add	r26, r28
     2de:	bd 1f       	adc	r27, r29
     2e0:	a8 0f       	add	r26, r24
     2e2:	b9 1f       	adc	r27, r25
     2e4:	8c 91       	ld	r24, X
     2e6:	d9 01       	movw	r26, r18
     2e8:	11 96       	adiw	r26, 0x01	; 1
     2ea:	8c 93       	st	X, r24
     2ec:	11 97       	sbiw	r26, 0x01	; 1
		res[2] = '.';
     2ee:	8e e2       	ldi	r24, 0x2E	; 46
     2f0:	12 96       	adiw	r26, 0x02	; 2
     2f2:	8c 93       	st	X, r24
		res[3] = numbers[(n % 100) % 10];
     2f4:	c7 01       	movw	r24, r14
     2f6:	bf 01       	movw	r22, r30
     2f8:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__divmodhi4>
     2fc:	e1 e0       	ldi	r30, 0x01	; 1
     2fe:	f0 e0       	ldi	r31, 0x00	; 0
     300:	ec 0f       	add	r30, r28
     302:	fd 1f       	adc	r31, r29
     304:	e8 0f       	add	r30, r24
     306:	f9 1f       	adc	r31, r25
     308:	80 81       	ld	r24, Z
     30a:	f9 01       	movw	r30, r18
     30c:	83 83       	std	Z+3, r24	; 0x03
		res[4] = '\0';
     30e:	14 82       	std	Z+4, r1	; 0x04
		break;
     310:	13 c0       	rjmp	.+38     	; 0x338 <ftoa+0x114>
	else
	power = 2;
	switch (power)
	{
		case 0: // tenth decimal place
		res[0] = '0';
     312:	80 e3       	ldi	r24, 0x30	; 48
     314:	db 01       	movw	r26, r22
     316:	8c 93       	st	X, r24
		res[1] = '0';
     318:	11 96       	adiw	r26, 0x01	; 1
     31a:	8c 93       	st	X, r24
     31c:	11 97       	sbiw	r26, 0x01	; 1
		res[2] = '.';
     31e:	8e e2       	ldi	r24, 0x2E	; 46
     320:	12 96       	adiw	r26, 0x02	; 2
     322:	8c 93       	st	X, r24
     324:	12 97       	sbiw	r26, 0x02	; 2
		res[3] = numbers[n];
     326:	fe 01       	movw	r30, r28
     328:	e0 0f       	add	r30, r16
     32a:	f1 1f       	adc	r31, r17
     32c:	81 81       	ldd	r24, Z+1	; 0x01
     32e:	13 96       	adiw	r26, 0x03	; 3
     330:	8c 93       	st	X, r24
     332:	13 97       	sbiw	r26, 0x03	; 3
		res[4] = '\0';
     334:	14 96       	adiw	r26, 0x04	; 4
     336:	1c 92       	st	X, r1
		res[4] = '\0';
		break;
		
	}

}
     338:	2b 96       	adiw	r28, 0x0b	; 11
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	f8 94       	cli
     33e:	de bf       	out	0x3e, r29	; 62
     340:	0f be       	out	0x3f, r0	; 63
     342:	cd bf       	out	0x3d, r28	; 61
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	1f 91       	pop	r17
     34a:	0f 91       	pop	r16
     34c:	ff 90       	pop	r15
     34e:	ef 90       	pop	r14
     350:	08 95       	ret

00000352 <__vector_35>:



// Timer used to track seconds for startup routine of speed controller
ISR (TIMER3_OVF_vect)
{
     352:	1f 92       	push	r1
     354:	0f 92       	push	r0
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	0f 92       	push	r0
     35a:	11 24       	eor	r1, r1
     35c:	8f 93       	push	r24
     35e:	9f 93       	push	r25
	TCNT3 = -15625; // reset the 1sec timer value 
     360:	87 ef       	ldi	r24, 0xF7	; 247
     362:	92 ec       	ldi	r25, 0xC2	; 194
     364:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
     368:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
	overflowCount++;
     36c:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <__data_end>
     370:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <__data_end+0x1>
     374:	01 96       	adiw	r24, 0x01	; 1
     376:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <__data_end+0x1>
     37a:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <__data_end>
	if (overflowCount == 5) // wait  seconds
     37e:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <__data_end>
     382:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <__data_end+0x1>
     386:	05 97       	sbiw	r24, 0x05	; 5
     388:	91 f4       	brne	.+36     	; 0x3ae <__vector_35+0x5c>
	{
		OCR1A=38000-1;	// adjust pulse width of waveform being generated from 2ms to 1ms
     38a:	8f e6       	ldi	r24, 0x6F	; 111
     38c:	94 e9       	ldi	r25, 0x94	; 148
     38e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     392:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
		TCNT3 = 0; // set counter to 0
     396:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
     39a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
		TIMSK3 = (0 << TOIE3); // disable timer
     39e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
		setupFlag = 1;
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <setupFlag+0x1>
     3aa:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <setupFlag>
	}
}
     3ae:	9f 91       	pop	r25
     3b0:	8f 91       	pop	r24
     3b2:	0f 90       	pop	r0
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	0f 90       	pop	r0
     3b8:	1f 90       	pop	r1
     3ba:	18 95       	reti

000003bc <peripheralSetup>:

/************************************************* STARTUP ROUTINE **********************************************************************************/

void peripheralSetup()
{
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
	PORTE &= ~(1<<3); // Ensure 12V is OFF
     3c0:	73 98       	cbi	0x0e, 3	; 14
	DDRE &= ~(1<<3);  // Ensure 12V is OFF
     3c2:	6b 98       	cbi	0x0d, 3	; 13
	
	//********************************************** PIN CHANGE INTERRUPT SETUP **********************************************//
	DDRC &= ~(_BV(2) | _BV(1) | _BV(4)); // sets PORTC 1, 2, and 4 to input (input from rotary encoder)
     3c4:	87 b1       	in	r24, 0x07	; 7
     3c6:	89 7e       	andi	r24, 0xE9	; 233
     3c8:	87 b9       	out	0x07, r24	; 7
	// 4 = SW signal (button press)
	
	
	//********************************************** PWM SETUP **********************************************//
	// Set up PWM on PortB(1)
	DDRB |= (1<<1); // set PINB 1 to output
     3ca:	21 9a       	sbi	0x04, 1	; 4
	PORTB = ~(1<<1); // Ensure PINB 1 is not outputting voltage
     3cc:	8d ef       	ldi	r24, 0xFD	; 253
     3ce:	85 b9       	out	0x05, r24	; 5
	TCCR1A= (0b11 << COM1A0) | ( 0b00 << COM1B0) | (0b10 << WGM10); // set up PWM with pre-scalar
     3d0:	82 ec       	ldi	r24, 0xC2	; 194
     3d2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B= (0b11 << WGM12) | (0b010<< CS10);
     3d6:	8a e1       	ldi	r24, 0x1A	; 26
     3d8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	ICR1= 40000-1; // (20MS /8 PRESCALAR)
     3dc:	8f e3       	ldi	r24, 0x3F	; 63
     3de:	9c e9       	ldi	r25, 0x9C	; 156
     3e0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
     3e4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	OCR1A=36000-1; // 1000->4000 0.5ms to 2ms *** adjust ***
     3e8:	8f e9       	ldi	r24, 0x9F	; 159
     3ea:	9c e8       	ldi	r25, 0x8C	; 140
     3ec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     3f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	
	// Set up 4 second timer for startup
	TCCR3A = 0; //(0b00 << COM3A0) | (0b00 << COM3B0)
     3f4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
	TCCR3B = (0 << ICNC3) | (0 << ICES3) | (0b00 << WGM32) | (0b101 << CS30);
     3f8:	85 e0       	ldi	r24, 0x05	; 5
     3fa:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__DATA_REGION_ORIGIN__+0x31>
	TIMSK3 = (0 << TOIE3); // Ensure timer 3 is disabled
     3fe:	c1 e7       	ldi	r28, 0x71	; 113
     400:	d0 e0       	ldi	r29, 0x00	; 0
     402:	18 82       	st	Y, r1
	TCNT3 = -15625; // One second timer value
     404:	87 ef       	ldi	r24, 0xF7	; 247
     406:	92 ec       	ldi	r25, 0xC2	; 194
     408:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
     40c:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
	
	sei();
     410:	78 94       	sei
	// Set up LCD and print starting message state
	lcd_init(); // initialize the LCD according to Dr. Viall's 263 code
     412:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_init>
	lcd_gotoxy(1,1); // go to row 1 column 1 of LCD
     416:	61 e0       	ldi	r22, 0x01	; 1
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("Starting system"); // Print ->   [HEIGHT] ANGLE
     41e:	8d e0       	ldi	r24, 0x0D	; 13
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(1,2); // go to row 2 column 2 of LCD
     426:	62 e0       	ldi	r22, 0x02	; 2
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("Please wait..."); // Print -> 00.0 00.0
     42e:	8d e1       	ldi	r24, 0x1D	; 29
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	
	
	 // enable global interrupts
	
	// ***** SPEED CONTROLLER STARTUP ***** //
	TIMSK3 = (1 << TOIE3); // Enable PWM timer for startup
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	88 83       	st	Y, r24
	//PORTE &= ~(1<<3); // TURN ON 12V SUPPLY
	//DDRE |= (1<<3);   // TURN ON 12V SUPPLY
	//_delay_ms(4000);
	//OCR1A=38000-1;	// adjust pulse width of waveform being generated from 2ms to 1ms
	//_delay_ms(3000);
	while (setupFlag != 1)
     43a:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <setupFlag>
     43e:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <setupFlag+0x1>
     442:	01 97       	sbiw	r24, 0x01	; 1
     444:	d1 f7       	brne	.-12     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
	{
		//wait
	}
}
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <main>:
volatile int overflowCount = 0; // global variable used for tracking how many times the timer overflows (each overflow is equivalent to one second)

int main(void)
{
	// These variables are Char arrays as the LCD cannot output int/float values, it must be sent as a string
	angleConv[0]='0'; // v Set up height and angle to start at 00.0 value
     44c:	e8 ed       	ldi	r30, 0xD8	; 216
     44e:	f1 e0       	ldi	r31, 0x01	; 1
     450:	80 e3       	ldi	r24, 0x30	; 48
     452:	80 83       	st	Z, r24
	angleConv[1]='0';
     454:	81 83       	std	Z+1, r24	; 0x01
	angleConv[2]='.';
     456:	9e e2       	ldi	r25, 0x2E	; 46
     458:	92 83       	std	Z+2, r25	; 0x02
	angleConv[3]='0';
     45a:	83 83       	std	Z+3, r24	; 0x03
	heightConv[0]='0';
     45c:	e8 ee       	ldi	r30, 0xE8	; 232
     45e:	f1 e0       	ldi	r31, 0x01	; 1
     460:	80 83       	st	Z, r24
	heightConv[1]='0';
     462:	81 83       	std	Z+1, r24	; 0x01
	heightConv[2]='.';
     464:	92 83       	std	Z+2, r25	; 0x02
	heightConv[3]='0';// ^
     466:	83 83       	std	Z+3, r24	; 0x03
	
	peripheralSetup();
     468:	0e 94 de 01 	call	0x3bc	; 0x3bc <peripheralSetup>
	
	//SETUP COMPLETE
	lcd_gotoxy(1,1); // go to row 1 column 1 of LCD
     46c:	61 e0       	ldi	r22, 0x01	; 1
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("System start    "); // Print ->   [HEIGHT] ANGLE
     474:	8c e2       	ldi	r24, 0x2C	; 44
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(1,2); // go to row 2 column 2 of LCD
     47c:	62 e0       	ldi	r22, 0x02	; 2
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("completed!      "); // Print -> 00.0 00.0
     484:	8d e3       	ldi	r24, 0x3D	; 61
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     48c:	2f ef       	ldi	r18, 0xFF	; 255
     48e:	83 ed       	ldi	r24, 0xD3	; 211
     490:	90 e3       	ldi	r25, 0x30	; 48
     492:	21 50       	subi	r18, 0x01	; 1
     494:	80 40       	sbci	r24, 0x00	; 0
     496:	90 40       	sbci	r25, 0x00	; 0
     498:	e1 f7       	brne	.-8      	; 0x492 <main+0x46>
     49a:	00 c0       	rjmp	.+0      	; 0x49c <main+0x50>
     49c:	00 00       	nop
	_delay_ms(1000);
	lcd_print("Enabling UI...  ");
     49e:	8e e4       	ldi	r24, 0x4E	; 78
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_print("Enjoy! :)       ");
     4a6:	8f e5       	ldi	r24, 0x5F	; 95
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	
	// ***** Enable User Control ***** //		
	PCICR |= (1<<PCIE1); // Enable pin change interrupt on PORTC
     4ae:	e8 e6       	ldi	r30, 0x68	; 104
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	80 81       	ld	r24, Z
     4b4:	82 60       	ori	r24, 0x02	; 2
     4b6:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT12) | (1<<PCINT9) | (1<<PCINT10); // Enable Pins 1,2, and 4 to trigger this interrupt
     4b8:	ec e6       	ldi	r30, 0x6C	; 108
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	80 81       	ld	r24, Z
     4be:	86 61       	ori	r24, 0x16	; 22
     4c0:	80 83       	st	Z, r24
	
	lcd_gotoxy(1,1); // go to row 1 column 1 of LCD
     4c2:	61 e0       	ldi	r22, 0x01	; 1
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(HEIGHT_SELECT); // Print ->   [HEIGHT] ANGLE
     4ca:	80 e7       	ldi	r24, 0x70	; 112
     4cc:	91 e0       	ldi	r25, 0x01	; 1
     4ce:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(1,2); // go to row 2 column 2 of LCD
     4d2:	62 e0       	ldi	r22, 0x02	; 2
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(DEFAULT_ANGLE); // Print -> 00.0 00.0
     4da:	81 e8       	ldi	r24, 0x81	; 129
     4dc:	91 e0       	ldi	r25, 0x01	; 1
     4de:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
     4e2:	ff cf       	rjmp	.-2      	; 0x4e2 <main+0x96>

000004e4 <print_height_angle>:

/************************************************* NUMBER CHANING FUNCTIONS **********************************************************************************/

// Function used to print either the height or angle selection ** THIS FUNCTION IS ONLY FOR CHANGING THE SELECTION **
void print_height_angle(char *angleConv, char *heightConv, int heightSelect)
{
     4e4:	ef 92       	push	r14
     4e6:	ff 92       	push	r15
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	ec 01       	movw	r28, r24
     4f2:	8b 01       	movw	r16, r22
     4f4:	7a 01       	movw	r14, r20
	lcd_gotoxy(1,1);
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	if (heightSelect == 1)
     4fe:	ea 94       	dec	r14
     500:	ef 28       	or	r14, r15
     502:	29 f4       	brne	.+10     	; 0x50e <print_height_angle+0x2a>
	lcd_print(HEIGHT_SELECT);
     504:	80 e7       	ldi	r24, 0x70	; 112
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
     50c:	04 c0       	rjmp	.+8      	; 0x516 <print_height_angle+0x32>
	else
	lcd_print(ANGLE_SELECT);
     50e:	80 e9       	ldi	r24, 0x90	; 144
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	// un-select bottom row
	lcd_gotoxy(1,2);
     516:	62 e0       	ldi	r22, 0x02	; 2
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(" ");
     51e:	8e e6       	ldi	r24, 0x6E	; 110
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_print(heightConv);
     526:	c8 01       	movw	r24, r16
     528:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(6,2);
     52c:	62 e0       	ldi	r22, 0x02	; 2
     52e:	86 e0       	ldi	r24, 0x06	; 6
     530:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(" ");
     534:	8e e6       	ldi	r24, 0x6E	; 110
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(10,2);
     53c:	62 e0       	ldi	r22, 0x02	; 2
     53e:	8a e0       	ldi	r24, 0x0A	; 10
     540:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(" ");
     544:	8e e6       	ldi	r24, 0x6E	; 110
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_print(angleConv);
     54c:	ce 01       	movw	r24, r28
     54e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(15,2);
     552:	62 e0       	ldi	r22, 0x02	; 2
     554:	8f e0       	ldi	r24, 0x0F	; 15
     556:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(" ");
     55a:	8e e6       	ldi	r24, 0x6E	; 110
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
}
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	ff 90       	pop	r15
     56c:	ef 90       	pop	r14
     56e:	08 95       	ret

00000570 <print_height_change>:

// Function used to print a change in the height value
void print_height_change(char *conversion)
{
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	ec 01       	movw	r28, r24
	//ensure height becomes unselected
	lcd_gotoxy(1,1);
     576:	61 e0       	ldi	r22, 0x01	; 1
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(NO_HS_SELECT);
     57e:	81 ea       	ldi	r24, 0xA1	; 161
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(1,2);
     586:	62 e0       	ldi	r22, 0x02	; 2
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("[");
     58e:	82 eb       	ldi	r24, 0xB2	; 178
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(2,2);
     596:	62 e0       	ldi	r22, 0x02	; 2
     598:	82 e0       	ldi	r24, 0x02	; 2
     59a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(conversion);
     59e:	ce 01       	movw	r24, r28
     5a0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(6,2);
     5a4:	62 e0       	ldi	r22, 0x02	; 2
     5a6:	86 e0       	ldi	r24, 0x06	; 6
     5a8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("]");
     5ac:	8f e9       	ldi	r24, 0x9F	; 159
     5ae:	91 e0       	ldi	r25, 0x01	; 1
     5b0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
}
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	08 95       	ret

000005ba <print_angle_change>:

// Function used to print a change in the angle value
void print_angle_change(char *conversion)
{
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	ec 01       	movw	r28, r24
	lcd_gotoxy(1,1);
     5c0:	61 e0       	ldi	r22, 0x01	; 1
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(NO_HS_SELECT);
     5c8:	81 ea       	ldi	r24, 0xA1	; 161
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(10,2);
     5d0:	62 e0       	ldi	r22, 0x02	; 2
     5d2:	8a e0       	ldi	r24, 0x0A	; 10
     5d4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("[");
     5d8:	82 eb       	ldi	r24, 0xB2	; 178
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(11,2);
     5e0:	62 e0       	ldi	r22, 0x02	; 2
     5e2:	8b e0       	ldi	r24, 0x0B	; 11
     5e4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(conversion);
     5e8:	ce 01       	movw	r24, r28
     5ea:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(15,2);
     5ee:	62 e0       	ldi	r22, 0x02	; 2
     5f0:	8f e0       	ldi	r24, 0x0F	; 15
     5f2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("]");
     5f6:	8f e9       	ldi	r24, 0x9F	; 159
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	
}
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <__vector_4>:
//	-Button press either:
//		- Confirms height / angle adjustment
//		- Selects angle / height and moves user to adjust height / angle

ISR(PCINT1_vect)
{
     604:	1f 92       	push	r1
     606:	0f 92       	push	r0
     608:	0f b6       	in	r0, 0x3f	; 63
     60a:	0f 92       	push	r0
     60c:	11 24       	eor	r1, r1
     60e:	cf 92       	push	r12
     610:	df 92       	push	r13
     612:	ef 92       	push	r14
     614:	ff 92       	push	r15
     616:	2f 93       	push	r18
     618:	3f 93       	push	r19
     61a:	4f 93       	push	r20
     61c:	5f 93       	push	r21
     61e:	6f 93       	push	r22
     620:	7f 93       	push	r23
     622:	8f 93       	push	r24
     624:	9f 93       	push	r25
     626:	af 93       	push	r26
     628:	bf 93       	push	r27
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	ef 93       	push	r30
     630:	ff 93       	push	r31
     632:	8f e1       	ldi	r24, 0x1F	; 31
     634:	9e e4       	ldi	r25, 0x4E	; 78
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	f1 f7       	brne	.-4      	; 0x636 <__vector_4+0x32>
     63a:	00 c0       	rjmp	.+0      	; 0x63c <__vector_4+0x38>
     63c:	00 00       	nop
	_delay_ms(5);
	
	if(PINC == RIGHT) //if right turn triggered interrupt
     63e:	86 b1       	in	r24, 0x06	; 6
     640:	8b 37       	cpi	r24, 0x7B	; 123
     642:	09 f0       	breq	.+2      	; 0x646 <__vector_4+0x42>
     644:	93 c0       	rjmp	.+294    	; 0x76c <__vector_4+0x168>
	{
		switch(state)
     646:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <state>
     64a:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <state+0x1>
     64e:	81 30       	cpi	r24, 0x01	; 1
     650:	91 05       	cpc	r25, r1
     652:	d1 f0       	breq	.+52     	; 0x688 <__vector_4+0x84>
     654:	1c f4       	brge	.+6      	; 0x65c <__vector_4+0x58>
     656:	89 2b       	or	r24, r25
     658:	41 f0       	breq	.+16     	; 0x66a <__vector_4+0x66>
     65a:	88 c0       	rjmp	.+272    	; 0x76c <__vector_4+0x168>
     65c:	82 30       	cpi	r24, 0x02	; 2
     65e:	91 05       	cpc	r25, r1
     660:	a9 f1       	breq	.+106    	; 0x6cc <__vector_4+0xc8>
     662:	03 97       	sbiw	r24, 0x03	; 3
     664:	09 f4       	brne	.+2      	; 0x668 <__vector_4+0x64>
     666:	5b c0       	rjmp	.+182    	; 0x71e <__vector_4+0x11a>
     668:	81 c0       	rjmp	.+258    	; 0x76c <__vector_4+0x168>
		{
			case HEIGHT: // change to angle state
			print_height_angle(angleConv,heightConv,0);
     66a:	40 e0       	ldi	r20, 0x00	; 0
     66c:	50 e0       	ldi	r21, 0x00	; 0
     66e:	68 ee       	ldi	r22, 0xE8	; 232
     670:	71 e0       	ldi	r23, 0x01	; 1
     672:	88 ed       	ldi	r24, 0xD8	; 216
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	0e 94 72 02 	call	0x4e4	; 0x4e4 <print_height_angle>
			state = ANGLE;
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <state+0x1>
     682:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <state>
			break;
     686:	72 c0       	rjmp	.+228    	; 0x76c <__vector_4+0x168>
			case ANGLE: // Change increment/decrement value to 10
			valueChange = 10;
     688:	8a e0       	ldi	r24, 0x0A	; 10
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     690:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			cli();
     694:	f8 94       	cli
			lcd_gotoxy(1,1);
     696:	61 e0       	ldi	r22, 0x01	; 1
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
			lcd_print("Order +-1       ");
     69e:	84 eb       	ldi	r24, 0xB4	; 180
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
     6a6:	9f ef       	ldi	r25, 0xFF	; 255
     6a8:	23 ed       	ldi	r18, 0xD3	; 211
     6aa:	80 e3       	ldi	r24, 0x30	; 48
     6ac:	91 50       	subi	r25, 0x01	; 1
     6ae:	20 40       	sbci	r18, 0x00	; 0
     6b0:	80 40       	sbci	r24, 0x00	; 0
     6b2:	e1 f7       	brne	.-8      	; 0x6ac <__vector_4+0xa8>
     6b4:	00 c0       	rjmp	.+0      	; 0x6b6 <__vector_4+0xb2>
     6b6:	00 00       	nop
			_delay_ms(1000);
			lcd_gotoxy(1,1);
     6b8:	61 e0       	ldi	r22, 0x01	; 1
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
			lcd_print(ANGLE_SELECT);
     6c0:	80 e9       	ldi	r24, 0x90	; 144
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
			sei();
     6c8:	78 94       	sei
			break;
     6ca:	50 c0       	rjmp	.+160    	; 0x76c <__vector_4+0x168>
			case CHEIGHT: // increment height value (as long as < MAX (?))
			if ((height+valueChange) <= MAX_HEIGHT) // total guess right now
     6cc:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <height>
     6d0:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <height+0x1>
     6d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     6d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     6dc:	82 0f       	add	r24, r18
     6de:	93 1f       	adc	r25, r19
     6e0:	87 39       	cpi	r24, 0x97	; 151
     6e2:	91 05       	cpc	r25, r1
     6e4:	0c f0       	brlt	.+2      	; 0x6e8 <__vector_4+0xe4>
     6e6:	42 c0       	rjmp	.+132    	; 0x76c <__vector_4+0x168>
			{
				height=height + valueChange; //increment height by tenth
     6e8:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <height>
     6ec:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <height+0x1>
     6f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     6f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     6f8:	82 0f       	add	r24, r18
     6fa:	93 1f       	adc	r25, r19
     6fc:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <height+0x1>
     700:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <height>
				ftoa(height,heightConv); // convert height to char array (heightConv) with 1 decimal place
     704:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <height>
     708:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <height+0x1>
     70c:	68 ee       	ldi	r22, 0xE8	; 232
     70e:	71 e0       	ldi	r23, 0x01	; 1
     710:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_height_change(heightConv); // print conversion to LCD
     714:	88 ee       	ldi	r24, 0xE8	; 232
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	0e 94 b8 02 	call	0x570	; 0x570 <print_height_change>
     71c:	27 c0       	rjmp	.+78     	; 0x76c <__vector_4+0x168>
			}
			break;
			case CANGLE: // increment angle value (as long as <= MAX (90))
			if ((angle+valueChange) <= MAX_ANGLE)
     71e:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <angle>
     722:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <angle+0x1>
     726:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     72a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     72e:	82 0f       	add	r24, r18
     730:	93 1f       	adc	r25, r19
     732:	85 38       	cpi	r24, 0x85	; 133
     734:	93 40       	sbci	r25, 0x03	; 3
     736:	d4 f4       	brge	.+52     	; 0x76c <__vector_4+0x168>
			{
				angle=angle + valueChange;
     738:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <angle>
     73c:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <angle+0x1>
     740:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     744:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     748:	82 0f       	add	r24, r18
     74a:	93 1f       	adc	r25, r19
     74c:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <angle+0x1>
     750:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <angle>
				ftoa(angle,angleConv); // convert angle to char array (angleConv) with 1 decimal place
     754:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <angle>
     758:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <angle+0x1>
     75c:	68 ed       	ldi	r22, 0xD8	; 216
     75e:	71 e0       	ldi	r23, 0x01	; 1
     760:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_angle_change(angleConv);	// print conversion to LCD
     764:	88 ed       	ldi	r24, 0xD8	; 216
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	0e 94 dd 02 	call	0x5ba	; 0x5ba <print_angle_change>
			break;
		}
	}
	
	
	if (PINC == LEFT) // If left turn triggered interrupt
     76c:	86 b1       	in	r24, 0x06	; 6
     76e:	8d 37       	cpi	r24, 0x7D	; 125
     770:	09 f0       	breq	.+2      	; 0x774 <__vector_4+0x170>
     772:	8c c0       	rjmp	.+280    	; 0x88c <__vector_4+0x288>
	{
		switch(state)
     774:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <state>
     778:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <state+0x1>
     77c:	81 30       	cpi	r24, 0x01	; 1
     77e:	91 05       	cpc	r25, r1
     780:	61 f1       	breq	.+88     	; 0x7da <__vector_4+0x1d6>
     782:	1c f4       	brge	.+6      	; 0x78a <__vector_4+0x186>
     784:	89 2b       	or	r24, r25
     786:	41 f0       	breq	.+16     	; 0x798 <__vector_4+0x194>
     788:	81 c0       	rjmp	.+258    	; 0x88c <__vector_4+0x288>
     78a:	82 30       	cpi	r24, 0x02	; 2
     78c:	91 05       	cpc	r25, r1
     78e:	91 f1       	breq	.+100    	; 0x7f4 <__vector_4+0x1f0>
     790:	03 97       	sbiw	r24, 0x03	; 3
     792:	09 f4       	brne	.+2      	; 0x796 <__vector_4+0x192>
     794:	56 c0       	rjmp	.+172    	; 0x842 <__vector_4+0x23e>
     796:	7a c0       	rjmp	.+244    	; 0x88c <__vector_4+0x288>
		{
			case HEIGHT: // Change increment/decrement value to 1
			valueChange = 1;
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     7a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			cli();
     7a4:	f8 94       	cli
			lcd_gotoxy(1,1);
     7a6:	61 e0       	ldi	r22, 0x01	; 1
     7a8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
			lcd_print("Order +-.1     ");
     7ac:	85 ec       	ldi	r24, 0xC5	; 197
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
     7b4:	8f ef       	ldi	r24, 0xFF	; 255
     7b6:	93 ed       	ldi	r25, 0xD3	; 211
     7b8:	20 e3       	ldi	r18, 0x30	; 48
     7ba:	81 50       	subi	r24, 0x01	; 1
     7bc:	90 40       	sbci	r25, 0x00	; 0
     7be:	20 40       	sbci	r18, 0x00	; 0
     7c0:	e1 f7       	brne	.-8      	; 0x7ba <__vector_4+0x1b6>
     7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <__vector_4+0x1c0>
     7c4:	00 00       	nop
			_delay_ms(1000);
			lcd_gotoxy(1,1);
     7c6:	61 e0       	ldi	r22, 0x01	; 1
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
			lcd_print(HEIGHT_SELECT);
     7ce:	80 e7       	ldi	r24, 0x70	; 112
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
			sei();
     7d6:	78 94       	sei
			break;
     7d8:	59 c0       	rjmp	.+178    	; 0x88c <__vector_4+0x288>
			case ANGLE: // change to height state
			print_height_angle(angleConv,heightConv, 1);
     7da:	41 e0       	ldi	r20, 0x01	; 1
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	68 ee       	ldi	r22, 0xE8	; 232
     7e0:	71 e0       	ldi	r23, 0x01	; 1
     7e2:	88 ed       	ldi	r24, 0xD8	; 216
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <print_height_angle>
			state = HEIGHT;
     7ea:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <state+0x1>
     7ee:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <state>
			break;
     7f2:	4c c0       	rjmp	.+152    	; 0x88c <__vector_4+0x288>
			case CHEIGHT: // decrement height value (as long as >= MIN (0) )
			if ((height-valueChange) >= 0)
     7f4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <height>
     7f8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <height+0x1>
     7fc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     800:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     804:	82 1b       	sub	r24, r18
     806:	93 0b       	sbc	r25, r19
     808:	0a f4       	brpl	.+2      	; 0x80c <__vector_4+0x208>
     80a:	40 c0       	rjmp	.+128    	; 0x88c <__vector_4+0x288>
			{
				height = height - valueChange;
     80c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <height>
     810:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <height+0x1>
     814:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     818:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     81c:	82 1b       	sub	r24, r18
     81e:	93 0b       	sbc	r25, r19
     820:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <height+0x1>
     824:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <height>
				ftoa(height,heightConv); // convert height to char array (heightConv) with 1 decimal place
     828:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <height>
     82c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <height+0x1>
     830:	68 ee       	ldi	r22, 0xE8	; 232
     832:	71 e0       	ldi	r23, 0x01	; 1
     834:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_height_change(heightConv); // print conversion to LCD
     838:	88 ee       	ldi	r24, 0xE8	; 232
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	0e 94 b8 02 	call	0x570	; 0x570 <print_height_change>
     840:	25 c0       	rjmp	.+74     	; 0x88c <__vector_4+0x288>
			}
			break;
			case CANGLE: // increment angle value (as long as >= MIN (0))
			if((angle-valueChange) >= 0)
     842:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <angle>
     846:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <angle+0x1>
     84a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     84e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     852:	82 1b       	sub	r24, r18
     854:	93 0b       	sbc	r25, r19
     856:	d2 f0       	brmi	.+52     	; 0x88c <__vector_4+0x288>
			{
				angle = angle - valueChange;
     858:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <angle>
     85c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <angle+0x1>
     860:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     864:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     868:	82 1b       	sub	r24, r18
     86a:	93 0b       	sbc	r25, r19
     86c:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <angle+0x1>
     870:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <angle>
				ftoa(angle,angleConv); // convert angle to char array (angleConv) with 1 decimal place
     874:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <angle>
     878:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <angle+0x1>
     87c:	68 ed       	ldi	r22, 0xD8	; 216
     87e:	71 e0       	ldi	r23, 0x01	; 1
     880:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_angle_change(angleConv);	// print conversion to LCD
     884:	88 ed       	ldi	r24, 0xD8	; 216
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	0e 94 dd 02 	call	0x5ba	; 0x5ba <print_angle_change>
			break;
		}
	}


	if(PINC == BUTTON) // If button press triggered interrupt
     88c:	86 b1       	in	r24, 0x06	; 6
     88e:	8f 36       	cpi	r24, 0x6F	; 111
     890:	09 f0       	breq	.+2      	; 0x894 <__vector_4+0x290>
     892:	9a c1       	rjmp	.+820    	; 0xbc8 <__stack+0x2c9>
	{
		switch(state)
     894:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <state>
     898:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <state+0x1>
     89c:	81 30       	cpi	r24, 0x01	; 1
     89e:	91 05       	cpc	r25, r1
     8a0:	f1 f0       	breq	.+60     	; 0x8de <__vector_4+0x2da>
     8a2:	1c f4       	brge	.+6      	; 0x8aa <__vector_4+0x2a6>
     8a4:	89 2b       	or	r24, r25
     8a6:	41 f0       	breq	.+16     	; 0x8b8 <__vector_4+0x2b4>
     8a8:	8f c1       	rjmp	.+798    	; 0xbc8 <__stack+0x2c9>
     8aa:	82 30       	cpi	r24, 0x02	; 2
     8ac:	91 05       	cpc	r25, r1
     8ae:	51 f1       	breq	.+84     	; 0x904 <__stack+0x5>
     8b0:	03 97       	sbiw	r24, 0x03	; 3
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <__vector_4+0x2b2>
     8b4:	df c0       	rjmp	.+446    	; 0xa74 <__stack+0x175>
     8b6:	88 c1       	rjmp	.+784    	; 0xbc8 <__stack+0x2c9>
		{
			case HEIGHT: // change to height change state
			ftoa(height,heightConv);
     8b8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <height>
     8bc:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <height+0x1>
     8c0:	68 ee       	ldi	r22, 0xE8	; 232
     8c2:	71 e0       	ldi	r23, 0x01	; 1
     8c4:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
			print_height_change(heightConv);
     8c8:	88 ee       	ldi	r24, 0xE8	; 232
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	0e 94 b8 02 	call	0x570	; 0x570 <print_height_change>
			state = CHEIGHT;
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <state+0x1>
     8d8:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <state>
			break;
     8dc:	75 c1       	rjmp	.+746    	; 0xbc8 <__stack+0x2c9>
			case ANGLE: // change to angle change state
			ftoa(angle,angleConv);
     8de:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <angle>
     8e2:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <angle+0x1>
     8e6:	68 ed       	ldi	r22, 0xD8	; 216
     8e8:	71 e0       	ldi	r23, 0x01	; 1
     8ea:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
			print_angle_change(angleConv);
     8ee:	88 ed       	ldi	r24, 0xD8	; 216
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	0e 94 dd 02 	call	0x5ba	; 0x5ba <print_angle_change>
			state = CANGLE;
     8f6:	83 e0       	ldi	r24, 0x03	; 3
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <state+0x1>
     8fe:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <state>
			break;
     902:	62 c1       	rjmp	.+708    	; 0xbc8 <__stack+0x2c9>
			case CHEIGHT: // confirm height change value
			valueConfirm = 1; // set flag
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <valueConfirm+0x1>
     90c:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <valueConfirm>
			// Convert height to angle
			dAngle = height; // save height variable as double
     910:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <height>
     914:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <height+0x1>
     918:	07 2e       	mov	r0, r23
     91a:	00 0c       	add	r0, r0
     91c:	88 0b       	sbc	r24, r24
     91e:	99 0b       	sbc	r25, r25
     920:	0e 94 2b 07 	call	0xe56	; 0xe56 <__floatsisf>
     924:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <dAngle>
     928:	70 93 01 02 	sts	0x0201, r23	; 0x800201 <dAngle+0x1>
     92c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <dAngle+0x2>
     930:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <dAngle+0x3>
			dAngle = dAngle / 10; // remove extra power from when stored as int
     934:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <dAngle>
     938:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <dAngle+0x1>
     93c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <dAngle+0x2>
     940:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <dAngle+0x3>
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	40 e2       	ldi	r20, 0x20	; 32
     94a:	51 e4       	ldi	r21, 0x41	; 65
     94c:	0e 94 81 06 	call	0xd02	; 0xd02 <__divsf3>
     950:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <dAngle>
     954:	70 93 01 02 	sts	0x0201, r23	; 0x800201 <dAngle+0x1>
     958:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <dAngle+0x2>
     95c:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <dAngle+0x3>
			dAngle = dAngle * dAngle; // square dAngle
     960:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <dAngle>
     964:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <dAngle+0x1>
     968:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <dAngle+0x2>
     96c:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <dAngle+0x3>
     970:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <dAngle>
     974:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <dAngle+0x1>
     978:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <dAngle+0x2>
     97c:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <dAngle+0x3>
     980:	0e 94 95 08 	call	0x112a	; 0x112a <__mulsf3>
     984:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <dAngle>
     988:	70 93 01 02 	sts	0x0201, r23	; 0x800201 <dAngle+0x1>
     98c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <dAngle+0x2>
     990:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <dAngle+0x3>
			dAngle = sqrt(225 - dAngle) / 15;
     994:	c0 90 00 02 	lds	r12, 0x0200	; 0x800200 <dAngle>
     998:	d0 90 01 02 	lds	r13, 0x0201	; 0x800201 <dAngle+0x1>
     99c:	e0 90 02 02 	lds	r14, 0x0202	; 0x800202 <dAngle+0x2>
     9a0:	f0 90 03 02 	lds	r15, 0x0203	; 0x800203 <dAngle+0x3>
     9a4:	a7 01       	movw	r20, r14
     9a6:	96 01       	movw	r18, r12
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e6       	ldi	r24, 0x61	; 97
     9ae:	93 e4       	ldi	r25, 0x43	; 67
     9b0:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__subsf3>
     9b4:	0e 94 08 09 	call	0x1210	; 0x1210 <sqrt>
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	40 e7       	ldi	r20, 0x70	; 112
     9be:	51 e4       	ldi	r21, 0x41	; 65
     9c0:	0e 94 81 06 	call	0xd02	; 0xd02 <__divsf3>
     9c4:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <dAngle>
     9c8:	70 93 01 02 	sts	0x0201, r23	; 0x800201 <dAngle+0x1>
     9cc:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <dAngle+0x2>
     9d0:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <dAngle+0x3>
			dAngle = acos(dAngle) * (180 / M_PI);  // See Alex's lab notebook for formula used (combo of pythag. and trig.)
     9d4:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <dAngle>
     9d8:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <dAngle+0x1>
     9dc:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <dAngle+0x2>
     9e0:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <dAngle+0x3>
     9e4:	0e 94 fe 05 	call	0xbfc	; 0xbfc <acos>
     9e8:	20 ee       	ldi	r18, 0xE0	; 224
     9ea:	3e e2       	ldi	r19, 0x2E	; 46
     9ec:	45 e6       	ldi	r20, 0x65	; 101
     9ee:	52 e4       	ldi	r21, 0x42	; 66
     9f0:	0e 94 95 08 	call	0x112a	; 0x112a <__mulsf3>
     9f4:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <dAngle>
     9f8:	70 93 01 02 	sts	0x0201, r23	; 0x800201 <dAngle+0x1>
     9fc:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <dAngle+0x2>
     a00:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <dAngle+0x3>
			angle = floor((dAngle * 10));
     a04:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <dAngle>
     a08:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <dAngle+0x1>
     a0c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <dAngle+0x2>
     a10:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <dAngle+0x3>
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	40 e2       	ldi	r20, 0x20	; 32
     a1a:	51 e4       	ldi	r21, 0x41	; 65
     a1c:	0e 94 95 08 	call	0x112a	; 0x112a <__mulsf3>
     a20:	0e 94 66 07 	call	0xecc	; 0xecc <floor>
     a24:	0e 94 f3 06 	call	0xde6	; 0xde6 <__fixsfsi>
     a28:	70 93 05 02 	sts	0x0205, r23	; 0x800205 <angle+0x1>
     a2c:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <angle>
			if (height == 150)
     a30:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <height>
     a34:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <height+0x1>
     a38:	86 39       	cpi	r24, 0x96	; 150
     a3a:	91 05       	cpc	r25, r1
     a3c:	31 f4       	brne	.+12     	; 0xa4a <__stack+0x14b>
			{
				angle = 900;
     a3e:	84 e8       	ldi	r24, 0x84	; 132
     a40:	93 e0       	ldi	r25, 0x03	; 3
     a42:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <angle+0x1>
     a46:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <angle>
			}
			ftoa(angle, angleConv);
     a4a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <angle>
     a4e:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <angle+0x1>
     a52:	68 ed       	ldi	r22, 0xD8	; 216
     a54:	71 e0       	ldi	r23, 0x01	; 1
     a56:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
			print_height_angle(angleConv,heightConv, 1); // refresh screen with height selected
     a5a:	41 e0       	ldi	r20, 0x01	; 1
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	68 ee       	ldi	r22, 0xE8	; 232
     a60:	71 e0       	ldi	r23, 0x01	; 1
     a62:	88 ed       	ldi	r24, 0xD8	; 216
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	0e 94 72 02 	call	0x4e4	; 0x4e4 <print_height_angle>
			state = HEIGHT; // exit from change function
     a6a:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <state+0x1>
     a6e:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <state>
			break;
     a72:	aa c0       	rjmp	.+340    	; 0xbc8 <__stack+0x2c9>
			case CANGLE: // confirm angle change value
			valueConfirm = 1; // set flag - might need to make unique flag
     a74:	c1 e0       	ldi	r28, 0x01	; 1
     a76:	d0 e0       	ldi	r29, 0x00	; 0
     a78:	d0 93 fb 01 	sts	0x01FB, r29	; 0x8001fb <valueConfirm+0x1>
     a7c:	c0 93 fa 01 	sts	0x01FA, r28	; 0x8001fa <valueConfirm>
			// Convert angle to height
			dHeight = angle; // save angle as double
     a80:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <angle>
     a84:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <angle+0x1>
     a88:	07 2e       	mov	r0, r23
     a8a:	00 0c       	add	r0, r0
     a8c:	88 0b       	sbc	r24, r24
     a8e:	99 0b       	sbc	r25, r25
     a90:	0e 94 2b 07 	call	0xe56	; 0xe56 <__floatsisf>
     a94:	60 93 fc 01 	sts	0x01FC, r22	; 0x8001fc <dHeight>
     a98:	70 93 fd 01 	sts	0x01FD, r23	; 0x8001fd <dHeight+0x1>
     a9c:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <dHeight+0x2>
     aa0:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <dHeight+0x3>
			dHeight = (dHeight/10) * (M_PI / 180); // convert angle to radians
     aa4:	60 91 fc 01 	lds	r22, 0x01FC	; 0x8001fc <dHeight>
     aa8:	70 91 fd 01 	lds	r23, 0x01FD	; 0x8001fd <dHeight+0x1>
     aac:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <dHeight+0x2>
     ab0:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <dHeight+0x3>
     ab4:	20 e0       	ldi	r18, 0x00	; 0
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	40 e2       	ldi	r20, 0x20	; 32
     aba:	51 e4       	ldi	r21, 0x41	; 65
     abc:	0e 94 81 06 	call	0xd02	; 0xd02 <__divsf3>
     ac0:	25 e3       	ldi	r18, 0x35	; 53
     ac2:	3a ef       	ldi	r19, 0xFA	; 250
     ac4:	4e e8       	ldi	r20, 0x8E	; 142
     ac6:	5c e3       	ldi	r21, 0x3C	; 60
     ac8:	0e 94 95 08 	call	0x112a	; 0x112a <__mulsf3>
     acc:	60 93 fc 01 	sts	0x01FC, r22	; 0x8001fc <dHeight>
     ad0:	70 93 fd 01 	sts	0x01FD, r23	; 0x8001fd <dHeight+0x1>
     ad4:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <dHeight+0x2>
     ad8:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <dHeight+0x3>
			dHeight = 15*(cos(dHeight));
     adc:	60 91 fc 01 	lds	r22, 0x01FC	; 0x8001fc <dHeight>
     ae0:	70 91 fd 01 	lds	r23, 0x01FD	; 0x8001fd <dHeight+0x1>
     ae4:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <dHeight+0x2>
     ae8:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <dHeight+0x3>
     aec:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <cos>
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	40 e7       	ldi	r20, 0x70	; 112
     af6:	51 e4       	ldi	r21, 0x41	; 65
     af8:	0e 94 95 08 	call	0x112a	; 0x112a <__mulsf3>
     afc:	60 93 fc 01 	sts	0x01FC, r22	; 0x8001fc <dHeight>
     b00:	70 93 fd 01 	sts	0x01FD, r23	; 0x8001fd <dHeight+0x1>
     b04:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <dHeight+0x2>
     b08:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <dHeight+0x3>
			dHeight = dHeight * dHeight;
     b0c:	60 91 fc 01 	lds	r22, 0x01FC	; 0x8001fc <dHeight>
     b10:	70 91 fd 01 	lds	r23, 0x01FD	; 0x8001fd <dHeight+0x1>
     b14:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <dHeight+0x2>
     b18:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <dHeight+0x3>
     b1c:	20 91 fc 01 	lds	r18, 0x01FC	; 0x8001fc <dHeight>
     b20:	30 91 fd 01 	lds	r19, 0x01FD	; 0x8001fd <dHeight+0x1>
     b24:	40 91 fe 01 	lds	r20, 0x01FE	; 0x8001fe <dHeight+0x2>
     b28:	50 91 ff 01 	lds	r21, 0x01FF	; 0x8001ff <dHeight+0x3>
     b2c:	0e 94 95 08 	call	0x112a	; 0x112a <__mulsf3>
     b30:	60 93 fc 01 	sts	0x01FC, r22	; 0x8001fc <dHeight>
     b34:	70 93 fd 01 	sts	0x01FD, r23	; 0x8001fd <dHeight+0x1>
     b38:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <dHeight+0x2>
     b3c:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <dHeight+0x3>
			dHeight = sqrt((225-dHeight));
     b40:	c0 90 fc 01 	lds	r12, 0x01FC	; 0x8001fc <dHeight>
     b44:	d0 90 fd 01 	lds	r13, 0x01FD	; 0x8001fd <dHeight+0x1>
     b48:	e0 90 fe 01 	lds	r14, 0x01FE	; 0x8001fe <dHeight+0x2>
     b4c:	f0 90 ff 01 	lds	r15, 0x01FF	; 0x8001ff <dHeight+0x3>
     b50:	a7 01       	movw	r20, r14
     b52:	96 01       	movw	r18, r12
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	81 e6       	ldi	r24, 0x61	; 97
     b5a:	93 e4       	ldi	r25, 0x43	; 67
     b5c:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__subsf3>
     b60:	0e 94 08 09 	call	0x1210	; 0x1210 <sqrt>
     b64:	60 93 fc 01 	sts	0x01FC, r22	; 0x8001fc <dHeight>
     b68:	70 93 fd 01 	sts	0x01FD, r23	; 0x8001fd <dHeight+0x1>
     b6c:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <dHeight+0x2>
     b70:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <dHeight+0x3>
			height = floor((dHeight*10));
     b74:	60 91 fc 01 	lds	r22, 0x01FC	; 0x8001fc <dHeight>
     b78:	70 91 fd 01 	lds	r23, 0x01FD	; 0x8001fd <dHeight+0x1>
     b7c:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <dHeight+0x2>
     b80:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <dHeight+0x3>
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	40 e2       	ldi	r20, 0x20	; 32
     b8a:	51 e4       	ldi	r21, 0x41	; 65
     b8c:	0e 94 95 08 	call	0x112a	; 0x112a <__mulsf3>
     b90:	0e 94 66 07 	call	0xecc	; 0xecc <floor>
     b94:	0e 94 f3 06 	call	0xde6	; 0xde6 <__fixsfsi>
     b98:	70 93 07 02 	sts	0x0207, r23	; 0x800207 <height+0x1>
     b9c:	60 93 06 02 	sts	0x0206, r22	; 0x800206 <height>
			ftoa(height,heightConv);
     ba0:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <height>
     ba4:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <height+0x1>
     ba8:	68 ee       	ldi	r22, 0xE8	; 232
     baa:	71 e0       	ldi	r23, 0x01	; 1
     bac:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
			print_height_angle(angleConv,heightConv, 0); // refresh screen with angle selected
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	68 ee       	ldi	r22, 0xE8	; 232
     bb6:	71 e0       	ldi	r23, 0x01	; 1
     bb8:	88 ed       	ldi	r24, 0xD8	; 216
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 72 02 	call	0x4e4	; 0x4e4 <print_height_angle>
			state = ANGLE;
     bc0:	d0 93 09 02 	sts	0x0209, r29	; 0x800209 <state+0x1>
     bc4:	c0 93 08 02 	sts	0x0208, r28	; 0x800208 <state>
			break;
		}
	}
	
	while(PINC != 127)
     bc8:	86 b1       	in	r24, 0x06	; 6
     bca:	8f 37       	cpi	r24, 0x7F	; 127
     bcc:	e9 f7       	brne	.-6      	; 0xbc8 <__stack+0x2c9>
	{
		
	}

}
     bce:	ff 91       	pop	r31
     bd0:	ef 91       	pop	r30
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	bf 91       	pop	r27
     bd8:	af 91       	pop	r26
     bda:	9f 91       	pop	r25
     bdc:	8f 91       	pop	r24
     bde:	7f 91       	pop	r23
     be0:	6f 91       	pop	r22
     be2:	5f 91       	pop	r21
     be4:	4f 91       	pop	r20
     be6:	3f 91       	pop	r19
     be8:	2f 91       	pop	r18
     bea:	ff 90       	pop	r15
     bec:	ef 90       	pop	r14
     bee:	df 90       	pop	r13
     bf0:	cf 90       	pop	r12
     bf2:	0f 90       	pop	r0
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	0f 90       	pop	r0
     bf8:	1f 90       	pop	r1
     bfa:	18 95       	reti

00000bfc <acos>:
     bfc:	9f 93       	push	r25
     bfe:	9f 77       	andi	r25, 0x7F	; 127
     c00:	0e 94 7d 07 	call	0xefa	; 0xefa <__fp_arccos>
     c04:	0f 90       	pop	r0
     c06:	00 20       	and	r0, r0
     c08:	42 f4       	brpl	.+16     	; 0xc1a <acos+0x1e>
     c0a:	90 58       	subi	r25, 0x80	; 128
     c0c:	a2 ea       	ldi	r26, 0xA2	; 162
     c0e:	2a ed       	ldi	r18, 0xDA	; 218
     c10:	3f e0       	ldi	r19, 0x0F	; 15
     c12:	49 e4       	ldi	r20, 0x49	; 73
     c14:	50 e4       	ldi	r21, 0x40	; 64
     c16:	0e 94 27 06 	call	0xc4e	; 0xc4e <__addsf3x>
     c1a:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__fp_round>

00000c1e <__subsf3>:
     c1e:	50 58       	subi	r21, 0x80	; 128

00000c20 <__addsf3>:
     c20:	bb 27       	eor	r27, r27
     c22:	aa 27       	eor	r26, r26
     c24:	0e 94 27 06 	call	0xc4e	; 0xc4e <__addsf3x>
     c28:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__fp_round>
     c2c:	0e 94 f6 07 	call	0xfec	; 0xfec <__fp_pscA>
     c30:	38 f0       	brcs	.+14     	; 0xc40 <__addsf3+0x20>
     c32:	0e 94 fd 07 	call	0xffa	; 0xffa <__fp_pscB>
     c36:	20 f0       	brcs	.+8      	; 0xc40 <__addsf3+0x20>
     c38:	39 f4       	brne	.+14     	; 0xc48 <__addsf3+0x28>
     c3a:	9f 3f       	cpi	r25, 0xFF	; 255
     c3c:	19 f4       	brne	.+6      	; 0xc44 <__addsf3+0x24>
     c3e:	26 f4       	brtc	.+8      	; 0xc48 <__addsf3+0x28>
     c40:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__fp_nan>
     c44:	0e f4       	brtc	.+2      	; 0xc48 <__addsf3+0x28>
     c46:	e0 95       	com	r30
     c48:	e7 fb       	bst	r30, 7
     c4a:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__fp_inf>

00000c4e <__addsf3x>:
     c4e:	e9 2f       	mov	r30, r25
     c50:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__fp_split3>
     c54:	58 f3       	brcs	.-42     	; 0xc2c <__addsf3+0xc>
     c56:	ba 17       	cp	r27, r26
     c58:	62 07       	cpc	r22, r18
     c5a:	73 07       	cpc	r23, r19
     c5c:	84 07       	cpc	r24, r20
     c5e:	95 07       	cpc	r25, r21
     c60:	20 f0       	brcs	.+8      	; 0xc6a <__addsf3x+0x1c>
     c62:	79 f4       	brne	.+30     	; 0xc82 <__addsf3x+0x34>
     c64:	a6 f5       	brtc	.+104    	; 0xcce <__addsf3x+0x80>
     c66:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__fp_zero>
     c6a:	0e f4       	brtc	.+2      	; 0xc6e <__addsf3x+0x20>
     c6c:	e0 95       	com	r30
     c6e:	0b 2e       	mov	r0, r27
     c70:	ba 2f       	mov	r27, r26
     c72:	a0 2d       	mov	r26, r0
     c74:	0b 01       	movw	r0, r22
     c76:	b9 01       	movw	r22, r18
     c78:	90 01       	movw	r18, r0
     c7a:	0c 01       	movw	r0, r24
     c7c:	ca 01       	movw	r24, r20
     c7e:	a0 01       	movw	r20, r0
     c80:	11 24       	eor	r1, r1
     c82:	ff 27       	eor	r31, r31
     c84:	59 1b       	sub	r21, r25
     c86:	99 f0       	breq	.+38     	; 0xcae <__addsf3x+0x60>
     c88:	59 3f       	cpi	r21, 0xF9	; 249
     c8a:	50 f4       	brcc	.+20     	; 0xca0 <__addsf3x+0x52>
     c8c:	50 3e       	cpi	r21, 0xE0	; 224
     c8e:	68 f1       	brcs	.+90     	; 0xcea <__addsf3x+0x9c>
     c90:	1a 16       	cp	r1, r26
     c92:	f0 40       	sbci	r31, 0x00	; 0
     c94:	a2 2f       	mov	r26, r18
     c96:	23 2f       	mov	r18, r19
     c98:	34 2f       	mov	r19, r20
     c9a:	44 27       	eor	r20, r20
     c9c:	58 5f       	subi	r21, 0xF8	; 248
     c9e:	f3 cf       	rjmp	.-26     	; 0xc86 <__addsf3x+0x38>
     ca0:	46 95       	lsr	r20
     ca2:	37 95       	ror	r19
     ca4:	27 95       	ror	r18
     ca6:	a7 95       	ror	r26
     ca8:	f0 40       	sbci	r31, 0x00	; 0
     caa:	53 95       	inc	r21
     cac:	c9 f7       	brne	.-14     	; 0xca0 <__addsf3x+0x52>
     cae:	7e f4       	brtc	.+30     	; 0xcce <__addsf3x+0x80>
     cb0:	1f 16       	cp	r1, r31
     cb2:	ba 0b       	sbc	r27, r26
     cb4:	62 0b       	sbc	r22, r18
     cb6:	73 0b       	sbc	r23, r19
     cb8:	84 0b       	sbc	r24, r20
     cba:	ba f0       	brmi	.+46     	; 0xcea <__addsf3x+0x9c>
     cbc:	91 50       	subi	r25, 0x01	; 1
     cbe:	a1 f0       	breq	.+40     	; 0xce8 <__addsf3x+0x9a>
     cc0:	ff 0f       	add	r31, r31
     cc2:	bb 1f       	adc	r27, r27
     cc4:	66 1f       	adc	r22, r22
     cc6:	77 1f       	adc	r23, r23
     cc8:	88 1f       	adc	r24, r24
     cca:	c2 f7       	brpl	.-16     	; 0xcbc <__addsf3x+0x6e>
     ccc:	0e c0       	rjmp	.+28     	; 0xcea <__addsf3x+0x9c>
     cce:	ba 0f       	add	r27, r26
     cd0:	62 1f       	adc	r22, r18
     cd2:	73 1f       	adc	r23, r19
     cd4:	84 1f       	adc	r24, r20
     cd6:	48 f4       	brcc	.+18     	; 0xcea <__addsf3x+0x9c>
     cd8:	87 95       	ror	r24
     cda:	77 95       	ror	r23
     cdc:	67 95       	ror	r22
     cde:	b7 95       	ror	r27
     ce0:	f7 95       	ror	r31
     ce2:	9e 3f       	cpi	r25, 0xFE	; 254
     ce4:	08 f0       	brcs	.+2      	; 0xce8 <__addsf3x+0x9a>
     ce6:	b0 cf       	rjmp	.-160    	; 0xc48 <__addsf3+0x28>
     ce8:	93 95       	inc	r25
     cea:	88 0f       	add	r24, r24
     cec:	08 f0       	brcs	.+2      	; 0xcf0 <__addsf3x+0xa2>
     cee:	99 27       	eor	r25, r25
     cf0:	ee 0f       	add	r30, r30
     cf2:	97 95       	ror	r25
     cf4:	87 95       	ror	r24
     cf6:	08 95       	ret

00000cf8 <cos>:
     cf8:	0e 94 06 08 	call	0x100c	; 0x100c <__fp_rempio2>
     cfc:	e3 95       	inc	r30
     cfe:	0c 94 40 08 	jmp	0x1080	; 0x1080 <__fp_sinus>

00000d02 <__divsf3>:
     d02:	0e 94 95 06 	call	0xd2a	; 0xd2a <__divsf3x>
     d06:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__fp_round>
     d0a:	0e 94 fd 07 	call	0xffa	; 0xffa <__fp_pscB>
     d0e:	58 f0       	brcs	.+22     	; 0xd26 <__divsf3+0x24>
     d10:	0e 94 f6 07 	call	0xfec	; 0xfec <__fp_pscA>
     d14:	40 f0       	brcs	.+16     	; 0xd26 <__divsf3+0x24>
     d16:	29 f4       	brne	.+10     	; 0xd22 <__divsf3+0x20>
     d18:	5f 3f       	cpi	r21, 0xFF	; 255
     d1a:	29 f0       	breq	.+10     	; 0xd26 <__divsf3+0x24>
     d1c:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__fp_inf>
     d20:	51 11       	cpse	r21, r1
     d22:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__fp_szero>
     d26:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__fp_nan>

00000d2a <__divsf3x>:
     d2a:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__fp_split3>
     d2e:	68 f3       	brcs	.-38     	; 0xd0a <__divsf3+0x8>

00000d30 <__divsf3_pse>:
     d30:	99 23       	and	r25, r25
     d32:	b1 f3       	breq	.-20     	; 0xd20 <__divsf3+0x1e>
     d34:	55 23       	and	r21, r21
     d36:	91 f3       	breq	.-28     	; 0xd1c <__divsf3+0x1a>
     d38:	95 1b       	sub	r25, r21
     d3a:	55 0b       	sbc	r21, r21
     d3c:	bb 27       	eor	r27, r27
     d3e:	aa 27       	eor	r26, r26
     d40:	62 17       	cp	r22, r18
     d42:	73 07       	cpc	r23, r19
     d44:	84 07       	cpc	r24, r20
     d46:	38 f0       	brcs	.+14     	; 0xd56 <__divsf3_pse+0x26>
     d48:	9f 5f       	subi	r25, 0xFF	; 255
     d4a:	5f 4f       	sbci	r21, 0xFF	; 255
     d4c:	22 0f       	add	r18, r18
     d4e:	33 1f       	adc	r19, r19
     d50:	44 1f       	adc	r20, r20
     d52:	aa 1f       	adc	r26, r26
     d54:	a9 f3       	breq	.-22     	; 0xd40 <__divsf3_pse+0x10>
     d56:	35 d0       	rcall	.+106    	; 0xdc2 <__divsf3_pse+0x92>
     d58:	0e 2e       	mov	r0, r30
     d5a:	3a f0       	brmi	.+14     	; 0xd6a <__divsf3_pse+0x3a>
     d5c:	e0 e8       	ldi	r30, 0x80	; 128
     d5e:	32 d0       	rcall	.+100    	; 0xdc4 <__divsf3_pse+0x94>
     d60:	91 50       	subi	r25, 0x01	; 1
     d62:	50 40       	sbci	r21, 0x00	; 0
     d64:	e6 95       	lsr	r30
     d66:	00 1c       	adc	r0, r0
     d68:	ca f7       	brpl	.-14     	; 0xd5c <__divsf3_pse+0x2c>
     d6a:	2b d0       	rcall	.+86     	; 0xdc2 <__divsf3_pse+0x92>
     d6c:	fe 2f       	mov	r31, r30
     d6e:	29 d0       	rcall	.+82     	; 0xdc2 <__divsf3_pse+0x92>
     d70:	66 0f       	add	r22, r22
     d72:	77 1f       	adc	r23, r23
     d74:	88 1f       	adc	r24, r24
     d76:	bb 1f       	adc	r27, r27
     d78:	26 17       	cp	r18, r22
     d7a:	37 07       	cpc	r19, r23
     d7c:	48 07       	cpc	r20, r24
     d7e:	ab 07       	cpc	r26, r27
     d80:	b0 e8       	ldi	r27, 0x80	; 128
     d82:	09 f0       	breq	.+2      	; 0xd86 <__divsf3_pse+0x56>
     d84:	bb 0b       	sbc	r27, r27
     d86:	80 2d       	mov	r24, r0
     d88:	bf 01       	movw	r22, r30
     d8a:	ff 27       	eor	r31, r31
     d8c:	93 58       	subi	r25, 0x83	; 131
     d8e:	5f 4f       	sbci	r21, 0xFF	; 255
     d90:	3a f0       	brmi	.+14     	; 0xda0 <__divsf3_pse+0x70>
     d92:	9e 3f       	cpi	r25, 0xFE	; 254
     d94:	51 05       	cpc	r21, r1
     d96:	78 f0       	brcs	.+30     	; 0xdb6 <__divsf3_pse+0x86>
     d98:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__fp_inf>
     d9c:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__fp_szero>
     da0:	5f 3f       	cpi	r21, 0xFF	; 255
     da2:	e4 f3       	brlt	.-8      	; 0xd9c <__divsf3_pse+0x6c>
     da4:	98 3e       	cpi	r25, 0xE8	; 232
     da6:	d4 f3       	brlt	.-12     	; 0xd9c <__divsf3_pse+0x6c>
     da8:	86 95       	lsr	r24
     daa:	77 95       	ror	r23
     dac:	67 95       	ror	r22
     dae:	b7 95       	ror	r27
     db0:	f7 95       	ror	r31
     db2:	9f 5f       	subi	r25, 0xFF	; 255
     db4:	c9 f7       	brne	.-14     	; 0xda8 <__divsf3_pse+0x78>
     db6:	88 0f       	add	r24, r24
     db8:	91 1d       	adc	r25, r1
     dba:	96 95       	lsr	r25
     dbc:	87 95       	ror	r24
     dbe:	97 f9       	bld	r25, 7
     dc0:	08 95       	ret
     dc2:	e1 e0       	ldi	r30, 0x01	; 1
     dc4:	66 0f       	add	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	88 1f       	adc	r24, r24
     dca:	bb 1f       	adc	r27, r27
     dcc:	62 17       	cp	r22, r18
     dce:	73 07       	cpc	r23, r19
     dd0:	84 07       	cpc	r24, r20
     dd2:	ba 07       	cpc	r27, r26
     dd4:	20 f0       	brcs	.+8      	; 0xdde <__divsf3_pse+0xae>
     dd6:	62 1b       	sub	r22, r18
     dd8:	73 0b       	sbc	r23, r19
     dda:	84 0b       	sbc	r24, r20
     ddc:	ba 0b       	sbc	r27, r26
     dde:	ee 1f       	adc	r30, r30
     de0:	88 f7       	brcc	.-30     	; 0xdc4 <__divsf3_pse+0x94>
     de2:	e0 95       	com	r30
     de4:	08 95       	ret

00000de6 <__fixsfsi>:
     de6:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__fixunssfsi>
     dea:	68 94       	set
     dec:	b1 11       	cpse	r27, r1
     dee:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__fp_szero>
     df2:	08 95       	ret

00000df4 <__fixunssfsi>:
     df4:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__fp_splitA>
     df8:	88 f0       	brcs	.+34     	; 0xe1c <__fixunssfsi+0x28>
     dfa:	9f 57       	subi	r25, 0x7F	; 127
     dfc:	98 f0       	brcs	.+38     	; 0xe24 <__fixunssfsi+0x30>
     dfe:	b9 2f       	mov	r27, r25
     e00:	99 27       	eor	r25, r25
     e02:	b7 51       	subi	r27, 0x17	; 23
     e04:	b0 f0       	brcs	.+44     	; 0xe32 <__fixunssfsi+0x3e>
     e06:	e1 f0       	breq	.+56     	; 0xe40 <__fixunssfsi+0x4c>
     e08:	66 0f       	add	r22, r22
     e0a:	77 1f       	adc	r23, r23
     e0c:	88 1f       	adc	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	1a f0       	brmi	.+6      	; 0xe18 <__fixunssfsi+0x24>
     e12:	ba 95       	dec	r27
     e14:	c9 f7       	brne	.-14     	; 0xe08 <__fixunssfsi+0x14>
     e16:	14 c0       	rjmp	.+40     	; 0xe40 <__fixunssfsi+0x4c>
     e18:	b1 30       	cpi	r27, 0x01	; 1
     e1a:	91 f0       	breq	.+36     	; 0xe40 <__fixunssfsi+0x4c>
     e1c:	0e 94 8e 08 	call	0x111c	; 0x111c <__fp_zero>
     e20:	b1 e0       	ldi	r27, 0x01	; 1
     e22:	08 95       	ret
     e24:	0c 94 8e 08 	jmp	0x111c	; 0x111c <__fp_zero>
     e28:	67 2f       	mov	r22, r23
     e2a:	78 2f       	mov	r23, r24
     e2c:	88 27       	eor	r24, r24
     e2e:	b8 5f       	subi	r27, 0xF8	; 248
     e30:	39 f0       	breq	.+14     	; 0xe40 <__fixunssfsi+0x4c>
     e32:	b9 3f       	cpi	r27, 0xF9	; 249
     e34:	cc f3       	brlt	.-14     	; 0xe28 <__fixunssfsi+0x34>
     e36:	86 95       	lsr	r24
     e38:	77 95       	ror	r23
     e3a:	67 95       	ror	r22
     e3c:	b3 95       	inc	r27
     e3e:	d9 f7       	brne	.-10     	; 0xe36 <__fixunssfsi+0x42>
     e40:	3e f4       	brtc	.+14     	; 0xe50 <__fixunssfsi+0x5c>
     e42:	90 95       	com	r25
     e44:	80 95       	com	r24
     e46:	70 95       	com	r23
     e48:	61 95       	neg	r22
     e4a:	7f 4f       	sbci	r23, 0xFF	; 255
     e4c:	8f 4f       	sbci	r24, 0xFF	; 255
     e4e:	9f 4f       	sbci	r25, 0xFF	; 255
     e50:	08 95       	ret

00000e52 <__floatunsisf>:
     e52:	e8 94       	clt
     e54:	09 c0       	rjmp	.+18     	; 0xe68 <__floatsisf+0x12>

00000e56 <__floatsisf>:
     e56:	97 fb       	bst	r25, 7
     e58:	3e f4       	brtc	.+14     	; 0xe68 <__floatsisf+0x12>
     e5a:	90 95       	com	r25
     e5c:	80 95       	com	r24
     e5e:	70 95       	com	r23
     e60:	61 95       	neg	r22
     e62:	7f 4f       	sbci	r23, 0xFF	; 255
     e64:	8f 4f       	sbci	r24, 0xFF	; 255
     e66:	9f 4f       	sbci	r25, 0xFF	; 255
     e68:	99 23       	and	r25, r25
     e6a:	a9 f0       	breq	.+42     	; 0xe96 <__floatsisf+0x40>
     e6c:	f9 2f       	mov	r31, r25
     e6e:	96 e9       	ldi	r25, 0x96	; 150
     e70:	bb 27       	eor	r27, r27
     e72:	93 95       	inc	r25
     e74:	f6 95       	lsr	r31
     e76:	87 95       	ror	r24
     e78:	77 95       	ror	r23
     e7a:	67 95       	ror	r22
     e7c:	b7 95       	ror	r27
     e7e:	f1 11       	cpse	r31, r1
     e80:	f8 cf       	rjmp	.-16     	; 0xe72 <__floatsisf+0x1c>
     e82:	fa f4       	brpl	.+62     	; 0xec2 <__floatsisf+0x6c>
     e84:	bb 0f       	add	r27, r27
     e86:	11 f4       	brne	.+4      	; 0xe8c <__floatsisf+0x36>
     e88:	60 ff       	sbrs	r22, 0
     e8a:	1b c0       	rjmp	.+54     	; 0xec2 <__floatsisf+0x6c>
     e8c:	6f 5f       	subi	r22, 0xFF	; 255
     e8e:	7f 4f       	sbci	r23, 0xFF	; 255
     e90:	8f 4f       	sbci	r24, 0xFF	; 255
     e92:	9f 4f       	sbci	r25, 0xFF	; 255
     e94:	16 c0       	rjmp	.+44     	; 0xec2 <__floatsisf+0x6c>
     e96:	88 23       	and	r24, r24
     e98:	11 f0       	breq	.+4      	; 0xe9e <__floatsisf+0x48>
     e9a:	96 e9       	ldi	r25, 0x96	; 150
     e9c:	11 c0       	rjmp	.+34     	; 0xec0 <__floatsisf+0x6a>
     e9e:	77 23       	and	r23, r23
     ea0:	21 f0       	breq	.+8      	; 0xeaa <__floatsisf+0x54>
     ea2:	9e e8       	ldi	r25, 0x8E	; 142
     ea4:	87 2f       	mov	r24, r23
     ea6:	76 2f       	mov	r23, r22
     ea8:	05 c0       	rjmp	.+10     	; 0xeb4 <__floatsisf+0x5e>
     eaa:	66 23       	and	r22, r22
     eac:	71 f0       	breq	.+28     	; 0xeca <__floatsisf+0x74>
     eae:	96 e8       	ldi	r25, 0x86	; 134
     eb0:	86 2f       	mov	r24, r22
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	2a f0       	brmi	.+10     	; 0xec2 <__floatsisf+0x6c>
     eb8:	9a 95       	dec	r25
     eba:	66 0f       	add	r22, r22
     ebc:	77 1f       	adc	r23, r23
     ebe:	88 1f       	adc	r24, r24
     ec0:	da f7       	brpl	.-10     	; 0xeb8 <__floatsisf+0x62>
     ec2:	88 0f       	add	r24, r24
     ec4:	96 95       	lsr	r25
     ec6:	87 95       	ror	r24
     ec8:	97 f9       	bld	r25, 7
     eca:	08 95       	ret

00000ecc <floor>:
     ecc:	0e 94 76 08 	call	0x10ec	; 0x10ec <__fp_trunc>
     ed0:	90 f0       	brcs	.+36     	; 0xef6 <floor+0x2a>
     ed2:	9f 37       	cpi	r25, 0x7F	; 127
     ed4:	48 f4       	brcc	.+18     	; 0xee8 <floor+0x1c>
     ed6:	91 11       	cpse	r25, r1
     ed8:	16 f0       	brts	.+4      	; 0xede <floor+0x12>
     eda:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__fp_szero>
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	80 e8       	ldi	r24, 0x80	; 128
     ee4:	9f eb       	ldi	r25, 0xBF	; 191
     ee6:	08 95       	ret
     ee8:	26 f4       	brtc	.+8      	; 0xef2 <floor+0x26>
     eea:	1b 16       	cp	r1, r27
     eec:	61 1d       	adc	r22, r1
     eee:	71 1d       	adc	r23, r1
     ef0:	81 1d       	adc	r24, r1
     ef2:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__fp_mintl>
     ef6:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__fp_mpack>

00000efa <__fp_arccos>:
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	1f 93       	push	r17
     f00:	0f 93       	push	r16
     f02:	8b 01       	movw	r16, r22
     f04:	ec 01       	movw	r28, r24
     f06:	e4 eb       	ldi	r30, 0xB4	; 180
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fp_powser>
     f0e:	0e 94 2f 08 	call	0x105e	; 0x105e <__fp_round>
     f12:	98 01       	movw	r18, r16
     f14:	ae 01       	movw	r20, r28
     f16:	8b 01       	movw	r16, r22
     f18:	ec 01       	movw	r28, r24
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	80 e8       	ldi	r24, 0x80	; 128
     f20:	9f e3       	ldi	r25, 0x3F	; 63
     f22:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__subsf3>
     f26:	0e 94 08 09 	call	0x1210	; 0x1210 <sqrt>
     f2a:	98 01       	movw	r18, r16
     f2c:	ae 01       	movw	r20, r28
     f2e:	0f 91       	pop	r16
     f30:	1f 91       	pop	r17
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__mulsf3x>

00000f3a <__fp_inf>:
     f3a:	97 f9       	bld	r25, 7
     f3c:	9f 67       	ori	r25, 0x7F	; 127
     f3e:	80 e8       	ldi	r24, 0x80	; 128
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	08 95       	ret

00000f46 <__fp_mintl>:
     f46:	88 23       	and	r24, r24
     f48:	71 f4       	brne	.+28     	; 0xf66 <__fp_mintl+0x20>
     f4a:	77 23       	and	r23, r23
     f4c:	21 f0       	breq	.+8      	; 0xf56 <__fp_mintl+0x10>
     f4e:	98 50       	subi	r25, 0x08	; 8
     f50:	87 2b       	or	r24, r23
     f52:	76 2f       	mov	r23, r22
     f54:	07 c0       	rjmp	.+14     	; 0xf64 <__fp_mintl+0x1e>
     f56:	66 23       	and	r22, r22
     f58:	11 f4       	brne	.+4      	; 0xf5e <__fp_mintl+0x18>
     f5a:	99 27       	eor	r25, r25
     f5c:	0d c0       	rjmp	.+26     	; 0xf78 <__fp_mintl+0x32>
     f5e:	90 51       	subi	r25, 0x10	; 16
     f60:	86 2b       	or	r24, r22
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	2a f0       	brmi	.+10     	; 0xf72 <__fp_mintl+0x2c>
     f68:	9a 95       	dec	r25
     f6a:	66 0f       	add	r22, r22
     f6c:	77 1f       	adc	r23, r23
     f6e:	88 1f       	adc	r24, r24
     f70:	da f7       	brpl	.-10     	; 0xf68 <__fp_mintl+0x22>
     f72:	88 0f       	add	r24, r24
     f74:	96 95       	lsr	r25
     f76:	87 95       	ror	r24
     f78:	97 f9       	bld	r25, 7
     f7a:	08 95       	ret

00000f7c <__fp_mpack>:
     f7c:	9f 3f       	cpi	r25, 0xFF	; 255
     f7e:	31 f0       	breq	.+12     	; 0xf8c <__fp_mpack_finite+0xc>

00000f80 <__fp_mpack_finite>:
     f80:	91 50       	subi	r25, 0x01	; 1
     f82:	20 f4       	brcc	.+8      	; 0xf8c <__fp_mpack_finite+0xc>
     f84:	87 95       	ror	r24
     f86:	77 95       	ror	r23
     f88:	67 95       	ror	r22
     f8a:	b7 95       	ror	r27
     f8c:	88 0f       	add	r24, r24
     f8e:	91 1d       	adc	r25, r1
     f90:	96 95       	lsr	r25
     f92:	87 95       	ror	r24
     f94:	97 f9       	bld	r25, 7
     f96:	08 95       	ret

00000f98 <__fp_nan>:
     f98:	9f ef       	ldi	r25, 0xFF	; 255
     f9a:	80 ec       	ldi	r24, 0xC0	; 192
     f9c:	08 95       	ret

00000f9e <__fp_powser>:
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	1f 93       	push	r17
     fa4:	0f 93       	push	r16
     fa6:	ff 92       	push	r15
     fa8:	ef 92       	push	r14
     faa:	df 92       	push	r13
     fac:	7b 01       	movw	r14, r22
     fae:	8c 01       	movw	r16, r24
     fb0:	68 94       	set
     fb2:	06 c0       	rjmp	.+12     	; 0xfc0 <__fp_powser+0x22>
     fb4:	da 2e       	mov	r13, r26
     fb6:	ef 01       	movw	r28, r30
     fb8:	0e 94 a8 08 	call	0x1150	; 0x1150 <__mulsf3x>
     fbc:	fe 01       	movw	r30, r28
     fbe:	e8 94       	clt
     fc0:	a5 91       	lpm	r26, Z+
     fc2:	25 91       	lpm	r18, Z+
     fc4:	35 91       	lpm	r19, Z+
     fc6:	45 91       	lpm	r20, Z+
     fc8:	55 91       	lpm	r21, Z+
     fca:	a6 f3       	brts	.-24     	; 0xfb4 <__fp_powser+0x16>
     fcc:	ef 01       	movw	r28, r30
     fce:	0e 94 27 06 	call	0xc4e	; 0xc4e <__addsf3x>
     fd2:	fe 01       	movw	r30, r28
     fd4:	97 01       	movw	r18, r14
     fd6:	a8 01       	movw	r20, r16
     fd8:	da 94       	dec	r13
     fda:	69 f7       	brne	.-38     	; 0xfb6 <__fp_powser+0x18>
     fdc:	df 90       	pop	r13
     fde:	ef 90       	pop	r14
     fe0:	ff 90       	pop	r15
     fe2:	0f 91       	pop	r16
     fe4:	1f 91       	pop	r17
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <__fp_pscA>:
     fec:	00 24       	eor	r0, r0
     fee:	0a 94       	dec	r0
     ff0:	16 16       	cp	r1, r22
     ff2:	17 06       	cpc	r1, r23
     ff4:	18 06       	cpc	r1, r24
     ff6:	09 06       	cpc	r0, r25
     ff8:	08 95       	ret

00000ffa <__fp_pscB>:
     ffa:	00 24       	eor	r0, r0
     ffc:	0a 94       	dec	r0
     ffe:	12 16       	cp	r1, r18
    1000:	13 06       	cpc	r1, r19
    1002:	14 06       	cpc	r1, r20
    1004:	05 06       	cpc	r0, r21
    1006:	08 95       	ret
    1008:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__fp_nan>

0000100c <__fp_rempio2>:
    100c:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__fp_splitA>
    1010:	d8 f3       	brcs	.-10     	; 0x1008 <__fp_pscB+0xe>
    1012:	e8 94       	clt
    1014:	e0 e0       	ldi	r30, 0x00	; 0
    1016:	bb 27       	eor	r27, r27
    1018:	9f 57       	subi	r25, 0x7F	; 127
    101a:	f0 f0       	brcs	.+60     	; 0x1058 <__fp_rempio2+0x4c>
    101c:	2a ed       	ldi	r18, 0xDA	; 218
    101e:	3f e0       	ldi	r19, 0x0F	; 15
    1020:	49 ec       	ldi	r20, 0xC9	; 201
    1022:	06 c0       	rjmp	.+12     	; 0x1030 <__fp_rempio2+0x24>
    1024:	ee 0f       	add	r30, r30
    1026:	bb 0f       	add	r27, r27
    1028:	66 1f       	adc	r22, r22
    102a:	77 1f       	adc	r23, r23
    102c:	88 1f       	adc	r24, r24
    102e:	28 f0       	brcs	.+10     	; 0x103a <__fp_rempio2+0x2e>
    1030:	b2 3a       	cpi	r27, 0xA2	; 162
    1032:	62 07       	cpc	r22, r18
    1034:	73 07       	cpc	r23, r19
    1036:	84 07       	cpc	r24, r20
    1038:	28 f0       	brcs	.+10     	; 0x1044 <__fp_rempio2+0x38>
    103a:	b2 5a       	subi	r27, 0xA2	; 162
    103c:	62 0b       	sbc	r22, r18
    103e:	73 0b       	sbc	r23, r19
    1040:	84 0b       	sbc	r24, r20
    1042:	e3 95       	inc	r30
    1044:	9a 95       	dec	r25
    1046:	72 f7       	brpl	.-36     	; 0x1024 <__fp_rempio2+0x18>
    1048:	80 38       	cpi	r24, 0x80	; 128
    104a:	30 f4       	brcc	.+12     	; 0x1058 <__fp_rempio2+0x4c>
    104c:	9a 95       	dec	r25
    104e:	bb 0f       	add	r27, r27
    1050:	66 1f       	adc	r22, r22
    1052:	77 1f       	adc	r23, r23
    1054:	88 1f       	adc	r24, r24
    1056:	d2 f7       	brpl	.-12     	; 0x104c <__fp_rempio2+0x40>
    1058:	90 48       	sbci	r25, 0x80	; 128
    105a:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <__fp_mpack_finite>

0000105e <__fp_round>:
    105e:	09 2e       	mov	r0, r25
    1060:	03 94       	inc	r0
    1062:	00 0c       	add	r0, r0
    1064:	11 f4       	brne	.+4      	; 0x106a <__fp_round+0xc>
    1066:	88 23       	and	r24, r24
    1068:	52 f0       	brmi	.+20     	; 0x107e <__fp_round+0x20>
    106a:	bb 0f       	add	r27, r27
    106c:	40 f4       	brcc	.+16     	; 0x107e <__fp_round+0x20>
    106e:	bf 2b       	or	r27, r31
    1070:	11 f4       	brne	.+4      	; 0x1076 <__fp_round+0x18>
    1072:	60 ff       	sbrs	r22, 0
    1074:	04 c0       	rjmp	.+8      	; 0x107e <__fp_round+0x20>
    1076:	6f 5f       	subi	r22, 0xFF	; 255
    1078:	7f 4f       	sbci	r23, 0xFF	; 255
    107a:	8f 4f       	sbci	r24, 0xFF	; 255
    107c:	9f 4f       	sbci	r25, 0xFF	; 255
    107e:	08 95       	ret

00001080 <__fp_sinus>:
    1080:	ef 93       	push	r30
    1082:	e0 ff       	sbrs	r30, 0
    1084:	07 c0       	rjmp	.+14     	; 0x1094 <__fp_sinus+0x14>
    1086:	a2 ea       	ldi	r26, 0xA2	; 162
    1088:	2a ed       	ldi	r18, 0xDA	; 218
    108a:	3f e0       	ldi	r19, 0x0F	; 15
    108c:	49 ec       	ldi	r20, 0xC9	; 201
    108e:	5f eb       	ldi	r21, 0xBF	; 191
    1090:	0e 94 27 06 	call	0xc4e	; 0xc4e <__addsf3x>
    1094:	0e 94 2f 08 	call	0x105e	; 0x105e <__fp_round>
    1098:	0f 90       	pop	r0
    109a:	03 94       	inc	r0
    109c:	01 fc       	sbrc	r0, 1
    109e:	90 58       	subi	r25, 0x80	; 128
    10a0:	ec ed       	ldi	r30, 0xDC	; 220
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__fp_powsodd>

000010a8 <__fp_split3>:
    10a8:	57 fd       	sbrc	r21, 7
    10aa:	90 58       	subi	r25, 0x80	; 128
    10ac:	44 0f       	add	r20, r20
    10ae:	55 1f       	adc	r21, r21
    10b0:	59 f0       	breq	.+22     	; 0x10c8 <__fp_splitA+0x10>
    10b2:	5f 3f       	cpi	r21, 0xFF	; 255
    10b4:	71 f0       	breq	.+28     	; 0x10d2 <__fp_splitA+0x1a>
    10b6:	47 95       	ror	r20

000010b8 <__fp_splitA>:
    10b8:	88 0f       	add	r24, r24
    10ba:	97 fb       	bst	r25, 7
    10bc:	99 1f       	adc	r25, r25
    10be:	61 f0       	breq	.+24     	; 0x10d8 <__fp_splitA+0x20>
    10c0:	9f 3f       	cpi	r25, 0xFF	; 255
    10c2:	79 f0       	breq	.+30     	; 0x10e2 <__fp_splitA+0x2a>
    10c4:	87 95       	ror	r24
    10c6:	08 95       	ret
    10c8:	12 16       	cp	r1, r18
    10ca:	13 06       	cpc	r1, r19
    10cc:	14 06       	cpc	r1, r20
    10ce:	55 1f       	adc	r21, r21
    10d0:	f2 cf       	rjmp	.-28     	; 0x10b6 <__fp_split3+0xe>
    10d2:	46 95       	lsr	r20
    10d4:	f1 df       	rcall	.-30     	; 0x10b8 <__fp_splitA>
    10d6:	08 c0       	rjmp	.+16     	; 0x10e8 <__fp_splitA+0x30>
    10d8:	16 16       	cp	r1, r22
    10da:	17 06       	cpc	r1, r23
    10dc:	18 06       	cpc	r1, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	f1 cf       	rjmp	.-30     	; 0x10c4 <__fp_splitA+0xc>
    10e2:	86 95       	lsr	r24
    10e4:	71 05       	cpc	r23, r1
    10e6:	61 05       	cpc	r22, r1
    10e8:	08 94       	sec
    10ea:	08 95       	ret

000010ec <__fp_trunc>:
    10ec:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__fp_splitA>
    10f0:	a0 f0       	brcs	.+40     	; 0x111a <__fp_trunc+0x2e>
    10f2:	be e7       	ldi	r27, 0x7E	; 126
    10f4:	b9 17       	cp	r27, r25
    10f6:	88 f4       	brcc	.+34     	; 0x111a <__fp_trunc+0x2e>
    10f8:	bb 27       	eor	r27, r27
    10fa:	9f 38       	cpi	r25, 0x8F	; 143
    10fc:	60 f4       	brcc	.+24     	; 0x1116 <__fp_trunc+0x2a>
    10fe:	16 16       	cp	r1, r22
    1100:	b1 1d       	adc	r27, r1
    1102:	67 2f       	mov	r22, r23
    1104:	78 2f       	mov	r23, r24
    1106:	88 27       	eor	r24, r24
    1108:	98 5f       	subi	r25, 0xF8	; 248
    110a:	f7 cf       	rjmp	.-18     	; 0x10fa <__fp_trunc+0xe>
    110c:	86 95       	lsr	r24
    110e:	77 95       	ror	r23
    1110:	67 95       	ror	r22
    1112:	b1 1d       	adc	r27, r1
    1114:	93 95       	inc	r25
    1116:	96 39       	cpi	r25, 0x96	; 150
    1118:	c8 f3       	brcs	.-14     	; 0x110c <__fp_trunc+0x20>
    111a:	08 95       	ret

0000111c <__fp_zero>:
    111c:	e8 94       	clt

0000111e <__fp_szero>:
    111e:	bb 27       	eor	r27, r27
    1120:	66 27       	eor	r22, r22
    1122:	77 27       	eor	r23, r23
    1124:	cb 01       	movw	r24, r22
    1126:	97 f9       	bld	r25, 7
    1128:	08 95       	ret

0000112a <__mulsf3>:
    112a:	0e 94 a8 08 	call	0x1150	; 0x1150 <__mulsf3x>
    112e:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__fp_round>
    1132:	0e 94 f6 07 	call	0xfec	; 0xfec <__fp_pscA>
    1136:	38 f0       	brcs	.+14     	; 0x1146 <__mulsf3+0x1c>
    1138:	0e 94 fd 07 	call	0xffa	; 0xffa <__fp_pscB>
    113c:	20 f0       	brcs	.+8      	; 0x1146 <__mulsf3+0x1c>
    113e:	95 23       	and	r25, r21
    1140:	11 f0       	breq	.+4      	; 0x1146 <__mulsf3+0x1c>
    1142:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__fp_inf>
    1146:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__fp_nan>
    114a:	11 24       	eor	r1, r1
    114c:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__fp_szero>

00001150 <__mulsf3x>:
    1150:	0e 94 54 08 	call	0x10a8	; 0x10a8 <__fp_split3>
    1154:	70 f3       	brcs	.-36     	; 0x1132 <__mulsf3+0x8>

00001156 <__mulsf3_pse>:
    1156:	95 9f       	mul	r25, r21
    1158:	c1 f3       	breq	.-16     	; 0x114a <__mulsf3+0x20>
    115a:	95 0f       	add	r25, r21
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	55 1f       	adc	r21, r21
    1160:	62 9f       	mul	r22, r18
    1162:	f0 01       	movw	r30, r0
    1164:	72 9f       	mul	r23, r18
    1166:	bb 27       	eor	r27, r27
    1168:	f0 0d       	add	r31, r0
    116a:	b1 1d       	adc	r27, r1
    116c:	63 9f       	mul	r22, r19
    116e:	aa 27       	eor	r26, r26
    1170:	f0 0d       	add	r31, r0
    1172:	b1 1d       	adc	r27, r1
    1174:	aa 1f       	adc	r26, r26
    1176:	64 9f       	mul	r22, r20
    1178:	66 27       	eor	r22, r22
    117a:	b0 0d       	add	r27, r0
    117c:	a1 1d       	adc	r26, r1
    117e:	66 1f       	adc	r22, r22
    1180:	82 9f       	mul	r24, r18
    1182:	22 27       	eor	r18, r18
    1184:	b0 0d       	add	r27, r0
    1186:	a1 1d       	adc	r26, r1
    1188:	62 1f       	adc	r22, r18
    118a:	73 9f       	mul	r23, r19
    118c:	b0 0d       	add	r27, r0
    118e:	a1 1d       	adc	r26, r1
    1190:	62 1f       	adc	r22, r18
    1192:	83 9f       	mul	r24, r19
    1194:	a0 0d       	add	r26, r0
    1196:	61 1d       	adc	r22, r1
    1198:	22 1f       	adc	r18, r18
    119a:	74 9f       	mul	r23, r20
    119c:	33 27       	eor	r19, r19
    119e:	a0 0d       	add	r26, r0
    11a0:	61 1d       	adc	r22, r1
    11a2:	23 1f       	adc	r18, r19
    11a4:	84 9f       	mul	r24, r20
    11a6:	60 0d       	add	r22, r0
    11a8:	21 1d       	adc	r18, r1
    11aa:	82 2f       	mov	r24, r18
    11ac:	76 2f       	mov	r23, r22
    11ae:	6a 2f       	mov	r22, r26
    11b0:	11 24       	eor	r1, r1
    11b2:	9f 57       	subi	r25, 0x7F	; 127
    11b4:	50 40       	sbci	r21, 0x00	; 0
    11b6:	9a f0       	brmi	.+38     	; 0x11de <__mulsf3_pse+0x88>
    11b8:	f1 f0       	breq	.+60     	; 0x11f6 <__mulsf3_pse+0xa0>
    11ba:	88 23       	and	r24, r24
    11bc:	4a f0       	brmi	.+18     	; 0x11d0 <__mulsf3_pse+0x7a>
    11be:	ee 0f       	add	r30, r30
    11c0:	ff 1f       	adc	r31, r31
    11c2:	bb 1f       	adc	r27, r27
    11c4:	66 1f       	adc	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	88 1f       	adc	r24, r24
    11ca:	91 50       	subi	r25, 0x01	; 1
    11cc:	50 40       	sbci	r21, 0x00	; 0
    11ce:	a9 f7       	brne	.-22     	; 0x11ba <__mulsf3_pse+0x64>
    11d0:	9e 3f       	cpi	r25, 0xFE	; 254
    11d2:	51 05       	cpc	r21, r1
    11d4:	80 f0       	brcs	.+32     	; 0x11f6 <__mulsf3_pse+0xa0>
    11d6:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__fp_inf>
    11da:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__fp_szero>
    11de:	5f 3f       	cpi	r21, 0xFF	; 255
    11e0:	e4 f3       	brlt	.-8      	; 0x11da <__mulsf3_pse+0x84>
    11e2:	98 3e       	cpi	r25, 0xE8	; 232
    11e4:	d4 f3       	brlt	.-12     	; 0x11da <__mulsf3_pse+0x84>
    11e6:	86 95       	lsr	r24
    11e8:	77 95       	ror	r23
    11ea:	67 95       	ror	r22
    11ec:	b7 95       	ror	r27
    11ee:	f7 95       	ror	r31
    11f0:	e7 95       	ror	r30
    11f2:	9f 5f       	subi	r25, 0xFF	; 255
    11f4:	c1 f7       	brne	.-16     	; 0x11e6 <__mulsf3_pse+0x90>
    11f6:	fe 2b       	or	r31, r30
    11f8:	88 0f       	add	r24, r24
    11fa:	91 1d       	adc	r25, r1
    11fc:	96 95       	lsr	r25
    11fe:	87 95       	ror	r24
    1200:	97 f9       	bld	r25, 7
    1202:	08 95       	ret
    1204:	19 f4       	brne	.+6      	; 0x120c <__mulsf3_pse+0xb6>
    1206:	16 f4       	brtc	.+4      	; 0x120c <__mulsf3_pse+0xb6>
    1208:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__fp_nan>
    120c:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__fp_mpack>

00001210 <sqrt>:
    1210:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__fp_splitA>
    1214:	b8 f3       	brcs	.-18     	; 0x1204 <__mulsf3_pse+0xae>
    1216:	99 23       	and	r25, r25
    1218:	c9 f3       	breq	.-14     	; 0x120c <__mulsf3_pse+0xb6>
    121a:	b6 f3       	brts	.-20     	; 0x1208 <__mulsf3_pse+0xb2>
    121c:	9f 57       	subi	r25, 0x7F	; 127
    121e:	55 0b       	sbc	r21, r21
    1220:	87 ff       	sbrs	r24, 7
    1222:	0e 94 48 09 	call	0x1290	; 0x1290 <__fp_norm2>
    1226:	00 24       	eor	r0, r0
    1228:	a0 e6       	ldi	r26, 0x60	; 96
    122a:	40 ea       	ldi	r20, 0xA0	; 160
    122c:	90 01       	movw	r18, r0
    122e:	80 58       	subi	r24, 0x80	; 128
    1230:	56 95       	lsr	r21
    1232:	97 95       	ror	r25
    1234:	28 f4       	brcc	.+10     	; 0x1240 <sqrt+0x30>
    1236:	80 5c       	subi	r24, 0xC0	; 192
    1238:	66 0f       	add	r22, r22
    123a:	77 1f       	adc	r23, r23
    123c:	88 1f       	adc	r24, r24
    123e:	20 f0       	brcs	.+8      	; 0x1248 <sqrt+0x38>
    1240:	26 17       	cp	r18, r22
    1242:	37 07       	cpc	r19, r23
    1244:	48 07       	cpc	r20, r24
    1246:	30 f4       	brcc	.+12     	; 0x1254 <sqrt+0x44>
    1248:	62 1b       	sub	r22, r18
    124a:	73 0b       	sbc	r23, r19
    124c:	84 0b       	sbc	r24, r20
    124e:	20 29       	or	r18, r0
    1250:	31 29       	or	r19, r1
    1252:	4a 2b       	or	r20, r26
    1254:	a6 95       	lsr	r26
    1256:	17 94       	ror	r1
    1258:	07 94       	ror	r0
    125a:	20 25       	eor	r18, r0
    125c:	31 25       	eor	r19, r1
    125e:	4a 27       	eor	r20, r26
    1260:	58 f7       	brcc	.-42     	; 0x1238 <sqrt+0x28>
    1262:	66 0f       	add	r22, r22
    1264:	77 1f       	adc	r23, r23
    1266:	88 1f       	adc	r24, r24
    1268:	20 f0       	brcs	.+8      	; 0x1272 <sqrt+0x62>
    126a:	26 17       	cp	r18, r22
    126c:	37 07       	cpc	r19, r23
    126e:	48 07       	cpc	r20, r24
    1270:	30 f4       	brcc	.+12     	; 0x127e <sqrt+0x6e>
    1272:	62 0b       	sbc	r22, r18
    1274:	73 0b       	sbc	r23, r19
    1276:	84 0b       	sbc	r24, r20
    1278:	20 0d       	add	r18, r0
    127a:	31 1d       	adc	r19, r1
    127c:	41 1d       	adc	r20, r1
    127e:	a0 95       	com	r26
    1280:	81 f7       	brne	.-32     	; 0x1262 <sqrt+0x52>
    1282:	b9 01       	movw	r22, r18
    1284:	84 2f       	mov	r24, r20
    1286:	91 58       	subi	r25, 0x81	; 129
    1288:	88 0f       	add	r24, r24
    128a:	96 95       	lsr	r25
    128c:	87 95       	ror	r24
    128e:	08 95       	ret

00001290 <__fp_norm2>:
    1290:	91 50       	subi	r25, 0x01	; 1
    1292:	50 40       	sbci	r21, 0x00	; 0
    1294:	66 0f       	add	r22, r22
    1296:	77 1f       	adc	r23, r23
    1298:	88 1f       	adc	r24, r24
    129a:	d2 f7       	brpl	.-12     	; 0x1290 <__fp_norm2>
    129c:	08 95       	ret

0000129e <__fp_powsodd>:
    129e:	9f 93       	push	r25
    12a0:	8f 93       	push	r24
    12a2:	7f 93       	push	r23
    12a4:	6f 93       	push	r22
    12a6:	ff 93       	push	r31
    12a8:	ef 93       	push	r30
    12aa:	9b 01       	movw	r18, r22
    12ac:	ac 01       	movw	r20, r24
    12ae:	0e 94 95 08 	call	0x112a	; 0x112a <__mulsf3>
    12b2:	ef 91       	pop	r30
    12b4:	ff 91       	pop	r31
    12b6:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__fp_powser>
    12ba:	2f 91       	pop	r18
    12bc:	3f 91       	pop	r19
    12be:	4f 91       	pop	r20
    12c0:	5f 91       	pop	r21
    12c2:	0c 94 95 08 	jmp	0x112a	; 0x112a <__mulsf3>

000012c6 <__divmodhi4>:
    12c6:	97 fb       	bst	r25, 7
    12c8:	07 2e       	mov	r0, r23
    12ca:	16 f4       	brtc	.+4      	; 0x12d0 <__divmodhi4+0xa>
    12cc:	00 94       	com	r0
    12ce:	07 d0       	rcall	.+14     	; 0x12de <__divmodhi4_neg1>
    12d0:	77 fd       	sbrc	r23, 7
    12d2:	09 d0       	rcall	.+18     	; 0x12e6 <__divmodhi4_neg2>
    12d4:	0e 94 77 09 	call	0x12ee	; 0x12ee <__udivmodhi4>
    12d8:	07 fc       	sbrc	r0, 7
    12da:	05 d0       	rcall	.+10     	; 0x12e6 <__divmodhi4_neg2>
    12dc:	3e f4       	brtc	.+14     	; 0x12ec <__divmodhi4_exit>

000012de <__divmodhi4_neg1>:
    12de:	90 95       	com	r25
    12e0:	81 95       	neg	r24
    12e2:	9f 4f       	sbci	r25, 0xFF	; 255
    12e4:	08 95       	ret

000012e6 <__divmodhi4_neg2>:
    12e6:	70 95       	com	r23
    12e8:	61 95       	neg	r22
    12ea:	7f 4f       	sbci	r23, 0xFF	; 255

000012ec <__divmodhi4_exit>:
    12ec:	08 95       	ret

000012ee <__udivmodhi4>:
    12ee:	aa 1b       	sub	r26, r26
    12f0:	bb 1b       	sub	r27, r27
    12f2:	51 e1       	ldi	r21, 0x11	; 17
    12f4:	07 c0       	rjmp	.+14     	; 0x1304 <__udivmodhi4_ep>

000012f6 <__udivmodhi4_loop>:
    12f6:	aa 1f       	adc	r26, r26
    12f8:	bb 1f       	adc	r27, r27
    12fa:	a6 17       	cp	r26, r22
    12fc:	b7 07       	cpc	r27, r23
    12fe:	10 f0       	brcs	.+4      	; 0x1304 <__udivmodhi4_ep>
    1300:	a6 1b       	sub	r26, r22
    1302:	b7 0b       	sbc	r27, r23

00001304 <__udivmodhi4_ep>:
    1304:	88 1f       	adc	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	5a 95       	dec	r21
    130a:	a9 f7       	brne	.-22     	; 0x12f6 <__udivmodhi4_loop>
    130c:	80 95       	com	r24
    130e:	90 95       	com	r25
    1310:	bc 01       	movw	r22, r24
    1312:	cd 01       	movw	r24, r26
    1314:	08 95       	ret

00001316 <_exit>:
    1316:	f8 94       	cli

00001318 <__stop_program>:
    1318:	ff cf       	rjmp	.-2      	; 0x1318 <__stop_program>
