
Main Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  000011f0  00001284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000036  008001b6  008001b6  0000133a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000133a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000136c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000196d  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b70  00000000  00000000  00002dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a10  00000000  00000000  00003949  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  0000435c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000069e  00000000  00000000  000045fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a76  00000000  00000000  00004c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00005710  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__ctors_end>
       4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      10:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__vector_4>
      14:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      18:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      1c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      20:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      24:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      28:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      2c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      30:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      34:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      38:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      3c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      40:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      44:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      48:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      4c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      50:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      54:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__vector_21>
      58:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      5c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      60:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      64:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      68:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      6c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      70:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      74:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      78:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      7c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      80:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      84:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      88:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      8c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__vector_35>
      90:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      94:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      98:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      9c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      ac:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      b0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      b4:	07 2c       	mov	r0, r7
      b6:	7a a5       	ldd	r23, Y+42	; 0x2a
      b8:	ba 6c       	ori	r27, 0xCA	; 202
      ba:	c5 90       	lpm	r12, Z+
      bc:	da 3b       	cpi	r29, 0xBA	; 186
      be:	93 65       	ori	r25, 0x53	; 83
      c0:	fc 8b       	std	Y+20, r31	; 0x14
      c2:	bc 53       	subi	r27, 0x3C	; 60
      c4:	f8 10       	cpse	r15, r8
      c6:	fd 3c       	cpi	r31, 0xCD	; 205
      c8:	56 92       	lac	Z, r5
      ca:	83 4d       	sbci	r24, 0xD3	; 211
      cc:	bd 87       	std	Y+13, r27	; 0x0d
      ce:	9d 3a       	cpi	r25, 0xAD	; 173
      d0:	b6 3d       	cpi	r27, 0xD6	; 214
      d2:	cb c9       	rjmp	.-3178   	; 0xfffff46a <__eeprom_end+0xff7ef46a>
      d4:	bf 5b       	subi	r27, 0xBF	; 191
      d6:	be 73       	andi	r27, 0x3E	; 62
      d8:	da 0f       	add	r29, r26
      da:	c9 3f       	cpi	r28, 0xF9	; 249
      dc:	05 a8       	ldd	r0, Z+53	; 0x35
      de:	4c cd       	rjmp	.-1384   	; 0xfffffb78 <__eeprom_end+0xff7efb78>
      e0:	b2 d4       	rcall	.+2404   	; 0xa46 <__stack+0x147>
      e2:	4e b9       	out	0x0e, r20	; 14
      e4:	38 36       	cpi	r19, 0x68	; 104
      e6:	a9 02       	muls	r26, r25
      e8:	0c 50       	subi	r16, 0x0C	; 12
      ea:	b9 91       	ld	r27, Y+
      ec:	86 88       	ldd	r8, Z+22	; 0x16
      ee:	08 3c       	cpi	r16, 0xC8	; 200
      f0:	a6 aa       	std	Z+54, r10	; 0x36
      f2:	aa 2a       	or	r10, r26
      f4:	be 00       	.word	0x00be	; ????
      f6:	00 00       	nop
      f8:	80 3f       	cpi	r24, 0xF0	; 240

000000fa <__ctors_end>:
      fa:	11 24       	eor	r1, r1
      fc:	1f be       	out	0x3f, r1	; 63
      fe:	cf ef       	ldi	r28, 0xFF	; 255
     100:	d8 e0       	ldi	r29, 0x08	; 8
     102:	de bf       	out	0x3e, r29	; 62
     104:	cd bf       	out	0x3d, r28	; 61

00000106 <__do_copy_data>:
     106:	11 e0       	ldi	r17, 0x01	; 1
     108:	a0 e0       	ldi	r26, 0x00	; 0
     10a:	b1 e0       	ldi	r27, 0x01	; 1
     10c:	e0 ef       	ldi	r30, 0xF0	; 240
     10e:	f1 e1       	ldi	r31, 0x11	; 17
     110:	02 c0       	rjmp	.+4      	; 0x116 <__do_copy_data+0x10>
     112:	05 90       	lpm	r0, Z+
     114:	0d 92       	st	X+, r0
     116:	a6 3b       	cpi	r26, 0xB6	; 182
     118:	b1 07       	cpc	r27, r17
     11a:	d9 f7       	brne	.-10     	; 0x112 <__do_copy_data+0xc>

0000011c <__do_clear_bss>:
     11c:	21 e0       	ldi	r18, 0x01	; 1
     11e:	a6 eb       	ldi	r26, 0xB6	; 182
     120:	b1 e0       	ldi	r27, 0x01	; 1
     122:	01 c0       	rjmp	.+2      	; 0x126 <.do_clear_bss_start>

00000124 <.do_clear_bss_loop>:
     124:	1d 92       	st	X+, r1

00000126 <.do_clear_bss_start>:
     126:	ac 3e       	cpi	r26, 0xEC	; 236
     128:	b2 07       	cpc	r27, r18
     12a:	e1 f7       	brne	.-8      	; 0x124 <.do_clear_bss_loop>
     12c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <main>
     130:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <_exit>

00000134 <__bad_interrupt>:
     134:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000138 <lcdCommand>:

	while(*StringPtr != 0x00){
		USART_send(*StringPtr);
	StringPtr++;}

}
     138:	8b b9       	out	0x0b, r24	; 11
     13a:	70 98       	cbi	0x0e, 0	; 14
     13c:	71 98       	cbi	0x0e, 1	; 14
     13e:	72 9a       	sbi	0x0e, 2	; 14
     140:	85 e0       	ldi	r24, 0x05	; 5
     142:	8a 95       	dec	r24
     144:	f1 f7       	brne	.-4      	; 0x142 <lcdCommand+0xa>
     146:	00 00       	nop
     148:	72 98       	cbi	0x0e, 2	; 14
     14a:	8f e8       	ldi	r24, 0x8F	; 143
     14c:	91 e0       	ldi	r25, 0x01	; 1
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <lcdCommand+0x16>
     152:	00 c0       	rjmp	.+0      	; 0x154 <lcdCommand+0x1c>
     154:	00 00       	nop
     156:	08 95       	ret

00000158 <lcdData>:
     158:	8b b9       	out	0x0b, r24	; 11
     15a:	70 9a       	sbi	0x0e, 0	; 14
     15c:	71 98       	cbi	0x0e, 1	; 14
     15e:	72 9a       	sbi	0x0e, 2	; 14
     160:	85 e0       	ldi	r24, 0x05	; 5
     162:	8a 95       	dec	r24
     164:	f1 f7       	brne	.-4      	; 0x162 <lcdData+0xa>
     166:	00 00       	nop
     168:	72 98       	cbi	0x0e, 2	; 14
     16a:	8f e8       	ldi	r24, 0x8F	; 143
     16c:	91 e0       	ldi	r25, 0x01	; 1
     16e:	01 97       	sbiw	r24, 0x01	; 1
     170:	f1 f7       	brne	.-4      	; 0x16e <lcdData+0x16>
     172:	00 c0       	rjmp	.+0      	; 0x174 <lcdData+0x1c>
     174:	00 00       	nop
     176:	08 95       	ret

00000178 <lcd_init>:
     178:	8f ef       	ldi	r24, 0xFF	; 255
     17a:	8a b9       	out	0x0a, r24	; 10
     17c:	8d b9       	out	0x0d, r24	; 13
     17e:	72 98       	cbi	0x0e, 2	; 14
     180:	8f e3       	ldi	r24, 0x3F	; 63
     182:	9f e1       	ldi	r25, 0x1F	; 31
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <lcd_init+0xc>
     188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_init+0x12>
     18a:	00 00       	nop
     18c:	88 e3       	ldi	r24, 0x38	; 56
     18e:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     192:	8c e0       	ldi	r24, 0x0C	; 12
     194:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     19e:	8f e3       	ldi	r24, 0x3F	; 63
     1a0:	9f e1       	ldi	r25, 0x1F	; 31
     1a2:	01 97       	sbiw	r24, 0x01	; 1
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x2a>
     1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x30>
     1a8:	00 00       	nop
     1aa:	86 e0       	ldi	r24, 0x06	; 6
     1ac:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     1b0:	08 95       	ret

000001b2 <lcd_gotoxy>:
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <lcd_gotoxy+0x6>
     1b8:	00 d0       	rcall	.+0      	; 0x1ba <lcd_gotoxy+0x8>
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
     1be:	90 e8       	ldi	r25, 0x80	; 128
     1c0:	99 83       	std	Y+1, r25	; 0x01
     1c2:	90 ec       	ldi	r25, 0xC0	; 192
     1c4:	9a 83       	std	Y+2, r25	; 0x02
     1c6:	94 e9       	ldi	r25, 0x94	; 148
     1c8:	9b 83       	std	Y+3, r25	; 0x03
     1ca:	94 ed       	ldi	r25, 0xD4	; 212
     1cc:	9c 83       	std	Y+4, r25	; 0x04
     1ce:	fe 01       	movw	r30, r28
     1d0:	e6 0f       	add	r30, r22
     1d2:	f1 1d       	adc	r31, r1
     1d4:	81 50       	subi	r24, 0x01	; 1
     1d6:	90 81       	ld	r25, Z
     1d8:	89 0f       	add	r24, r25
     1da:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     1de:	8f e8       	ldi	r24, 0x8F	; 143
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	01 97       	sbiw	r24, 0x01	; 1
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_gotoxy+0x30>
     1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <lcd_gotoxy+0x36>
     1e8:	00 00       	nop
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <lcd_print>:
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	cf 93       	push	r28
     1fe:	fc 01       	movw	r30, r24
     200:	80 81       	ld	r24, Z
     202:	88 23       	and	r24, r24
     204:	59 f0       	breq	.+22     	; 0x21c <lcd_print+0x24>
     206:	8f 01       	movw	r16, r30
     208:	c0 e0       	ldi	r28, 0x00	; 0
     20a:	0e 94 ac 00 	call	0x158	; 0x158 <lcdData>
     20e:	cf 5f       	subi	r28, 0xFF	; 255
     210:	f8 01       	movw	r30, r16
     212:	ec 0f       	add	r30, r28
     214:	f1 1d       	adc	r31, r1
     216:	80 81       	ld	r24, Z
     218:	81 11       	cpse	r24, r1
     21a:	f7 cf       	rjmp	.-18     	; 0x20a <lcd_print+0x12>
     21c:	cf 91       	pop	r28
     21e:	1f 91       	pop	r17
     220:	0f 91       	pop	r16
     222:	08 95       	ret

00000224 <ftoa>:
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	cd b7       	in	r28, 0x3d	; 61
     22a:	de b7       	in	r29, 0x3e	; 62
     22c:	2b 97       	sbiw	r28, 0x0b	; 11
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	f8 94       	cli
     232:	de bf       	out	0x3e, r29	; 62
     234:	0f be       	out	0x3f, r0	; 63
     236:	cd bf       	out	0x3d, r28	; 61
     238:	9b 01       	movw	r18, r22
     23a:	4b e0       	ldi	r20, 0x0B	; 11
     23c:	e2 e0       	ldi	r30, 0x02	; 2
     23e:	f1 e0       	ldi	r31, 0x01	; 1
     240:	de 01       	movw	r26, r28
     242:	11 96       	adiw	r26, 0x01	; 1
     244:	01 90       	ld	r0, Z+
     246:	0d 92       	st	X+, r0
     248:	4a 95       	dec	r20
     24a:	e1 f7       	brne	.-8      	; 0x244 <ftoa+0x20>
     24c:	6a e0       	ldi	r22, 0x0A	; 10
     24e:	70 e0       	ldi	r23, 0x00	; 0
     250:	0e 94 ce 08 	call	0x119c	; 0x119c <__divmodhi4>
     254:	e1 e0       	ldi	r30, 0x01	; 1
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	ec 0f       	add	r30, r28
     25a:	fd 1f       	adc	r31, r29
     25c:	e6 0f       	add	r30, r22
     25e:	f7 1f       	adc	r31, r23
     260:	40 81       	ld	r20, Z
     262:	f9 01       	movw	r30, r18
     264:	40 83       	st	Z, r20
     266:	e1 e0       	ldi	r30, 0x01	; 1
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	ec 0f       	add	r30, r28
     26c:	fd 1f       	adc	r31, r29
     26e:	e8 0f       	add	r30, r24
     270:	f9 1f       	adc	r31, r25
     272:	80 81       	ld	r24, Z
     274:	f9 01       	movw	r30, r18
     276:	81 83       	std	Z+1, r24	; 0x01
     278:	12 82       	std	Z+2, r1	; 0x02
     27a:	2b 96       	adiw	r28, 0x0b	; 11
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	f8 94       	cli
     280:	de bf       	out	0x3e, r29	; 62
     282:	0f be       	out	0x3f, r0	; 63
     284:	cd bf       	out	0x3d, r28	; 61
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	08 95       	ret

0000028c <__vector_35>:



// Timer used to track seconds for startup routine of speed controller
ISR (TIMER3_OVF_vect)
{
     28c:	1f 92       	push	r1
     28e:	0f 92       	push	r0
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	0f 92       	push	r0
     294:	11 24       	eor	r1, r1
     296:	8f 93       	push	r24
     298:	9f 93       	push	r25
	TCNT3 = -15625; // reset the 1sec timer value 
     29a:	87 ef       	ldi	r24, 0xF7	; 247
     29c:	92 ec       	ldi	r25, 0xC2	; 194
     29e:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
     2a2:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
	overflowCount++;
     2a6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <__data_end>
     2aa:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <__data_end+0x1>
     2ae:	01 96       	adiw	r24, 0x01	; 1
     2b0:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <__data_end+0x1>
     2b4:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <__data_end>
	if (overflowCount == 5) // wait  seconds
     2b8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <__data_end>
     2bc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <__data_end+0x1>
     2c0:	05 97       	sbiw	r24, 0x05	; 5
     2c2:	91 f4       	brne	.+36     	; 0x2e8 <__vector_35+0x5c>
	{
		OCR1A=38000-1;	// adjust pulse width of waveform being generated from 2ms to 1ms
     2c4:	8f e6       	ldi	r24, 0x6F	; 111
     2c6:	94 e9       	ldi	r25, 0x94	; 148
     2c8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     2cc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
		TCNT3 = 0; // set counter to 0
     2d0:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
     2d4:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
		TIMSK3 = (0 << TOIE3); // disable timer
     2d8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
		setupFlag = 1;
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <setupFlag+0x1>
     2e4:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <setupFlag>
	}
}
     2e8:	9f 91       	pop	r25
     2ea:	8f 91       	pop	r24
     2ec:	0f 90       	pop	r0
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	0f 90       	pop	r0
     2f2:	1f 90       	pop	r1
     2f4:	18 95       	reti

000002f6 <__vector_21>:

ISR(ADC_vect)
{
     2f6:	1f 92       	push	r1
     2f8:	0f 92       	push	r0
     2fa:	0f b6       	in	r0, 0x3f	; 63
     2fc:	0f 92       	push	r0
     2fe:	11 24       	eor	r1, r1
     300:	8f 93       	push	r24
     302:	9f 93       	push	r25
     304:	ef 93       	push	r30
     306:	ff 93       	push	r31
	potVal = ADC;
     308:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     30c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     310:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <potVal+0x1>
     314:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <potVal>
	ADCSRA |= (1<<ADSC);
     318:	ea e7       	ldi	r30, 0x7A	; 122
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	80 81       	ld	r24, Z
     31e:	80 64       	ori	r24, 0x40	; 64
     320:	80 83       	st	Z, r24
}
     322:	ff 91       	pop	r31
     324:	ef 91       	pop	r30
     326:	9f 91       	pop	r25
     328:	8f 91       	pop	r24
     32a:	0f 90       	pop	r0
     32c:	0f be       	out	0x3f, r0	; 63
     32e:	0f 90       	pop	r0
     330:	1f 90       	pop	r1
     332:	18 95       	reti

00000334 <peripheralSetup>:

/************************************************* STARTUP ROUTINE **********************************************************************************/

void peripheralSetup()
{
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
	DDRC &= ~(1<<3);
     338:	3b 98       	cbi	0x07, 3	; 7
	PORTC |= (1 << 3);
     33a:	43 9a       	sbi	0x08, 3	; 8
		
	ADMUX = (0b01<<REFS0|(0<<ADLAR)|(0b0011<<MUX0));
     33c:	83 e4       	ldi	r24, 0x43	; 67
     33e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = (1<<ADEN)|(0<<ADSC)|(0<<ADATE)|(0<<ADIF)|(1<<ADIE)|(0b111<<ADPS0);
     342:	8f e8       	ldi	r24, 0x8F	; 143
     344:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		
	ADCSRB = 0b000<<ADTS0;
     348:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
	
	PORTE &= ~(1<<3); // Ensure 12V is OFF
     34c:	73 98       	cbi	0x0e, 3	; 14
	DDRE &= ~(1<<3);  // Ensure 12V is OFF
     34e:	6b 98       	cbi	0x0d, 3	; 13
	
	//********************************************** PIN CHANGE INTERRUPT SETUP **********************************************//
	DDRC &= ~(_BV(2) | _BV(1) | _BV(4)); // sets PORTC 1, 2, and 4 to input (input from rotary encoder)
     350:	87 b1       	in	r24, 0x07	; 7
     352:	89 7e       	andi	r24, 0xE9	; 233
     354:	87 b9       	out	0x07, r24	; 7
	// 4 = SW signal (button press)
	
	
	//********************************************** PWM SETUP **********************************************//
	// Set up PWM on PortB(1)
	DDRB |= (1<<1); // set PINB 1 to output
     356:	21 9a       	sbi	0x04, 1	; 4
	PORTB = ~(1<<1); // Ensure PINB 1 is not outputting voltage
     358:	8d ef       	ldi	r24, 0xFD	; 253
     35a:	85 b9       	out	0x05, r24	; 5
	TCCR1A= (0b11 << COM1A0) | ( 0b00 << COM1B0) | (0b10 << WGM10); // set up PWM with pre-scalar
     35c:	82 ec       	ldi	r24, 0xC2	; 194
     35e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B= (0b11 << WGM12) | (0b010<< CS10);
     362:	8a e1       	ldi	r24, 0x1A	; 26
     364:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	ICR1= 40000-1; // (20MS /8 PRESCALAR)
     368:	8f e3       	ldi	r24, 0x3F	; 63
     36a:	9c e9       	ldi	r25, 0x9C	; 156
     36c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
     370:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	OCR1A=36000-1; // 1000->4000 0.5ms to 2ms *** adjust ***
     374:	8f e9       	ldi	r24, 0x9F	; 159
     376:	9c e8       	ldi	r25, 0x8C	; 140
     378:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     37c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	
	// Set up 4 second timer for startup
	TCCR3A = 0; //(0b00 << COM3A0) | (0b00 << COM3B0)
     380:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
	TCCR3B = (0 << ICNC3) | (0 << ICES3) | (0b00 << WGM32) | (0b101 << CS30);
     384:	85 e0       	ldi	r24, 0x05	; 5
     386:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__DATA_REGION_ORIGIN__+0x31>
	TIMSK3 = (0 << TOIE3); // Ensure timer 3 is disabled
     38a:	c1 e7       	ldi	r28, 0x71	; 113
     38c:	d0 e0       	ldi	r29, 0x00	; 0
     38e:	18 82       	st	Y, r1
	TCNT3 = -15625; // One second timer value
     390:	87 ef       	ldi	r24, 0xF7	; 247
     392:	92 ec       	ldi	r25, 0xC2	; 194
     394:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
     398:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
	
	sei();
     39c:	78 94       	sei
	// Set up LCD and print starting message state
	lcd_init(); // initialize the LCD according to Dr. Viall's 263 code
     39e:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_init>
	lcd_gotoxy(1,1); // go to row 1 column 1 of LCD
     3a2:	61 e0       	ldi	r22, 0x01	; 1
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("Starting system"); // Print ->   [HEIGHT] ANGLE
     3aa:	8d e0       	ldi	r24, 0x0D	; 13
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(1,2); // go to row 2 column 2 of LCD
     3b2:	62 e0       	ldi	r22, 0x02	; 2
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("Please wait..."); // Print -> 00.0 00.0
     3ba:	8d e1       	ldi	r24, 0x1D	; 29
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	
	
	 // enable global interrupts
	
	// ***** SPEED CONTROLLER STARTUP ***** //
	TIMSK3 = (1 << TOIE3); // Enable PWM timer for startup
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	88 83       	st	Y, r24
	//_delay_ms(1);
	PORTE |= (1<<BASE); // TURN ON 12V SUPPLY
     3c6:	73 9a       	sbi	0x0e, 3	; 14
	DDRE |= (1<<BASE);   // TURN ON 12V SUPPLY
     3c8:	6b 9a       	sbi	0x0d, 3	; 13
	//_delay_ms(4000);
	//OCR1A=38000-1;	// adjust pulse width of waveform being generated from 2ms to 1ms
	//_delay_ms(3000);
	while (setupFlag != 1)
     3ca:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <setupFlag>
     3ce:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <setupFlag+0x1>
     3d2:	01 97       	sbiw	r24, 0x01	; 1
     3d4:	d1 f7       	brne	.-12     	; 0x3ca <peripheralSetup+0x96>
	{
		//wait
	}
}
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	08 95       	ret

000003dc <main>:

int main(void)
{
	//USART_init();
	// These variables are Char arrays as the LCD cannot output int/float values, it must be sent as a string
	angleConv[0]='0'; // v Set up height and angle to start at 00.0 value
     3dc:	e8 eb       	ldi	r30, 0xB8	; 184
     3de:	f1 e0       	ldi	r31, 0x01	; 1
     3e0:	80 e3       	ldi	r24, 0x30	; 48
     3e2:	80 83       	st	Z, r24
	angleConv[1]='0';
     3e4:	81 83       	std	Z+1, r24	; 0x01
	angleConv[2]='.';
     3e6:	9e e2       	ldi	r25, 0x2E	; 46
     3e8:	92 83       	std	Z+2, r25	; 0x02
	angleConv[3]='0';
     3ea:	83 83       	std	Z+3, r24	; 0x03
	heightConv[0]='0';
     3ec:	e8 ec       	ldi	r30, 0xC8	; 200
     3ee:	f1 e0       	ldi	r31, 0x01	; 1
     3f0:	80 83       	st	Z, r24
	heightConv[1]='0';
     3f2:	81 83       	std	Z+1, r24	; 0x01
	heightConv[2]='.';
     3f4:	92 83       	std	Z+2, r25	; 0x02
	heightConv[3]='0';// ^
     3f6:	83 83       	std	Z+3, r24	; 0x03
	
	peripheralSetup();
     3f8:	0e 94 9a 01 	call	0x334	; 0x334 <peripheralSetup>
	ADCSRA |= (1<<ADSC);
     3fc:	ea e7       	ldi	r30, 0x7A	; 122
     3fe:	f0 e0       	ldi	r31, 0x00	; 0
     400:	80 81       	ld	r24, Z
     402:	80 64       	ori	r24, 0x40	; 64
     404:	80 83       	st	Z, r24
	//SETUP COMPLETE
	lcd_gotoxy(1,1); // go to row 1 column 1 of LCD
     406:	61 e0       	ldi	r22, 0x01	; 1
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("System start    "); // Print ->   [HEIGHT] ANGLE
     40e:	8c e2       	ldi	r24, 0x2C	; 44
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(1,2); // go to row 2 column 2 of LCD
     416:	62 e0       	ldi	r22, 0x02	; 2
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("completed!      "); // Print -> 00.0 00.0
     41e:	8d e3       	ldi	r24, 0x3D	; 61
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     426:	2f ef       	ldi	r18, 0xFF	; 255
     428:	83 ed       	ldi	r24, 0xD3	; 211
     42a:	90 e3       	ldi	r25, 0x30	; 48
     42c:	21 50       	subi	r18, 0x01	; 1
     42e:	80 40       	sbci	r24, 0x00	; 0
     430:	90 40       	sbci	r25, 0x00	; 0
     432:	e1 f7       	brne	.-8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     434:	00 c0       	rjmp	.+0      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     436:	00 00       	nop
	_delay_ms(1000);
	lcd_gotoxy(1,1);
     438:	61 e0       	ldi	r22, 0x01	; 1
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("Enabling UI...  ");
     440:	8e e4       	ldi	r24, 0x4E	; 78
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(1,2);
     448:	62 e0       	ldi	r22, 0x02	; 2
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("Enjoy! :)       ");
     450:	8f e5       	ldi	r24, 0x5F	; 95
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
     458:	2f ef       	ldi	r18, 0xFF	; 255
     45a:	87 ea       	ldi	r24, 0xA7	; 167
     45c:	91 e6       	ldi	r25, 0x61	; 97
     45e:	21 50       	subi	r18, 0x01	; 1
     460:	80 40       	sbci	r24, 0x00	; 0
     462:	90 40       	sbci	r25, 0x00	; 0
     464:	e1 f7       	brne	.-8      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     466:	00 c0       	rjmp	.+0      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     468:	00 00       	nop
	_delay_ms(2000);
	
	
	// ***** Enable User Control ***** //		
	PCICR |= (1<<PCIE1); // Enable pin change interrupt on PORTC
     46a:	e8 e6       	ldi	r30, 0x68	; 104
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	80 81       	ld	r24, Z
     470:	82 60       	ori	r24, 0x02	; 2
     472:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT12) | (1<<PCINT9) | (1<<PCINT10); // Enable Pins 1,2, and 4 to trigger this interrupt
     474:	ec e6       	ldi	r30, 0x6C	; 108
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	80 81       	ld	r24, Z
     47a:	86 61       	ori	r24, 0x16	; 22
     47c:	80 83       	st	Z, r24
	
	lcd_gotoxy(1,1); // go to row 1 column 1 of LCD
     47e:	61 e0       	ldi	r22, 0x01	; 1
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(HEIGHT_SELECT); // Print ->   [HEIGHT] ANGLE
     486:	80 e7       	ldi	r24, 0x70	; 112
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(1,2); // go to row 2 column 2 of LCD
     48e:	62 e0       	ldi	r22, 0x02	; 2
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(DEFAULT_ANGLE); // Print -> 00.0 00.0
     496:	81 e8       	ldi	r24, 0x81	; 129
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>

	lcd_gotoxy(1,2);
     49e:	62 e0       	ldi	r22, 0x02	; 2
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
     4a6:	ff cf       	rjmp	.-2      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>

000004a8 <print_height_angle>:

/************************************************* NUMBER CHANING FUNCTIONS **********************************************************************************/

// Function used to print either the height or angle selection ** THIS FUNCTION IS ONLY FOR CHANGING THE SELECTION **
void print_height_angle(char *angleConv, char *heightConv, int heightSelect)
{
     4a8:	ef 92       	push	r14
     4aa:	ff 92       	push	r15
     4ac:	0f 93       	push	r16
     4ae:	1f 93       	push	r17
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	ec 01       	movw	r28, r24
     4b6:	8b 01       	movw	r16, r22
     4b8:	7a 01       	movw	r14, r20
	lcd_gotoxy(1,1);
     4ba:	61 e0       	ldi	r22, 0x01	; 1
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	if (heightSelect == 1)
     4c2:	ea 94       	dec	r14
     4c4:	ef 28       	or	r14, r15
     4c6:	29 f4       	brne	.+10     	; 0x4d2 <print_height_angle+0x2a>
		lcd_print(HEIGHT_SELECT);
     4c8:	80 e7       	ldi	r24, 0x70	; 112
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
     4d0:	04 c0       	rjmp	.+8      	; 0x4da <print_height_angle+0x32>
	else
		lcd_print(ANGLE_SELECT);
     4d2:	82 e9       	ldi	r24, 0x92	; 146
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	// un-select bottom row
	lcd_gotoxy(1,2);
     4da:	62 e0       	ldi	r22, 0x02	; 2
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(" ");
     4e2:	8e e6       	ldi	r24, 0x6E	; 110
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_print(heightConv);
     4ea:	c8 01       	movw	r24, r16
     4ec:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(6,2);
     4f0:	62 e0       	ldi	r22, 0x02	; 2
     4f2:	86 e0       	ldi	r24, 0x06	; 6
     4f4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(" ");
     4f8:	8e e6       	ldi	r24, 0x6E	; 110
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(10,2);
     500:	62 e0       	ldi	r22, 0x02	; 2
     502:	8a e0       	ldi	r24, 0x0A	; 10
     504:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(" ");
     508:	8e e6       	ldi	r24, 0x6E	; 110
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_print(angleConv);
     510:	ce 01       	movw	r24, r28
     512:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(15,2);
     516:	62 e0       	ldi	r22, 0x02	; 2
     518:	8f e0       	ldi	r24, 0x0F	; 15
     51a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(" ");
     51e:	8e e6       	ldi	r24, 0x6E	; 110
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
}
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	1f 91       	pop	r17
     52c:	0f 91       	pop	r16
     52e:	ff 90       	pop	r15
     530:	ef 90       	pop	r14
     532:	08 95       	ret

00000534 <print_height_change>:

// Function used to print a change in the height value
void print_height_change(char *conversion)
{
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	ec 01       	movw	r28, r24
	//ensure height becomes unselected
	lcd_gotoxy(1,1);
     53a:	61 e0       	ldi	r22, 0x01	; 1
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(NO_HS_SELECT);
     542:	83 ea       	ldi	r24, 0xA3	; 163
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(1,2);
     54a:	62 e0       	ldi	r22, 0x02	; 2
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("[");
     552:	84 eb       	ldi	r24, 0xB4	; 180
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(2,2);
     55a:	62 e0       	ldi	r22, 0x02	; 2
     55c:	82 e0       	ldi	r24, 0x02	; 2
     55e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(conversion);
     562:	ce 01       	movw	r24, r28
     564:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(6,2);
     568:	62 e0       	ldi	r22, 0x02	; 2
     56a:	86 e0       	ldi	r24, 0x06	; 6
     56c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("]");
     570:	81 ea       	ldi	r24, 0xA1	; 161
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
}
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	08 95       	ret

0000057e <print_angle_change>:

// Function used to print a change in the angle value
void print_angle_change(char *conversion)
{
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	ec 01       	movw	r28, r24
	lcd_gotoxy(1,1);
     584:	61 e0       	ldi	r22, 0x01	; 1
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(NO_HS_SELECT);
     58c:	83 ea       	ldi	r24, 0xA3	; 163
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(10,2);
     594:	62 e0       	ldi	r22, 0x02	; 2
     596:	8a e0       	ldi	r24, 0x0A	; 10
     598:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("[");
     59c:	84 eb       	ldi	r24, 0xB4	; 180
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(11,2);
     5a4:	62 e0       	ldi	r22, 0x02	; 2
     5a6:	8b e0       	ldi	r24, 0x0B	; 11
     5a8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(conversion);
     5ac:	ce 01       	movw	r24, r28
     5ae:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(15,2);
     5b2:	62 e0       	ldi	r22, 0x02	; 2
     5b4:	8f e0       	ldi	r24, 0x0F	; 15
     5b6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("]");
     5ba:	81 ea       	ldi	r24, 0xA1	; 161
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	
}
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	08 95       	ret

000005c8 <__vector_4>:
//	-Button press either:
//		- Confirms height / angle adjustment
//		- Selects angle / height and moves user to adjust height / angle

ISR(PCINT1_vect)
{
     5c8:	1f 92       	push	r1
     5ca:	0f 92       	push	r0
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	0f 92       	push	r0
     5d0:	11 24       	eor	r1, r1
     5d2:	cf 92       	push	r12
     5d4:	df 92       	push	r13
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	2f 93       	push	r18
     5dc:	3f 93       	push	r19
     5de:	4f 93       	push	r20
     5e0:	5f 93       	push	r21
     5e2:	6f 93       	push	r22
     5e4:	7f 93       	push	r23
     5e6:	8f 93       	push	r24
     5e8:	9f 93       	push	r25
     5ea:	af 93       	push	r26
     5ec:	bf 93       	push	r27
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	ef 93       	push	r30
     5f4:	ff 93       	push	r31
     5f6:	8f e1       	ldi	r24, 0x1F	; 31
     5f8:	9e e4       	ldi	r25, 0x4E	; 78
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <__vector_4+0x32>
     5fe:	00 c0       	rjmp	.+0      	; 0x600 <__vector_4+0x38>
     600:	00 00       	nop
	_delay_ms(5);
	
	if(PINC == RIGHT) //if right turn triggered interrupt
     602:	86 b1       	in	r24, 0x06	; 6
     604:	83 37       	cpi	r24, 0x73	; 115
     606:	09 f0       	breq	.+2      	; 0x60a <__vector_4+0x42>
     608:	6b c0       	rjmp	.+214    	; 0x6e0 <__vector_4+0x118>
	{
		switch(state)
     60a:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <state>
     60e:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <state+0x1>
     612:	82 30       	cpi	r24, 0x02	; 2
     614:	91 05       	cpc	r25, r1
     616:	a9 f0       	breq	.+42     	; 0x642 <__vector_4+0x7a>
     618:	83 30       	cpi	r24, 0x03	; 3
     61a:	91 05       	cpc	r25, r1
     61c:	d1 f1       	breq	.+116    	; 0x692 <__vector_4+0xca>
     61e:	89 2b       	or	r24, r25
     620:	09 f0       	breq	.+2      	; 0x624 <__vector_4+0x5c>
     622:	5e c0       	rjmp	.+188    	; 0x6e0 <__vector_4+0x118>
		{
			case HEIGHT: // change to angle state
				print_height_angle(angleConv,heightConv,0);
     624:	40 e0       	ldi	r20, 0x00	; 0
     626:	50 e0       	ldi	r21, 0x00	; 0
     628:	68 ec       	ldi	r22, 0xC8	; 200
     62a:	71 e0       	ldi	r23, 0x01	; 1
     62c:	88 eb       	ldi	r24, 0xB8	; 184
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	0e 94 54 02 	call	0x4a8	; 0x4a8 <print_height_angle>
				state = ANGLE;
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <state+0x1>
     63c:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <state>
				break;
     640:	4f c0       	rjmp	.+158    	; 0x6e0 <__vector_4+0x118>
			case ANGLE:
			// do nothing
			break;
			case CHEIGHT: // increment height value (as long as < MAX (?))
			if ((height+valueChange) <= MAX_HEIGHT) // total guess right now
     642:	20 91 e8 01 	lds	r18, 0x01E8	; 0x8001e8 <height>
     646:	30 91 e9 01 	lds	r19, 0x01E9	; 0x8001e9 <height+0x1>
     64a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     64e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     652:	82 0f       	add	r24, r18
     654:	93 1f       	adc	r25, r19
     656:	40 97       	sbiw	r24, 0x10	; 16
     658:	0c f0       	brlt	.+2      	; 0x65c <__vector_4+0x94>
     65a:	42 c0       	rjmp	.+132    	; 0x6e0 <__vector_4+0x118>
			{
				height = height + valueChange; //increment height by tenth
     65c:	20 91 e8 01 	lds	r18, 0x01E8	; 0x8001e8 <height>
     660:	30 91 e9 01 	lds	r19, 0x01E9	; 0x8001e9 <height+0x1>
     664:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     668:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     66c:	82 0f       	add	r24, r18
     66e:	93 1f       	adc	r25, r19
     670:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <height+0x1>
     674:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <height>
				ftoa(height,heightConv); // convert height to char array (heightConv) with 1 decimal place
     678:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <height>
     67c:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <height+0x1>
     680:	68 ec       	ldi	r22, 0xC8	; 200
     682:	71 e0       	ldi	r23, 0x01	; 1
     684:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_height_change(heightConv); // print conversion to LCD
     688:	88 ec       	ldi	r24, 0xC8	; 200
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	0e 94 9a 02 	call	0x534	; 0x534 <print_height_change>
     690:	27 c0       	rjmp	.+78     	; 0x6e0 <__vector_4+0x118>
			}
			break;
			case CANGLE: // increment angle value (as long as <= MAX (90))
				if ((angle+valueChange) <= MAX_ANGLE)
     692:	20 91 e6 01 	lds	r18, 0x01E6	; 0x8001e6 <angle>
     696:	30 91 e7 01 	lds	r19, 0x01E7	; 0x8001e7 <angle+0x1>
     69a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     69e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     6a2:	82 0f       	add	r24, r18
     6a4:	93 1f       	adc	r25, r19
     6a6:	8b 35       	cpi	r24, 0x5B	; 91
     6a8:	91 05       	cpc	r25, r1
     6aa:	d4 f4       	brge	.+52     	; 0x6e0 <__vector_4+0x118>
				{
					angle=angle + valueChange;
     6ac:	20 91 e6 01 	lds	r18, 0x01E6	; 0x8001e6 <angle>
     6b0:	30 91 e7 01 	lds	r19, 0x01E7	; 0x8001e7 <angle+0x1>
     6b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     6b8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     6bc:	82 0f       	add	r24, r18
     6be:	93 1f       	adc	r25, r19
     6c0:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <angle+0x1>
     6c4:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <angle>
					ftoa(angle,angleConv); // convert angle to char array (angleConv) with 1 decimal place
     6c8:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <angle>
     6cc:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <angle+0x1>
     6d0:	68 eb       	ldi	r22, 0xB8	; 184
     6d2:	71 e0       	ldi	r23, 0x01	; 1
     6d4:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
					print_angle_change(angleConv);	// print conversion to LCD
     6d8:	88 eb       	ldi	r24, 0xB8	; 184
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	0e 94 bf 02 	call	0x57e	; 0x57e <print_angle_change>
			break;
		}
	}
	
	
	if (PINC == LEFT) // If left turn triggered interrupt
     6e0:	86 b1       	in	r24, 0x06	; 6
     6e2:	85 37       	cpi	r24, 0x75	; 117
     6e4:	09 f0       	breq	.+2      	; 0x6e8 <__vector_4+0x120>
     6e6:	66 c0       	rjmp	.+204    	; 0x7b4 <__vector_4+0x1ec>
	{
		switch(state)
     6e8:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <state>
     6ec:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <state+0x1>
     6f0:	82 30       	cpi	r24, 0x02	; 2
     6f2:	91 05       	cpc	r25, r1
     6f4:	99 f0       	breq	.+38     	; 0x71c <__vector_4+0x154>
     6f6:	83 30       	cpi	r24, 0x03	; 3
     6f8:	91 05       	cpc	r25, r1
     6fa:	b9 f1       	breq	.+110    	; 0x76a <__vector_4+0x1a2>
     6fc:	01 97       	sbiw	r24, 0x01	; 1
     6fe:	09 f0       	breq	.+2      	; 0x702 <__vector_4+0x13a>
     700:	59 c0       	rjmp	.+178    	; 0x7b4 <__vector_4+0x1ec>
		{
			case HEIGHT: // Change increment/decrement value to 1
			// do nothing
			break;
			case ANGLE: // change to height state
			print_height_angle(angleConv,heightConv, 1);
     702:	41 e0       	ldi	r20, 0x01	; 1
     704:	50 e0       	ldi	r21, 0x00	; 0
     706:	68 ec       	ldi	r22, 0xC8	; 200
     708:	71 e0       	ldi	r23, 0x01	; 1
     70a:	88 eb       	ldi	r24, 0xB8	; 184
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <print_height_angle>
			state = HEIGHT;
     712:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <state+0x1>
     716:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <state>
			break;
     71a:	4c c0       	rjmp	.+152    	; 0x7b4 <__vector_4+0x1ec>
			case CHEIGHT: // decrement height value (as long as >= MIN (0) )
			if ((height-valueChange) >= 0)
     71c:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <height>
     720:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <height+0x1>
     724:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     728:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     72c:	82 1b       	sub	r24, r18
     72e:	93 0b       	sbc	r25, r19
     730:	0a f4       	brpl	.+2      	; 0x734 <__vector_4+0x16c>
     732:	40 c0       	rjmp	.+128    	; 0x7b4 <__vector_4+0x1ec>
			{
				height = height - valueChange;
     734:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <height>
     738:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <height+0x1>
     73c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     740:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     744:	82 1b       	sub	r24, r18
     746:	93 0b       	sbc	r25, r19
     748:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <height+0x1>
     74c:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <height>
				ftoa(height,heightConv); // convert height to char array (heightConv) with 1 decimal place
     750:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <height>
     754:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <height+0x1>
     758:	68 ec       	ldi	r22, 0xC8	; 200
     75a:	71 e0       	ldi	r23, 0x01	; 1
     75c:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_height_change(heightConv); // print conversion to LCD
     760:	88 ec       	ldi	r24, 0xC8	; 200
     762:	91 e0       	ldi	r25, 0x01	; 1
     764:	0e 94 9a 02 	call	0x534	; 0x534 <print_height_change>
     768:	25 c0       	rjmp	.+74     	; 0x7b4 <__vector_4+0x1ec>
			}
			break;
			case CANGLE: // increment angle value (as long as >= MIN (0))
			if((angle-valueChange) >= 0)
     76a:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <angle>
     76e:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <angle+0x1>
     772:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     776:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     77a:	82 1b       	sub	r24, r18
     77c:	93 0b       	sbc	r25, r19
     77e:	d2 f0       	brmi	.+52     	; 0x7b4 <__vector_4+0x1ec>
			{
				angle = angle - valueChange;
     780:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <angle>
     784:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <angle+0x1>
     788:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     78c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     790:	82 1b       	sub	r24, r18
     792:	93 0b       	sbc	r25, r19
     794:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <angle+0x1>
     798:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <angle>
				ftoa(angle,angleConv); // convert angle to char array (angleConv) with 1 decimal place
     79c:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <angle>
     7a0:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <angle+0x1>
     7a4:	68 eb       	ldi	r22, 0xB8	; 184
     7a6:	71 e0       	ldi	r23, 0x01	; 1
     7a8:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_angle_change(angleConv);	// print conversion to LCD
     7ac:	88 eb       	ldi	r24, 0xB8	; 184
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	0e 94 bf 02 	call	0x57e	; 0x57e <print_angle_change>
			break;
		}
	}


	if(PINC == BUTTON) // If button press triggered interrupt
     7b4:	86 b1       	in	r24, 0x06	; 6
     7b6:	87 36       	cpi	r24, 0x67	; 103
     7b8:	09 f0       	breq	.+2      	; 0x7bc <__vector_4+0x1f4>
     7ba:	71 c1       	rjmp	.+738    	; 0xa9e <__stack+0x19f>
	{
		switch(state)
     7bc:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <state>
     7c0:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <state+0x1>
     7c4:	81 30       	cpi	r24, 0x01	; 1
     7c6:	91 05       	cpc	r25, r1
     7c8:	f1 f0       	breq	.+60     	; 0x806 <__vector_4+0x23e>
     7ca:	1c f4       	brge	.+6      	; 0x7d2 <__vector_4+0x20a>
     7cc:	89 2b       	or	r24, r25
     7ce:	41 f0       	breq	.+16     	; 0x7e0 <__vector_4+0x218>
     7d0:	66 c1       	rjmp	.+716    	; 0xa9e <__stack+0x19f>
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	91 05       	cpc	r25, r1
     7d6:	51 f1       	breq	.+84     	; 0x82c <__vector_4+0x264>
     7d8:	03 97       	sbiw	r24, 0x03	; 3
     7da:	09 f4       	brne	.+2      	; 0x7de <__vector_4+0x216>
     7dc:	c2 c0       	rjmp	.+388    	; 0x962 <__stack+0x63>
     7de:	5f c1       	rjmp	.+702    	; 0xa9e <__stack+0x19f>
		{
			case HEIGHT: // change to height change state
				ftoa(height,heightConv);
     7e0:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <height>
     7e4:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <height+0x1>
     7e8:	68 ec       	ldi	r22, 0xC8	; 200
     7ea:	71 e0       	ldi	r23, 0x01	; 1
     7ec:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_height_change(heightConv);
     7f0:	88 ec       	ldi	r24, 0xC8	; 200
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	0e 94 9a 02 	call	0x534	; 0x534 <print_height_change>
				state = CHEIGHT;
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <state+0x1>
     800:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <state>
				break;
     804:	4c c1       	rjmp	.+664    	; 0xa9e <__stack+0x19f>
			case ANGLE: // change to angle change state
				ftoa(angle,angleConv);
     806:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <angle>
     80a:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <angle+0x1>
     80e:	68 eb       	ldi	r22, 0xB8	; 184
     810:	71 e0       	ldi	r23, 0x01	; 1
     812:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_angle_change(angleConv);
     816:	88 eb       	ldi	r24, 0xB8	; 184
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	0e 94 bf 02 	call	0x57e	; 0x57e <print_angle_change>
				state = CANGLE;
     81e:	83 e0       	ldi	r24, 0x03	; 3
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <state+0x1>
     826:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <state>
				break;
     82a:	39 c1       	rjmp	.+626    	; 0xa9e <__stack+0x19f>
			case CHEIGHT: // confirm height change value
				valueConfirm = 1; // set flag
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <valueConfirm+0x1>
     834:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <valueConfirm>
				// Convert height to angle
				dAngle = height; // save height variable as double
     838:	60 91 e8 01 	lds	r22, 0x01E8	; 0x8001e8 <height>
     83c:	70 91 e9 01 	lds	r23, 0x01E9	; 0x8001e9 <height+0x1>
     840:	07 2e       	mov	r0, r23
     842:	00 0c       	add	r0, r0
     844:	88 0b       	sbc	r24, r24
     846:	99 0b       	sbc	r25, r25
     848:	0e 94 96 06 	call	0xd2c	; 0xd2c <__floatsisf>
     84c:	60 93 e2 01 	sts	0x01E2, r22	; 0x8001e2 <dAngle>
     850:	70 93 e3 01 	sts	0x01E3, r23	; 0x8001e3 <dAngle+0x1>
     854:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <dAngle+0x2>
     858:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <dAngle+0x3>
				dAngle = dAngle * dAngle; // square dAngle
     85c:	60 91 e2 01 	lds	r22, 0x01E2	; 0x8001e2 <dAngle>
     860:	70 91 e3 01 	lds	r23, 0x01E3	; 0x8001e3 <dAngle+0x1>
     864:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <dAngle+0x2>
     868:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <dAngle+0x3>
     86c:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <dAngle>
     870:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <dAngle+0x1>
     874:	40 91 e4 01 	lds	r20, 0x01E4	; 0x8001e4 <dAngle+0x2>
     878:	50 91 e5 01 	lds	r21, 0x01E5	; 0x8001e5 <dAngle+0x3>
     87c:	0e 94 00 08 	call	0x1000	; 0x1000 <__mulsf3>
     880:	60 93 e2 01 	sts	0x01E2, r22	; 0x8001e2 <dAngle>
     884:	70 93 e3 01 	sts	0x01E3, r23	; 0x8001e3 <dAngle+0x1>
     888:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <dAngle+0x2>
     88c:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <dAngle+0x3>
				dAngle = sqrt(225 - dAngle) / 15;
     890:	c0 90 e2 01 	lds	r12, 0x01E2	; 0x8001e2 <dAngle>
     894:	d0 90 e3 01 	lds	r13, 0x01E3	; 0x8001e3 <dAngle+0x1>
     898:	e0 90 e4 01 	lds	r14, 0x01E4	; 0x8001e4 <dAngle+0x2>
     89c:	f0 90 e5 01 	lds	r15, 0x01E5	; 0x8001e5 <dAngle+0x3>
     8a0:	a7 01       	movw	r20, r14
     8a2:	96 01       	movw	r18, r12
     8a4:	60 e0       	ldi	r22, 0x00	; 0
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	81 e6       	ldi	r24, 0x61	; 97
     8aa:	93 e4       	ldi	r25, 0x43	; 67
     8ac:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__subsf3>
     8b0:	0e 94 73 08 	call	0x10e6	; 0x10e6 <sqrt>
     8b4:	20 e0       	ldi	r18, 0x00	; 0
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	40 e7       	ldi	r20, 0x70	; 112
     8ba:	51 e4       	ldi	r21, 0x41	; 65
     8bc:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <__divsf3>
     8c0:	60 93 e2 01 	sts	0x01E2, r22	; 0x8001e2 <dAngle>
     8c4:	70 93 e3 01 	sts	0x01E3, r23	; 0x8001e3 <dAngle+0x1>
     8c8:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <dAngle+0x2>
     8cc:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <dAngle+0x3>
				dAngle = acos(dAngle) * (180 / M_PI);  // See Alex's lab notebook for formula used (combo of pythag. and trig.)
     8d0:	60 91 e2 01 	lds	r22, 0x01E2	; 0x8001e2 <dAngle>
     8d4:	70 91 e3 01 	lds	r23, 0x01E3	; 0x8001e3 <dAngle+0x1>
     8d8:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <dAngle+0x2>
     8dc:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <dAngle+0x3>
     8e0:	0e 94 69 05 	call	0xad2	; 0xad2 <acos>
     8e4:	20 ee       	ldi	r18, 0xE0	; 224
     8e6:	3e e2       	ldi	r19, 0x2E	; 46
     8e8:	45 e6       	ldi	r20, 0x65	; 101
     8ea:	52 e4       	ldi	r21, 0x42	; 66
     8ec:	0e 94 00 08 	call	0x1000	; 0x1000 <__mulsf3>
     8f0:	60 93 e2 01 	sts	0x01E2, r22	; 0x8001e2 <dAngle>
     8f4:	70 93 e3 01 	sts	0x01E3, r23	; 0x8001e3 <dAngle+0x1>
     8f8:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <dAngle+0x2>
     8fc:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <dAngle+0x3>
				angle = floor(dAngle);
     900:	60 91 e2 01 	lds	r22, 0x01E2	; 0x8001e2 <dAngle>
     904:	70 91 e3 01 	lds	r23, 0x01E3	; 0x8001e3 <dAngle+0x1>
     908:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <dAngle+0x2>
     90c:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <dAngle+0x3>
     910:	0e 94 d1 06 	call	0xda2	; 0xda2 <floor>
     914:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fixsfsi>
     918:	70 93 e7 01 	sts	0x01E7, r23	; 0x8001e7 <angle+0x1>
     91c:	60 93 e6 01 	sts	0x01E6, r22	; 0x8001e6 <angle>
				if (height == 15)
     920:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <height>
     924:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <height+0x1>
     928:	0f 97       	sbiw	r24, 0x0f	; 15
     92a:	31 f4       	brne	.+12     	; 0x938 <__stack+0x39>
				{
					angle = 90;
     92c:	8a e5       	ldi	r24, 0x5A	; 90
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <angle+0x1>
     934:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <angle>
				}
			ftoa(angle, angleConv);
     938:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <angle>
     93c:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <angle+0x1>
     940:	68 eb       	ldi	r22, 0xB8	; 184
     942:	71 e0       	ldi	r23, 0x01	; 1
     944:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
			print_height_angle(angleConv,heightConv, 1); // refresh screen with height selected
     948:	41 e0       	ldi	r20, 0x01	; 1
     94a:	50 e0       	ldi	r21, 0x00	; 0
     94c:	68 ec       	ldi	r22, 0xC8	; 200
     94e:	71 e0       	ldi	r23, 0x01	; 1
     950:	88 eb       	ldi	r24, 0xB8	; 184
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	0e 94 54 02 	call	0x4a8	; 0x4a8 <print_height_angle>
			state = HEIGHT; // exit from change function
     958:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <state+0x1>
     95c:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <state>
			break;
     960:	9e c0       	rjmp	.+316    	; 0xa9e <__stack+0x19f>
			case CANGLE: // confirm angle change value
				valueConfirm = 1; // set flag - might need to make unique flag
     962:	c1 e0       	ldi	r28, 0x01	; 1
     964:	d0 e0       	ldi	r29, 0x00	; 0
     966:	d0 93 dd 01 	sts	0x01DD, r29	; 0x8001dd <valueConfirm+0x1>
     96a:	c0 93 dc 01 	sts	0x01DC, r28	; 0x8001dc <valueConfirm>
				// Convert angle to height
				dHeight = angle; // save angle as double
     96e:	60 91 e6 01 	lds	r22, 0x01E6	; 0x8001e6 <angle>
     972:	70 91 e7 01 	lds	r23, 0x01E7	; 0x8001e7 <angle+0x1>
     976:	07 2e       	mov	r0, r23
     978:	00 0c       	add	r0, r0
     97a:	88 0b       	sbc	r24, r24
     97c:	99 0b       	sbc	r25, r25
     97e:	0e 94 96 06 	call	0xd2c	; 0xd2c <__floatsisf>
     982:	60 93 de 01 	sts	0x01DE, r22	; 0x8001de <dHeight>
     986:	70 93 df 01 	sts	0x01DF, r23	; 0x8001df <dHeight+0x1>
     98a:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <dHeight+0x2>
     98e:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <dHeight+0x3>
				dHeight = (dHeight) * (M_PI / 180); // convert angle to radians
     992:	60 91 de 01 	lds	r22, 0x01DE	; 0x8001de <dHeight>
     996:	70 91 df 01 	lds	r23, 0x01DF	; 0x8001df <dHeight+0x1>
     99a:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <dHeight+0x2>
     99e:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <dHeight+0x3>
     9a2:	25 e3       	ldi	r18, 0x35	; 53
     9a4:	3a ef       	ldi	r19, 0xFA	; 250
     9a6:	4e e8       	ldi	r20, 0x8E	; 142
     9a8:	5c e3       	ldi	r21, 0x3C	; 60
     9aa:	0e 94 00 08 	call	0x1000	; 0x1000 <__mulsf3>
     9ae:	60 93 de 01 	sts	0x01DE, r22	; 0x8001de <dHeight>
     9b2:	70 93 df 01 	sts	0x01DF, r23	; 0x8001df <dHeight+0x1>
     9b6:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <dHeight+0x2>
     9ba:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <dHeight+0x3>
				dHeight = 15*(cos(dHeight));
     9be:	60 91 de 01 	lds	r22, 0x01DE	; 0x8001de <dHeight>
     9c2:	70 91 df 01 	lds	r23, 0x01DF	; 0x8001df <dHeight+0x1>
     9c6:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <dHeight+0x2>
     9ca:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <dHeight+0x3>
     9ce:	0e 94 e7 05 	call	0xbce	; 0xbce <cos>
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	40 e7       	ldi	r20, 0x70	; 112
     9d8:	51 e4       	ldi	r21, 0x41	; 65
     9da:	0e 94 00 08 	call	0x1000	; 0x1000 <__mulsf3>
     9de:	60 93 de 01 	sts	0x01DE, r22	; 0x8001de <dHeight>
     9e2:	70 93 df 01 	sts	0x01DF, r23	; 0x8001df <dHeight+0x1>
     9e6:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <dHeight+0x2>
     9ea:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <dHeight+0x3>
				dHeight = dHeight * dHeight;
     9ee:	60 91 de 01 	lds	r22, 0x01DE	; 0x8001de <dHeight>
     9f2:	70 91 df 01 	lds	r23, 0x01DF	; 0x8001df <dHeight+0x1>
     9f6:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <dHeight+0x2>
     9fa:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <dHeight+0x3>
     9fe:	20 91 de 01 	lds	r18, 0x01DE	; 0x8001de <dHeight>
     a02:	30 91 df 01 	lds	r19, 0x01DF	; 0x8001df <dHeight+0x1>
     a06:	40 91 e0 01 	lds	r20, 0x01E0	; 0x8001e0 <dHeight+0x2>
     a0a:	50 91 e1 01 	lds	r21, 0x01E1	; 0x8001e1 <dHeight+0x3>
     a0e:	0e 94 00 08 	call	0x1000	; 0x1000 <__mulsf3>
     a12:	60 93 de 01 	sts	0x01DE, r22	; 0x8001de <dHeight>
     a16:	70 93 df 01 	sts	0x01DF, r23	; 0x8001df <dHeight+0x1>
     a1a:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <dHeight+0x2>
     a1e:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <dHeight+0x3>
				dHeight = sqrt((225-dHeight));
     a22:	c0 90 de 01 	lds	r12, 0x01DE	; 0x8001de <dHeight>
     a26:	d0 90 df 01 	lds	r13, 0x01DF	; 0x8001df <dHeight+0x1>
     a2a:	e0 90 e0 01 	lds	r14, 0x01E0	; 0x8001e0 <dHeight+0x2>
     a2e:	f0 90 e1 01 	lds	r15, 0x01E1	; 0x8001e1 <dHeight+0x3>
     a32:	a7 01       	movw	r20, r14
     a34:	96 01       	movw	r18, r12
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	81 e6       	ldi	r24, 0x61	; 97
     a3c:	93 e4       	ldi	r25, 0x43	; 67
     a3e:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__subsf3>
     a42:	0e 94 73 08 	call	0x10e6	; 0x10e6 <sqrt>
     a46:	60 93 de 01 	sts	0x01DE, r22	; 0x8001de <dHeight>
     a4a:	70 93 df 01 	sts	0x01DF, r23	; 0x8001df <dHeight+0x1>
     a4e:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <dHeight+0x2>
     a52:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <dHeight+0x3>
				height = floor(dHeight);
     a56:	60 91 de 01 	lds	r22, 0x01DE	; 0x8001de <dHeight>
     a5a:	70 91 df 01 	lds	r23, 0x01DF	; 0x8001df <dHeight+0x1>
     a5e:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <dHeight+0x2>
     a62:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <dHeight+0x3>
     a66:	0e 94 d1 06 	call	0xda2	; 0xda2 <floor>
     a6a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fixsfsi>
     a6e:	70 93 e9 01 	sts	0x01E9, r23	; 0x8001e9 <height+0x1>
     a72:	60 93 e8 01 	sts	0x01E8, r22	; 0x8001e8 <height>
				ftoa(height,heightConv);
     a76:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <height>
     a7a:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <height+0x1>
     a7e:	68 ec       	ldi	r22, 0xC8	; 200
     a80:	71 e0       	ldi	r23, 0x01	; 1
     a82:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_height_angle(angleConv,heightConv, 0); // refresh screen with angle selected
     a86:	40 e0       	ldi	r20, 0x00	; 0
     a88:	50 e0       	ldi	r21, 0x00	; 0
     a8a:	68 ec       	ldi	r22, 0xC8	; 200
     a8c:	71 e0       	ldi	r23, 0x01	; 1
     a8e:	88 eb       	ldi	r24, 0xB8	; 184
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	0e 94 54 02 	call	0x4a8	; 0x4a8 <print_height_angle>
				state = ANGLE;
     a96:	d0 93 eb 01 	sts	0x01EB, r29	; 0x8001eb <state+0x1>
     a9a:	c0 93 ea 01 	sts	0x01EA, r28	; 0x8001ea <state>
			break;
		}
	}
	
	while(PINC != 0b01110111)
     a9e:	86 b1       	in	r24, 0x06	; 6
     aa0:	87 37       	cpi	r24, 0x77	; 119
     aa2:	e9 f7       	brne	.-6      	; 0xa9e <__stack+0x19f>
	{
		
	}

}
     aa4:	ff 91       	pop	r31
     aa6:	ef 91       	pop	r30
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	bf 91       	pop	r27
     aae:	af 91       	pop	r26
     ab0:	9f 91       	pop	r25
     ab2:	8f 91       	pop	r24
     ab4:	7f 91       	pop	r23
     ab6:	6f 91       	pop	r22
     ab8:	5f 91       	pop	r21
     aba:	4f 91       	pop	r20
     abc:	3f 91       	pop	r19
     abe:	2f 91       	pop	r18
     ac0:	ff 90       	pop	r15
     ac2:	ef 90       	pop	r14
     ac4:	df 90       	pop	r13
     ac6:	cf 90       	pop	r12
     ac8:	0f 90       	pop	r0
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	0f 90       	pop	r0
     ace:	1f 90       	pop	r1
     ad0:	18 95       	reti

00000ad2 <acos>:
     ad2:	9f 93       	push	r25
     ad4:	9f 77       	andi	r25, 0x7F	; 127
     ad6:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__fp_arccos>
     ada:	0f 90       	pop	r0
     adc:	00 20       	and	r0, r0
     ade:	42 f4       	brpl	.+16     	; 0xaf0 <acos+0x1e>
     ae0:	90 58       	subi	r25, 0x80	; 128
     ae2:	a2 ea       	ldi	r26, 0xA2	; 162
     ae4:	2a ed       	ldi	r18, 0xDA	; 218
     ae6:	3f e0       	ldi	r19, 0x0F	; 15
     ae8:	49 e4       	ldi	r20, 0x49	; 73
     aea:	50 e4       	ldi	r21, 0x40	; 64
     aec:	0e 94 92 05 	call	0xb24	; 0xb24 <__addsf3x>
     af0:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_round>

00000af4 <__subsf3>:
     af4:	50 58       	subi	r21, 0x80	; 128

00000af6 <__addsf3>:
     af6:	bb 27       	eor	r27, r27
     af8:	aa 27       	eor	r26, r26
     afa:	0e 94 92 05 	call	0xb24	; 0xb24 <__addsf3x>
     afe:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_round>
     b02:	0e 94 61 07 	call	0xec2	; 0xec2 <__fp_pscA>
     b06:	38 f0       	brcs	.+14     	; 0xb16 <__addsf3+0x20>
     b08:	0e 94 68 07 	call	0xed0	; 0xed0 <__fp_pscB>
     b0c:	20 f0       	brcs	.+8      	; 0xb16 <__addsf3+0x20>
     b0e:	39 f4       	brne	.+14     	; 0xb1e <__addsf3+0x28>
     b10:	9f 3f       	cpi	r25, 0xFF	; 255
     b12:	19 f4       	brne	.+6      	; 0xb1a <__addsf3+0x24>
     b14:	26 f4       	brtc	.+8      	; 0xb1e <__addsf3+0x28>
     b16:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <__fp_nan>
     b1a:	0e f4       	brtc	.+2      	; 0xb1e <__addsf3+0x28>
     b1c:	e0 95       	com	r30
     b1e:	e7 fb       	bst	r30, 7
     b20:	0c 94 08 07 	jmp	0xe10	; 0xe10 <__fp_inf>

00000b24 <__addsf3x>:
     b24:	e9 2f       	mov	r30, r25
     b26:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__fp_split3>
     b2a:	58 f3       	brcs	.-42     	; 0xb02 <__addsf3+0xc>
     b2c:	ba 17       	cp	r27, r26
     b2e:	62 07       	cpc	r22, r18
     b30:	73 07       	cpc	r23, r19
     b32:	84 07       	cpc	r24, r20
     b34:	95 07       	cpc	r25, r21
     b36:	20 f0       	brcs	.+8      	; 0xb40 <__addsf3x+0x1c>
     b38:	79 f4       	brne	.+30     	; 0xb58 <__addsf3x+0x34>
     b3a:	a6 f5       	brtc	.+104    	; 0xba4 <__addsf3x+0x80>
     b3c:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <__fp_zero>
     b40:	0e f4       	brtc	.+2      	; 0xb44 <__addsf3x+0x20>
     b42:	e0 95       	com	r30
     b44:	0b 2e       	mov	r0, r27
     b46:	ba 2f       	mov	r27, r26
     b48:	a0 2d       	mov	r26, r0
     b4a:	0b 01       	movw	r0, r22
     b4c:	b9 01       	movw	r22, r18
     b4e:	90 01       	movw	r18, r0
     b50:	0c 01       	movw	r0, r24
     b52:	ca 01       	movw	r24, r20
     b54:	a0 01       	movw	r20, r0
     b56:	11 24       	eor	r1, r1
     b58:	ff 27       	eor	r31, r31
     b5a:	59 1b       	sub	r21, r25
     b5c:	99 f0       	breq	.+38     	; 0xb84 <__addsf3x+0x60>
     b5e:	59 3f       	cpi	r21, 0xF9	; 249
     b60:	50 f4       	brcc	.+20     	; 0xb76 <__addsf3x+0x52>
     b62:	50 3e       	cpi	r21, 0xE0	; 224
     b64:	68 f1       	brcs	.+90     	; 0xbc0 <__addsf3x+0x9c>
     b66:	1a 16       	cp	r1, r26
     b68:	f0 40       	sbci	r31, 0x00	; 0
     b6a:	a2 2f       	mov	r26, r18
     b6c:	23 2f       	mov	r18, r19
     b6e:	34 2f       	mov	r19, r20
     b70:	44 27       	eor	r20, r20
     b72:	58 5f       	subi	r21, 0xF8	; 248
     b74:	f3 cf       	rjmp	.-26     	; 0xb5c <__addsf3x+0x38>
     b76:	46 95       	lsr	r20
     b78:	37 95       	ror	r19
     b7a:	27 95       	ror	r18
     b7c:	a7 95       	ror	r26
     b7e:	f0 40       	sbci	r31, 0x00	; 0
     b80:	53 95       	inc	r21
     b82:	c9 f7       	brne	.-14     	; 0xb76 <__addsf3x+0x52>
     b84:	7e f4       	brtc	.+30     	; 0xba4 <__addsf3x+0x80>
     b86:	1f 16       	cp	r1, r31
     b88:	ba 0b       	sbc	r27, r26
     b8a:	62 0b       	sbc	r22, r18
     b8c:	73 0b       	sbc	r23, r19
     b8e:	84 0b       	sbc	r24, r20
     b90:	ba f0       	brmi	.+46     	; 0xbc0 <__addsf3x+0x9c>
     b92:	91 50       	subi	r25, 0x01	; 1
     b94:	a1 f0       	breq	.+40     	; 0xbbe <__addsf3x+0x9a>
     b96:	ff 0f       	add	r31, r31
     b98:	bb 1f       	adc	r27, r27
     b9a:	66 1f       	adc	r22, r22
     b9c:	77 1f       	adc	r23, r23
     b9e:	88 1f       	adc	r24, r24
     ba0:	c2 f7       	brpl	.-16     	; 0xb92 <__addsf3x+0x6e>
     ba2:	0e c0       	rjmp	.+28     	; 0xbc0 <__addsf3x+0x9c>
     ba4:	ba 0f       	add	r27, r26
     ba6:	62 1f       	adc	r22, r18
     ba8:	73 1f       	adc	r23, r19
     baa:	84 1f       	adc	r24, r20
     bac:	48 f4       	brcc	.+18     	; 0xbc0 <__addsf3x+0x9c>
     bae:	87 95       	ror	r24
     bb0:	77 95       	ror	r23
     bb2:	67 95       	ror	r22
     bb4:	b7 95       	ror	r27
     bb6:	f7 95       	ror	r31
     bb8:	9e 3f       	cpi	r25, 0xFE	; 254
     bba:	08 f0       	brcs	.+2      	; 0xbbe <__addsf3x+0x9a>
     bbc:	b0 cf       	rjmp	.-160    	; 0xb1e <__addsf3+0x28>
     bbe:	93 95       	inc	r25
     bc0:	88 0f       	add	r24, r24
     bc2:	08 f0       	brcs	.+2      	; 0xbc6 <__addsf3x+0xa2>
     bc4:	99 27       	eor	r25, r25
     bc6:	ee 0f       	add	r30, r30
     bc8:	97 95       	ror	r25
     bca:	87 95       	ror	r24
     bcc:	08 95       	ret

00000bce <cos>:
     bce:	0e 94 71 07 	call	0xee2	; 0xee2 <__fp_rempio2>
     bd2:	e3 95       	inc	r30
     bd4:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__fp_sinus>

00000bd8 <__divsf3>:
     bd8:	0e 94 00 06 	call	0xc00	; 0xc00 <__divsf3x>
     bdc:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_round>
     be0:	0e 94 68 07 	call	0xed0	; 0xed0 <__fp_pscB>
     be4:	58 f0       	brcs	.+22     	; 0xbfc <__divsf3+0x24>
     be6:	0e 94 61 07 	call	0xec2	; 0xec2 <__fp_pscA>
     bea:	40 f0       	brcs	.+16     	; 0xbfc <__divsf3+0x24>
     bec:	29 f4       	brne	.+10     	; 0xbf8 <__divsf3+0x20>
     bee:	5f 3f       	cpi	r21, 0xFF	; 255
     bf0:	29 f0       	breq	.+10     	; 0xbfc <__divsf3+0x24>
     bf2:	0c 94 08 07 	jmp	0xe10	; 0xe10 <__fp_inf>
     bf6:	51 11       	cpse	r21, r1
     bf8:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__fp_szero>
     bfc:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <__fp_nan>

00000c00 <__divsf3x>:
     c00:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__fp_split3>
     c04:	68 f3       	brcs	.-38     	; 0xbe0 <__divsf3+0x8>

00000c06 <__divsf3_pse>:
     c06:	99 23       	and	r25, r25
     c08:	b1 f3       	breq	.-20     	; 0xbf6 <__divsf3+0x1e>
     c0a:	55 23       	and	r21, r21
     c0c:	91 f3       	breq	.-28     	; 0xbf2 <__divsf3+0x1a>
     c0e:	95 1b       	sub	r25, r21
     c10:	55 0b       	sbc	r21, r21
     c12:	bb 27       	eor	r27, r27
     c14:	aa 27       	eor	r26, r26
     c16:	62 17       	cp	r22, r18
     c18:	73 07       	cpc	r23, r19
     c1a:	84 07       	cpc	r24, r20
     c1c:	38 f0       	brcs	.+14     	; 0xc2c <__divsf3_pse+0x26>
     c1e:	9f 5f       	subi	r25, 0xFF	; 255
     c20:	5f 4f       	sbci	r21, 0xFF	; 255
     c22:	22 0f       	add	r18, r18
     c24:	33 1f       	adc	r19, r19
     c26:	44 1f       	adc	r20, r20
     c28:	aa 1f       	adc	r26, r26
     c2a:	a9 f3       	breq	.-22     	; 0xc16 <__divsf3_pse+0x10>
     c2c:	35 d0       	rcall	.+106    	; 0xc98 <__divsf3_pse+0x92>
     c2e:	0e 2e       	mov	r0, r30
     c30:	3a f0       	brmi	.+14     	; 0xc40 <__divsf3_pse+0x3a>
     c32:	e0 e8       	ldi	r30, 0x80	; 128
     c34:	32 d0       	rcall	.+100    	; 0xc9a <__divsf3_pse+0x94>
     c36:	91 50       	subi	r25, 0x01	; 1
     c38:	50 40       	sbci	r21, 0x00	; 0
     c3a:	e6 95       	lsr	r30
     c3c:	00 1c       	adc	r0, r0
     c3e:	ca f7       	brpl	.-14     	; 0xc32 <__divsf3_pse+0x2c>
     c40:	2b d0       	rcall	.+86     	; 0xc98 <__divsf3_pse+0x92>
     c42:	fe 2f       	mov	r31, r30
     c44:	29 d0       	rcall	.+82     	; 0xc98 <__divsf3_pse+0x92>
     c46:	66 0f       	add	r22, r22
     c48:	77 1f       	adc	r23, r23
     c4a:	88 1f       	adc	r24, r24
     c4c:	bb 1f       	adc	r27, r27
     c4e:	26 17       	cp	r18, r22
     c50:	37 07       	cpc	r19, r23
     c52:	48 07       	cpc	r20, r24
     c54:	ab 07       	cpc	r26, r27
     c56:	b0 e8       	ldi	r27, 0x80	; 128
     c58:	09 f0       	breq	.+2      	; 0xc5c <__divsf3_pse+0x56>
     c5a:	bb 0b       	sbc	r27, r27
     c5c:	80 2d       	mov	r24, r0
     c5e:	bf 01       	movw	r22, r30
     c60:	ff 27       	eor	r31, r31
     c62:	93 58       	subi	r25, 0x83	; 131
     c64:	5f 4f       	sbci	r21, 0xFF	; 255
     c66:	3a f0       	brmi	.+14     	; 0xc76 <__divsf3_pse+0x70>
     c68:	9e 3f       	cpi	r25, 0xFE	; 254
     c6a:	51 05       	cpc	r21, r1
     c6c:	78 f0       	brcs	.+30     	; 0xc8c <__divsf3_pse+0x86>
     c6e:	0c 94 08 07 	jmp	0xe10	; 0xe10 <__fp_inf>
     c72:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__fp_szero>
     c76:	5f 3f       	cpi	r21, 0xFF	; 255
     c78:	e4 f3       	brlt	.-8      	; 0xc72 <__divsf3_pse+0x6c>
     c7a:	98 3e       	cpi	r25, 0xE8	; 232
     c7c:	d4 f3       	brlt	.-12     	; 0xc72 <__divsf3_pse+0x6c>
     c7e:	86 95       	lsr	r24
     c80:	77 95       	ror	r23
     c82:	67 95       	ror	r22
     c84:	b7 95       	ror	r27
     c86:	f7 95       	ror	r31
     c88:	9f 5f       	subi	r25, 0xFF	; 255
     c8a:	c9 f7       	brne	.-14     	; 0xc7e <__divsf3_pse+0x78>
     c8c:	88 0f       	add	r24, r24
     c8e:	91 1d       	adc	r25, r1
     c90:	96 95       	lsr	r25
     c92:	87 95       	ror	r24
     c94:	97 f9       	bld	r25, 7
     c96:	08 95       	ret
     c98:	e1 e0       	ldi	r30, 0x01	; 1
     c9a:	66 0f       	add	r22, r22
     c9c:	77 1f       	adc	r23, r23
     c9e:	88 1f       	adc	r24, r24
     ca0:	bb 1f       	adc	r27, r27
     ca2:	62 17       	cp	r22, r18
     ca4:	73 07       	cpc	r23, r19
     ca6:	84 07       	cpc	r24, r20
     ca8:	ba 07       	cpc	r27, r26
     caa:	20 f0       	brcs	.+8      	; 0xcb4 <__divsf3_pse+0xae>
     cac:	62 1b       	sub	r22, r18
     cae:	73 0b       	sbc	r23, r19
     cb0:	84 0b       	sbc	r24, r20
     cb2:	ba 0b       	sbc	r27, r26
     cb4:	ee 1f       	adc	r30, r30
     cb6:	88 f7       	brcc	.-30     	; 0xc9a <__divsf3_pse+0x94>
     cb8:	e0 95       	com	r30
     cba:	08 95       	ret

00000cbc <__fixsfsi>:
     cbc:	0e 94 65 06 	call	0xcca	; 0xcca <__fixunssfsi>
     cc0:	68 94       	set
     cc2:	b1 11       	cpse	r27, r1
     cc4:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__fp_szero>
     cc8:	08 95       	ret

00000cca <__fixunssfsi>:
     cca:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__fp_splitA>
     cce:	88 f0       	brcs	.+34     	; 0xcf2 <__fixunssfsi+0x28>
     cd0:	9f 57       	subi	r25, 0x7F	; 127
     cd2:	98 f0       	brcs	.+38     	; 0xcfa <__fixunssfsi+0x30>
     cd4:	b9 2f       	mov	r27, r25
     cd6:	99 27       	eor	r25, r25
     cd8:	b7 51       	subi	r27, 0x17	; 23
     cda:	b0 f0       	brcs	.+44     	; 0xd08 <__fixunssfsi+0x3e>
     cdc:	e1 f0       	breq	.+56     	; 0xd16 <__fixunssfsi+0x4c>
     cde:	66 0f       	add	r22, r22
     ce0:	77 1f       	adc	r23, r23
     ce2:	88 1f       	adc	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	1a f0       	brmi	.+6      	; 0xcee <__fixunssfsi+0x24>
     ce8:	ba 95       	dec	r27
     cea:	c9 f7       	brne	.-14     	; 0xcde <__fixunssfsi+0x14>
     cec:	14 c0       	rjmp	.+40     	; 0xd16 <__fixunssfsi+0x4c>
     cee:	b1 30       	cpi	r27, 0x01	; 1
     cf0:	91 f0       	breq	.+36     	; 0xd16 <__fixunssfsi+0x4c>
     cf2:	0e 94 f9 07 	call	0xff2	; 0xff2 <__fp_zero>
     cf6:	b1 e0       	ldi	r27, 0x01	; 1
     cf8:	08 95       	ret
     cfa:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <__fp_zero>
     cfe:	67 2f       	mov	r22, r23
     d00:	78 2f       	mov	r23, r24
     d02:	88 27       	eor	r24, r24
     d04:	b8 5f       	subi	r27, 0xF8	; 248
     d06:	39 f0       	breq	.+14     	; 0xd16 <__fixunssfsi+0x4c>
     d08:	b9 3f       	cpi	r27, 0xF9	; 249
     d0a:	cc f3       	brlt	.-14     	; 0xcfe <__fixunssfsi+0x34>
     d0c:	86 95       	lsr	r24
     d0e:	77 95       	ror	r23
     d10:	67 95       	ror	r22
     d12:	b3 95       	inc	r27
     d14:	d9 f7       	brne	.-10     	; 0xd0c <__fixunssfsi+0x42>
     d16:	3e f4       	brtc	.+14     	; 0xd26 <__fixunssfsi+0x5c>
     d18:	90 95       	com	r25
     d1a:	80 95       	com	r24
     d1c:	70 95       	com	r23
     d1e:	61 95       	neg	r22
     d20:	7f 4f       	sbci	r23, 0xFF	; 255
     d22:	8f 4f       	sbci	r24, 0xFF	; 255
     d24:	9f 4f       	sbci	r25, 0xFF	; 255
     d26:	08 95       	ret

00000d28 <__floatunsisf>:
     d28:	e8 94       	clt
     d2a:	09 c0       	rjmp	.+18     	; 0xd3e <__floatsisf+0x12>

00000d2c <__floatsisf>:
     d2c:	97 fb       	bst	r25, 7
     d2e:	3e f4       	brtc	.+14     	; 0xd3e <__floatsisf+0x12>
     d30:	90 95       	com	r25
     d32:	80 95       	com	r24
     d34:	70 95       	com	r23
     d36:	61 95       	neg	r22
     d38:	7f 4f       	sbci	r23, 0xFF	; 255
     d3a:	8f 4f       	sbci	r24, 0xFF	; 255
     d3c:	9f 4f       	sbci	r25, 0xFF	; 255
     d3e:	99 23       	and	r25, r25
     d40:	a9 f0       	breq	.+42     	; 0xd6c <__floatsisf+0x40>
     d42:	f9 2f       	mov	r31, r25
     d44:	96 e9       	ldi	r25, 0x96	; 150
     d46:	bb 27       	eor	r27, r27
     d48:	93 95       	inc	r25
     d4a:	f6 95       	lsr	r31
     d4c:	87 95       	ror	r24
     d4e:	77 95       	ror	r23
     d50:	67 95       	ror	r22
     d52:	b7 95       	ror	r27
     d54:	f1 11       	cpse	r31, r1
     d56:	f8 cf       	rjmp	.-16     	; 0xd48 <__floatsisf+0x1c>
     d58:	fa f4       	brpl	.+62     	; 0xd98 <__floatsisf+0x6c>
     d5a:	bb 0f       	add	r27, r27
     d5c:	11 f4       	brne	.+4      	; 0xd62 <__floatsisf+0x36>
     d5e:	60 ff       	sbrs	r22, 0
     d60:	1b c0       	rjmp	.+54     	; 0xd98 <__floatsisf+0x6c>
     d62:	6f 5f       	subi	r22, 0xFF	; 255
     d64:	7f 4f       	sbci	r23, 0xFF	; 255
     d66:	8f 4f       	sbci	r24, 0xFF	; 255
     d68:	9f 4f       	sbci	r25, 0xFF	; 255
     d6a:	16 c0       	rjmp	.+44     	; 0xd98 <__floatsisf+0x6c>
     d6c:	88 23       	and	r24, r24
     d6e:	11 f0       	breq	.+4      	; 0xd74 <__floatsisf+0x48>
     d70:	96 e9       	ldi	r25, 0x96	; 150
     d72:	11 c0       	rjmp	.+34     	; 0xd96 <__floatsisf+0x6a>
     d74:	77 23       	and	r23, r23
     d76:	21 f0       	breq	.+8      	; 0xd80 <__floatsisf+0x54>
     d78:	9e e8       	ldi	r25, 0x8E	; 142
     d7a:	87 2f       	mov	r24, r23
     d7c:	76 2f       	mov	r23, r22
     d7e:	05 c0       	rjmp	.+10     	; 0xd8a <__floatsisf+0x5e>
     d80:	66 23       	and	r22, r22
     d82:	71 f0       	breq	.+28     	; 0xda0 <__floatsisf+0x74>
     d84:	96 e8       	ldi	r25, 0x86	; 134
     d86:	86 2f       	mov	r24, r22
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	2a f0       	brmi	.+10     	; 0xd98 <__floatsisf+0x6c>
     d8e:	9a 95       	dec	r25
     d90:	66 0f       	add	r22, r22
     d92:	77 1f       	adc	r23, r23
     d94:	88 1f       	adc	r24, r24
     d96:	da f7       	brpl	.-10     	; 0xd8e <__floatsisf+0x62>
     d98:	88 0f       	add	r24, r24
     d9a:	96 95       	lsr	r25
     d9c:	87 95       	ror	r24
     d9e:	97 f9       	bld	r25, 7
     da0:	08 95       	ret

00000da2 <floor>:
     da2:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__fp_trunc>
     da6:	90 f0       	brcs	.+36     	; 0xdcc <floor+0x2a>
     da8:	9f 37       	cpi	r25, 0x7F	; 127
     daa:	48 f4       	brcc	.+18     	; 0xdbe <floor+0x1c>
     dac:	91 11       	cpse	r25, r1
     dae:	16 f0       	brts	.+4      	; 0xdb4 <floor+0x12>
     db0:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__fp_szero>
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	80 e8       	ldi	r24, 0x80	; 128
     dba:	9f eb       	ldi	r25, 0xBF	; 191
     dbc:	08 95       	ret
     dbe:	26 f4       	brtc	.+8      	; 0xdc8 <floor+0x26>
     dc0:	1b 16       	cp	r1, r27
     dc2:	61 1d       	adc	r22, r1
     dc4:	71 1d       	adc	r23, r1
     dc6:	81 1d       	adc	r24, r1
     dc8:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_mintl>
     dcc:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__fp_mpack>

00000dd0 <__fp_arccos>:
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	1f 93       	push	r17
     dd6:	0f 93       	push	r16
     dd8:	8b 01       	movw	r16, r22
     dda:	ec 01       	movw	r28, r24
     ddc:	e4 eb       	ldi	r30, 0xB4	; 180
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	0e 94 3a 07 	call	0xe74	; 0xe74 <__fp_powser>
     de4:	0e 94 9a 07 	call	0xf34	; 0xf34 <__fp_round>
     de8:	98 01       	movw	r18, r16
     dea:	ae 01       	movw	r20, r28
     dec:	8b 01       	movw	r16, r22
     dee:	ec 01       	movw	r28, r24
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	80 e8       	ldi	r24, 0x80	; 128
     df6:	9f e3       	ldi	r25, 0x3F	; 63
     df8:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__subsf3>
     dfc:	0e 94 73 08 	call	0x10e6	; 0x10e6 <sqrt>
     e00:	98 01       	movw	r18, r16
     e02:	ae 01       	movw	r20, r28
     e04:	0f 91       	pop	r16
     e06:	1f 91       	pop	r17
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__mulsf3x>

00000e10 <__fp_inf>:
     e10:	97 f9       	bld	r25, 7
     e12:	9f 67       	ori	r25, 0x7F	; 127
     e14:	80 e8       	ldi	r24, 0x80	; 128
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	08 95       	ret

00000e1c <__fp_mintl>:
     e1c:	88 23       	and	r24, r24
     e1e:	71 f4       	brne	.+28     	; 0xe3c <__fp_mintl+0x20>
     e20:	77 23       	and	r23, r23
     e22:	21 f0       	breq	.+8      	; 0xe2c <__fp_mintl+0x10>
     e24:	98 50       	subi	r25, 0x08	; 8
     e26:	87 2b       	or	r24, r23
     e28:	76 2f       	mov	r23, r22
     e2a:	07 c0       	rjmp	.+14     	; 0xe3a <__fp_mintl+0x1e>
     e2c:	66 23       	and	r22, r22
     e2e:	11 f4       	brne	.+4      	; 0xe34 <__fp_mintl+0x18>
     e30:	99 27       	eor	r25, r25
     e32:	0d c0       	rjmp	.+26     	; 0xe4e <__fp_mintl+0x32>
     e34:	90 51       	subi	r25, 0x10	; 16
     e36:	86 2b       	or	r24, r22
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	2a f0       	brmi	.+10     	; 0xe48 <__fp_mintl+0x2c>
     e3e:	9a 95       	dec	r25
     e40:	66 0f       	add	r22, r22
     e42:	77 1f       	adc	r23, r23
     e44:	88 1f       	adc	r24, r24
     e46:	da f7       	brpl	.-10     	; 0xe3e <__fp_mintl+0x22>
     e48:	88 0f       	add	r24, r24
     e4a:	96 95       	lsr	r25
     e4c:	87 95       	ror	r24
     e4e:	97 f9       	bld	r25, 7
     e50:	08 95       	ret

00000e52 <__fp_mpack>:
     e52:	9f 3f       	cpi	r25, 0xFF	; 255
     e54:	31 f0       	breq	.+12     	; 0xe62 <__fp_mpack_finite+0xc>

00000e56 <__fp_mpack_finite>:
     e56:	91 50       	subi	r25, 0x01	; 1
     e58:	20 f4       	brcc	.+8      	; 0xe62 <__fp_mpack_finite+0xc>
     e5a:	87 95       	ror	r24
     e5c:	77 95       	ror	r23
     e5e:	67 95       	ror	r22
     e60:	b7 95       	ror	r27
     e62:	88 0f       	add	r24, r24
     e64:	91 1d       	adc	r25, r1
     e66:	96 95       	lsr	r25
     e68:	87 95       	ror	r24
     e6a:	97 f9       	bld	r25, 7
     e6c:	08 95       	ret

00000e6e <__fp_nan>:
     e6e:	9f ef       	ldi	r25, 0xFF	; 255
     e70:	80 ec       	ldi	r24, 0xC0	; 192
     e72:	08 95       	ret

00000e74 <__fp_powser>:
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	1f 93       	push	r17
     e7a:	0f 93       	push	r16
     e7c:	ff 92       	push	r15
     e7e:	ef 92       	push	r14
     e80:	df 92       	push	r13
     e82:	7b 01       	movw	r14, r22
     e84:	8c 01       	movw	r16, r24
     e86:	68 94       	set
     e88:	06 c0       	rjmp	.+12     	; 0xe96 <__fp_powser+0x22>
     e8a:	da 2e       	mov	r13, r26
     e8c:	ef 01       	movw	r28, r30
     e8e:	0e 94 13 08 	call	0x1026	; 0x1026 <__mulsf3x>
     e92:	fe 01       	movw	r30, r28
     e94:	e8 94       	clt
     e96:	a5 91       	lpm	r26, Z+
     e98:	25 91       	lpm	r18, Z+
     e9a:	35 91       	lpm	r19, Z+
     e9c:	45 91       	lpm	r20, Z+
     e9e:	55 91       	lpm	r21, Z+
     ea0:	a6 f3       	brts	.-24     	; 0xe8a <__fp_powser+0x16>
     ea2:	ef 01       	movw	r28, r30
     ea4:	0e 94 92 05 	call	0xb24	; 0xb24 <__addsf3x>
     ea8:	fe 01       	movw	r30, r28
     eaa:	97 01       	movw	r18, r14
     eac:	a8 01       	movw	r20, r16
     eae:	da 94       	dec	r13
     eb0:	69 f7       	brne	.-38     	; 0xe8c <__fp_powser+0x18>
     eb2:	df 90       	pop	r13
     eb4:	ef 90       	pop	r14
     eb6:	ff 90       	pop	r15
     eb8:	0f 91       	pop	r16
     eba:	1f 91       	pop	r17
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <__fp_pscA>:
     ec2:	00 24       	eor	r0, r0
     ec4:	0a 94       	dec	r0
     ec6:	16 16       	cp	r1, r22
     ec8:	17 06       	cpc	r1, r23
     eca:	18 06       	cpc	r1, r24
     ecc:	09 06       	cpc	r0, r25
     ece:	08 95       	ret

00000ed0 <__fp_pscB>:
     ed0:	00 24       	eor	r0, r0
     ed2:	0a 94       	dec	r0
     ed4:	12 16       	cp	r1, r18
     ed6:	13 06       	cpc	r1, r19
     ed8:	14 06       	cpc	r1, r20
     eda:	05 06       	cpc	r0, r21
     edc:	08 95       	ret
     ede:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <__fp_nan>

00000ee2 <__fp_rempio2>:
     ee2:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__fp_splitA>
     ee6:	d8 f3       	brcs	.-10     	; 0xede <__fp_pscB+0xe>
     ee8:	e8 94       	clt
     eea:	e0 e0       	ldi	r30, 0x00	; 0
     eec:	bb 27       	eor	r27, r27
     eee:	9f 57       	subi	r25, 0x7F	; 127
     ef0:	f0 f0       	brcs	.+60     	; 0xf2e <__fp_rempio2+0x4c>
     ef2:	2a ed       	ldi	r18, 0xDA	; 218
     ef4:	3f e0       	ldi	r19, 0x0F	; 15
     ef6:	49 ec       	ldi	r20, 0xC9	; 201
     ef8:	06 c0       	rjmp	.+12     	; 0xf06 <__fp_rempio2+0x24>
     efa:	ee 0f       	add	r30, r30
     efc:	bb 0f       	add	r27, r27
     efe:	66 1f       	adc	r22, r22
     f00:	77 1f       	adc	r23, r23
     f02:	88 1f       	adc	r24, r24
     f04:	28 f0       	brcs	.+10     	; 0xf10 <__fp_rempio2+0x2e>
     f06:	b2 3a       	cpi	r27, 0xA2	; 162
     f08:	62 07       	cpc	r22, r18
     f0a:	73 07       	cpc	r23, r19
     f0c:	84 07       	cpc	r24, r20
     f0e:	28 f0       	brcs	.+10     	; 0xf1a <__fp_rempio2+0x38>
     f10:	b2 5a       	subi	r27, 0xA2	; 162
     f12:	62 0b       	sbc	r22, r18
     f14:	73 0b       	sbc	r23, r19
     f16:	84 0b       	sbc	r24, r20
     f18:	e3 95       	inc	r30
     f1a:	9a 95       	dec	r25
     f1c:	72 f7       	brpl	.-36     	; 0xefa <__fp_rempio2+0x18>
     f1e:	80 38       	cpi	r24, 0x80	; 128
     f20:	30 f4       	brcc	.+12     	; 0xf2e <__fp_rempio2+0x4c>
     f22:	9a 95       	dec	r25
     f24:	bb 0f       	add	r27, r27
     f26:	66 1f       	adc	r22, r22
     f28:	77 1f       	adc	r23, r23
     f2a:	88 1f       	adc	r24, r24
     f2c:	d2 f7       	brpl	.-12     	; 0xf22 <__fp_rempio2+0x40>
     f2e:	90 48       	sbci	r25, 0x80	; 128
     f30:	0c 94 2b 07 	jmp	0xe56	; 0xe56 <__fp_mpack_finite>

00000f34 <__fp_round>:
     f34:	09 2e       	mov	r0, r25
     f36:	03 94       	inc	r0
     f38:	00 0c       	add	r0, r0
     f3a:	11 f4       	brne	.+4      	; 0xf40 <__fp_round+0xc>
     f3c:	88 23       	and	r24, r24
     f3e:	52 f0       	brmi	.+20     	; 0xf54 <__fp_round+0x20>
     f40:	bb 0f       	add	r27, r27
     f42:	40 f4       	brcc	.+16     	; 0xf54 <__fp_round+0x20>
     f44:	bf 2b       	or	r27, r31
     f46:	11 f4       	brne	.+4      	; 0xf4c <__fp_round+0x18>
     f48:	60 ff       	sbrs	r22, 0
     f4a:	04 c0       	rjmp	.+8      	; 0xf54 <__fp_round+0x20>
     f4c:	6f 5f       	subi	r22, 0xFF	; 255
     f4e:	7f 4f       	sbci	r23, 0xFF	; 255
     f50:	8f 4f       	sbci	r24, 0xFF	; 255
     f52:	9f 4f       	sbci	r25, 0xFF	; 255
     f54:	08 95       	ret

00000f56 <__fp_sinus>:
     f56:	ef 93       	push	r30
     f58:	e0 ff       	sbrs	r30, 0
     f5a:	07 c0       	rjmp	.+14     	; 0xf6a <__fp_sinus+0x14>
     f5c:	a2 ea       	ldi	r26, 0xA2	; 162
     f5e:	2a ed       	ldi	r18, 0xDA	; 218
     f60:	3f e0       	ldi	r19, 0x0F	; 15
     f62:	49 ec       	ldi	r20, 0xC9	; 201
     f64:	5f eb       	ldi	r21, 0xBF	; 191
     f66:	0e 94 92 05 	call	0xb24	; 0xb24 <__addsf3x>
     f6a:	0e 94 9a 07 	call	0xf34	; 0xf34 <__fp_round>
     f6e:	0f 90       	pop	r0
     f70:	03 94       	inc	r0
     f72:	01 fc       	sbrc	r0, 1
     f74:	90 58       	subi	r25, 0x80	; 128
     f76:	ec ed       	ldi	r30, 0xDC	; 220
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	0c 94 ba 08 	jmp	0x1174	; 0x1174 <__fp_powsodd>

00000f7e <__fp_split3>:
     f7e:	57 fd       	sbrc	r21, 7
     f80:	90 58       	subi	r25, 0x80	; 128
     f82:	44 0f       	add	r20, r20
     f84:	55 1f       	adc	r21, r21
     f86:	59 f0       	breq	.+22     	; 0xf9e <__fp_splitA+0x10>
     f88:	5f 3f       	cpi	r21, 0xFF	; 255
     f8a:	71 f0       	breq	.+28     	; 0xfa8 <__fp_splitA+0x1a>
     f8c:	47 95       	ror	r20

00000f8e <__fp_splitA>:
     f8e:	88 0f       	add	r24, r24
     f90:	97 fb       	bst	r25, 7
     f92:	99 1f       	adc	r25, r25
     f94:	61 f0       	breq	.+24     	; 0xfae <__fp_splitA+0x20>
     f96:	9f 3f       	cpi	r25, 0xFF	; 255
     f98:	79 f0       	breq	.+30     	; 0xfb8 <__fp_splitA+0x2a>
     f9a:	87 95       	ror	r24
     f9c:	08 95       	ret
     f9e:	12 16       	cp	r1, r18
     fa0:	13 06       	cpc	r1, r19
     fa2:	14 06       	cpc	r1, r20
     fa4:	55 1f       	adc	r21, r21
     fa6:	f2 cf       	rjmp	.-28     	; 0xf8c <__fp_split3+0xe>
     fa8:	46 95       	lsr	r20
     faa:	f1 df       	rcall	.-30     	; 0xf8e <__fp_splitA>
     fac:	08 c0       	rjmp	.+16     	; 0xfbe <__fp_splitA+0x30>
     fae:	16 16       	cp	r1, r22
     fb0:	17 06       	cpc	r1, r23
     fb2:	18 06       	cpc	r1, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	f1 cf       	rjmp	.-30     	; 0xf9a <__fp_splitA+0xc>
     fb8:	86 95       	lsr	r24
     fba:	71 05       	cpc	r23, r1
     fbc:	61 05       	cpc	r22, r1
     fbe:	08 94       	sec
     fc0:	08 95       	ret

00000fc2 <__fp_trunc>:
     fc2:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__fp_splitA>
     fc6:	a0 f0       	brcs	.+40     	; 0xff0 <__fp_trunc+0x2e>
     fc8:	be e7       	ldi	r27, 0x7E	; 126
     fca:	b9 17       	cp	r27, r25
     fcc:	88 f4       	brcc	.+34     	; 0xff0 <__fp_trunc+0x2e>
     fce:	bb 27       	eor	r27, r27
     fd0:	9f 38       	cpi	r25, 0x8F	; 143
     fd2:	60 f4       	brcc	.+24     	; 0xfec <__fp_trunc+0x2a>
     fd4:	16 16       	cp	r1, r22
     fd6:	b1 1d       	adc	r27, r1
     fd8:	67 2f       	mov	r22, r23
     fda:	78 2f       	mov	r23, r24
     fdc:	88 27       	eor	r24, r24
     fde:	98 5f       	subi	r25, 0xF8	; 248
     fe0:	f7 cf       	rjmp	.-18     	; 0xfd0 <__fp_trunc+0xe>
     fe2:	86 95       	lsr	r24
     fe4:	77 95       	ror	r23
     fe6:	67 95       	ror	r22
     fe8:	b1 1d       	adc	r27, r1
     fea:	93 95       	inc	r25
     fec:	96 39       	cpi	r25, 0x96	; 150
     fee:	c8 f3       	brcs	.-14     	; 0xfe2 <__fp_trunc+0x20>
     ff0:	08 95       	ret

00000ff2 <__fp_zero>:
     ff2:	e8 94       	clt

00000ff4 <__fp_szero>:
     ff4:	bb 27       	eor	r27, r27
     ff6:	66 27       	eor	r22, r22
     ff8:	77 27       	eor	r23, r23
     ffa:	cb 01       	movw	r24, r22
     ffc:	97 f9       	bld	r25, 7
     ffe:	08 95       	ret

00001000 <__mulsf3>:
    1000:	0e 94 13 08 	call	0x1026	; 0x1026 <__mulsf3x>
    1004:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__fp_round>
    1008:	0e 94 61 07 	call	0xec2	; 0xec2 <__fp_pscA>
    100c:	38 f0       	brcs	.+14     	; 0x101c <__mulsf3+0x1c>
    100e:	0e 94 68 07 	call	0xed0	; 0xed0 <__fp_pscB>
    1012:	20 f0       	brcs	.+8      	; 0x101c <__mulsf3+0x1c>
    1014:	95 23       	and	r25, r21
    1016:	11 f0       	breq	.+4      	; 0x101c <__mulsf3+0x1c>
    1018:	0c 94 08 07 	jmp	0xe10	; 0xe10 <__fp_inf>
    101c:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <__fp_nan>
    1020:	11 24       	eor	r1, r1
    1022:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__fp_szero>

00001026 <__mulsf3x>:
    1026:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__fp_split3>
    102a:	70 f3       	brcs	.-36     	; 0x1008 <__mulsf3+0x8>

0000102c <__mulsf3_pse>:
    102c:	95 9f       	mul	r25, r21
    102e:	c1 f3       	breq	.-16     	; 0x1020 <__mulsf3+0x20>
    1030:	95 0f       	add	r25, r21
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	55 1f       	adc	r21, r21
    1036:	62 9f       	mul	r22, r18
    1038:	f0 01       	movw	r30, r0
    103a:	72 9f       	mul	r23, r18
    103c:	bb 27       	eor	r27, r27
    103e:	f0 0d       	add	r31, r0
    1040:	b1 1d       	adc	r27, r1
    1042:	63 9f       	mul	r22, r19
    1044:	aa 27       	eor	r26, r26
    1046:	f0 0d       	add	r31, r0
    1048:	b1 1d       	adc	r27, r1
    104a:	aa 1f       	adc	r26, r26
    104c:	64 9f       	mul	r22, r20
    104e:	66 27       	eor	r22, r22
    1050:	b0 0d       	add	r27, r0
    1052:	a1 1d       	adc	r26, r1
    1054:	66 1f       	adc	r22, r22
    1056:	82 9f       	mul	r24, r18
    1058:	22 27       	eor	r18, r18
    105a:	b0 0d       	add	r27, r0
    105c:	a1 1d       	adc	r26, r1
    105e:	62 1f       	adc	r22, r18
    1060:	73 9f       	mul	r23, r19
    1062:	b0 0d       	add	r27, r0
    1064:	a1 1d       	adc	r26, r1
    1066:	62 1f       	adc	r22, r18
    1068:	83 9f       	mul	r24, r19
    106a:	a0 0d       	add	r26, r0
    106c:	61 1d       	adc	r22, r1
    106e:	22 1f       	adc	r18, r18
    1070:	74 9f       	mul	r23, r20
    1072:	33 27       	eor	r19, r19
    1074:	a0 0d       	add	r26, r0
    1076:	61 1d       	adc	r22, r1
    1078:	23 1f       	adc	r18, r19
    107a:	84 9f       	mul	r24, r20
    107c:	60 0d       	add	r22, r0
    107e:	21 1d       	adc	r18, r1
    1080:	82 2f       	mov	r24, r18
    1082:	76 2f       	mov	r23, r22
    1084:	6a 2f       	mov	r22, r26
    1086:	11 24       	eor	r1, r1
    1088:	9f 57       	subi	r25, 0x7F	; 127
    108a:	50 40       	sbci	r21, 0x00	; 0
    108c:	9a f0       	brmi	.+38     	; 0x10b4 <__mulsf3_pse+0x88>
    108e:	f1 f0       	breq	.+60     	; 0x10cc <__mulsf3_pse+0xa0>
    1090:	88 23       	and	r24, r24
    1092:	4a f0       	brmi	.+18     	; 0x10a6 <__mulsf3_pse+0x7a>
    1094:	ee 0f       	add	r30, r30
    1096:	ff 1f       	adc	r31, r31
    1098:	bb 1f       	adc	r27, r27
    109a:	66 1f       	adc	r22, r22
    109c:	77 1f       	adc	r23, r23
    109e:	88 1f       	adc	r24, r24
    10a0:	91 50       	subi	r25, 0x01	; 1
    10a2:	50 40       	sbci	r21, 0x00	; 0
    10a4:	a9 f7       	brne	.-22     	; 0x1090 <__mulsf3_pse+0x64>
    10a6:	9e 3f       	cpi	r25, 0xFE	; 254
    10a8:	51 05       	cpc	r21, r1
    10aa:	80 f0       	brcs	.+32     	; 0x10cc <__mulsf3_pse+0xa0>
    10ac:	0c 94 08 07 	jmp	0xe10	; 0xe10 <__fp_inf>
    10b0:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <__fp_szero>
    10b4:	5f 3f       	cpi	r21, 0xFF	; 255
    10b6:	e4 f3       	brlt	.-8      	; 0x10b0 <__mulsf3_pse+0x84>
    10b8:	98 3e       	cpi	r25, 0xE8	; 232
    10ba:	d4 f3       	brlt	.-12     	; 0x10b0 <__mulsf3_pse+0x84>
    10bc:	86 95       	lsr	r24
    10be:	77 95       	ror	r23
    10c0:	67 95       	ror	r22
    10c2:	b7 95       	ror	r27
    10c4:	f7 95       	ror	r31
    10c6:	e7 95       	ror	r30
    10c8:	9f 5f       	subi	r25, 0xFF	; 255
    10ca:	c1 f7       	brne	.-16     	; 0x10bc <__mulsf3_pse+0x90>
    10cc:	fe 2b       	or	r31, r30
    10ce:	88 0f       	add	r24, r24
    10d0:	91 1d       	adc	r25, r1
    10d2:	96 95       	lsr	r25
    10d4:	87 95       	ror	r24
    10d6:	97 f9       	bld	r25, 7
    10d8:	08 95       	ret
    10da:	19 f4       	brne	.+6      	; 0x10e2 <__mulsf3_pse+0xb6>
    10dc:	16 f4       	brtc	.+4      	; 0x10e2 <__mulsf3_pse+0xb6>
    10de:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <__fp_nan>
    10e2:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__fp_mpack>

000010e6 <sqrt>:
    10e6:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__fp_splitA>
    10ea:	b8 f3       	brcs	.-18     	; 0x10da <__mulsf3_pse+0xae>
    10ec:	99 23       	and	r25, r25
    10ee:	c9 f3       	breq	.-14     	; 0x10e2 <__mulsf3_pse+0xb6>
    10f0:	b6 f3       	brts	.-20     	; 0x10de <__mulsf3_pse+0xb2>
    10f2:	9f 57       	subi	r25, 0x7F	; 127
    10f4:	55 0b       	sbc	r21, r21
    10f6:	87 ff       	sbrs	r24, 7
    10f8:	0e 94 b3 08 	call	0x1166	; 0x1166 <__fp_norm2>
    10fc:	00 24       	eor	r0, r0
    10fe:	a0 e6       	ldi	r26, 0x60	; 96
    1100:	40 ea       	ldi	r20, 0xA0	; 160
    1102:	90 01       	movw	r18, r0
    1104:	80 58       	subi	r24, 0x80	; 128
    1106:	56 95       	lsr	r21
    1108:	97 95       	ror	r25
    110a:	28 f4       	brcc	.+10     	; 0x1116 <sqrt+0x30>
    110c:	80 5c       	subi	r24, 0xC0	; 192
    110e:	66 0f       	add	r22, r22
    1110:	77 1f       	adc	r23, r23
    1112:	88 1f       	adc	r24, r24
    1114:	20 f0       	brcs	.+8      	; 0x111e <sqrt+0x38>
    1116:	26 17       	cp	r18, r22
    1118:	37 07       	cpc	r19, r23
    111a:	48 07       	cpc	r20, r24
    111c:	30 f4       	brcc	.+12     	; 0x112a <sqrt+0x44>
    111e:	62 1b       	sub	r22, r18
    1120:	73 0b       	sbc	r23, r19
    1122:	84 0b       	sbc	r24, r20
    1124:	20 29       	or	r18, r0
    1126:	31 29       	or	r19, r1
    1128:	4a 2b       	or	r20, r26
    112a:	a6 95       	lsr	r26
    112c:	17 94       	ror	r1
    112e:	07 94       	ror	r0
    1130:	20 25       	eor	r18, r0
    1132:	31 25       	eor	r19, r1
    1134:	4a 27       	eor	r20, r26
    1136:	58 f7       	brcc	.-42     	; 0x110e <sqrt+0x28>
    1138:	66 0f       	add	r22, r22
    113a:	77 1f       	adc	r23, r23
    113c:	88 1f       	adc	r24, r24
    113e:	20 f0       	brcs	.+8      	; 0x1148 <sqrt+0x62>
    1140:	26 17       	cp	r18, r22
    1142:	37 07       	cpc	r19, r23
    1144:	48 07       	cpc	r20, r24
    1146:	30 f4       	brcc	.+12     	; 0x1154 <sqrt+0x6e>
    1148:	62 0b       	sbc	r22, r18
    114a:	73 0b       	sbc	r23, r19
    114c:	84 0b       	sbc	r24, r20
    114e:	20 0d       	add	r18, r0
    1150:	31 1d       	adc	r19, r1
    1152:	41 1d       	adc	r20, r1
    1154:	a0 95       	com	r26
    1156:	81 f7       	brne	.-32     	; 0x1138 <sqrt+0x52>
    1158:	b9 01       	movw	r22, r18
    115a:	84 2f       	mov	r24, r20
    115c:	91 58       	subi	r25, 0x81	; 129
    115e:	88 0f       	add	r24, r24
    1160:	96 95       	lsr	r25
    1162:	87 95       	ror	r24
    1164:	08 95       	ret

00001166 <__fp_norm2>:
    1166:	91 50       	subi	r25, 0x01	; 1
    1168:	50 40       	sbci	r21, 0x00	; 0
    116a:	66 0f       	add	r22, r22
    116c:	77 1f       	adc	r23, r23
    116e:	88 1f       	adc	r24, r24
    1170:	d2 f7       	brpl	.-12     	; 0x1166 <__fp_norm2>
    1172:	08 95       	ret

00001174 <__fp_powsodd>:
    1174:	9f 93       	push	r25
    1176:	8f 93       	push	r24
    1178:	7f 93       	push	r23
    117a:	6f 93       	push	r22
    117c:	ff 93       	push	r31
    117e:	ef 93       	push	r30
    1180:	9b 01       	movw	r18, r22
    1182:	ac 01       	movw	r20, r24
    1184:	0e 94 00 08 	call	0x1000	; 0x1000 <__mulsf3>
    1188:	ef 91       	pop	r30
    118a:	ff 91       	pop	r31
    118c:	0e 94 3a 07 	call	0xe74	; 0xe74 <__fp_powser>
    1190:	2f 91       	pop	r18
    1192:	3f 91       	pop	r19
    1194:	4f 91       	pop	r20
    1196:	5f 91       	pop	r21
    1198:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__mulsf3>

0000119c <__divmodhi4>:
    119c:	97 fb       	bst	r25, 7
    119e:	07 2e       	mov	r0, r23
    11a0:	16 f4       	brtc	.+4      	; 0x11a6 <__divmodhi4+0xa>
    11a2:	00 94       	com	r0
    11a4:	07 d0       	rcall	.+14     	; 0x11b4 <__divmodhi4_neg1>
    11a6:	77 fd       	sbrc	r23, 7
    11a8:	09 d0       	rcall	.+18     	; 0x11bc <__divmodhi4_neg2>
    11aa:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__udivmodhi4>
    11ae:	07 fc       	sbrc	r0, 7
    11b0:	05 d0       	rcall	.+10     	; 0x11bc <__divmodhi4_neg2>
    11b2:	3e f4       	brtc	.+14     	; 0x11c2 <__divmodhi4_exit>

000011b4 <__divmodhi4_neg1>:
    11b4:	90 95       	com	r25
    11b6:	81 95       	neg	r24
    11b8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ba:	08 95       	ret

000011bc <__divmodhi4_neg2>:
    11bc:	70 95       	com	r23
    11be:	61 95       	neg	r22
    11c0:	7f 4f       	sbci	r23, 0xFF	; 255

000011c2 <__divmodhi4_exit>:
    11c2:	08 95       	ret

000011c4 <__udivmodhi4>:
    11c4:	aa 1b       	sub	r26, r26
    11c6:	bb 1b       	sub	r27, r27
    11c8:	51 e1       	ldi	r21, 0x11	; 17
    11ca:	07 c0       	rjmp	.+14     	; 0x11da <__udivmodhi4_ep>

000011cc <__udivmodhi4_loop>:
    11cc:	aa 1f       	adc	r26, r26
    11ce:	bb 1f       	adc	r27, r27
    11d0:	a6 17       	cp	r26, r22
    11d2:	b7 07       	cpc	r27, r23
    11d4:	10 f0       	brcs	.+4      	; 0x11da <__udivmodhi4_ep>
    11d6:	a6 1b       	sub	r26, r22
    11d8:	b7 0b       	sbc	r27, r23

000011da <__udivmodhi4_ep>:
    11da:	88 1f       	adc	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	5a 95       	dec	r21
    11e0:	a9 f7       	brne	.-22     	; 0x11cc <__udivmodhi4_loop>
    11e2:	80 95       	com	r24
    11e4:	90 95       	com	r25
    11e6:	bc 01       	movw	r22, r24
    11e8:	cd 01       	movw	r24, r26
    11ea:	08 95       	ret

000011ec <_exit>:
    11ec:	f8 94       	cli

000011ee <__stop_program>:
    11ee:	ff cf       	rjmp	.-2      	; 0x11ee <__stop_program>
