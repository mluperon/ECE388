
Main Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000be  00800100  00001420  000014b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001420  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  008001be  008001be  00001572  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001572  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a1e  00000000  00000000  000016a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bab  00000000  00000000  000030c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a65  00000000  00000000  00003c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  000046d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000736  00000000  00000000  00004984  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b3e  00000000  00000000  000050ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00005bf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__ctors_end>
       4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      10:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__vector_4>
      14:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      18:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      1c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      20:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      24:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      28:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      2c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      30:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      34:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      38:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      3c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      40:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      44:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      48:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      4c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      50:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      54:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__vector_21>
      58:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      5c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      60:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      64:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      68:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      6c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      70:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      74:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      78:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      7c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      80:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      84:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      88:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      8c:	0c 94 46 01 	jmp	0x28c	; 0x28c <__vector_35>
      90:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      94:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      98:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      9c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      ac:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      b0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      b4:	07 2c       	mov	r0, r7
      b6:	7a a5       	ldd	r23, Y+42	; 0x2a
      b8:	ba 6c       	ori	r27, 0xCA	; 202
      ba:	c5 90       	lpm	r12, Z+
      bc:	da 3b       	cpi	r29, 0xBA	; 186
      be:	93 65       	ori	r25, 0x53	; 83
      c0:	fc 8b       	std	Y+20, r31	; 0x14
      c2:	bc 53       	subi	r27, 0x3C	; 60
      c4:	f8 10       	cpse	r15, r8
      c6:	fd 3c       	cpi	r31, 0xCD	; 205
      c8:	56 92       	lac	Z, r5
      ca:	83 4d       	sbci	r24, 0xD3	; 211
      cc:	bd 87       	std	Y+13, r27	; 0x0d
      ce:	9d 3a       	cpi	r25, 0xAD	; 173
      d0:	b6 3d       	cpi	r27, 0xD6	; 214
      d2:	cb c9       	rjmp	.-3178   	; 0xfffff46a <__eeprom_end+0xff7ef46a>
      d4:	bf 5b       	subi	r27, 0xBF	; 191
      d6:	be 73       	andi	r27, 0x3E	; 62
      d8:	da 0f       	add	r29, r26
      da:	c9 3f       	cpi	r28, 0xF9	; 249
      dc:	05 a8       	ldd	r0, Z+53	; 0x35
      de:	4c cd       	rjmp	.-1384   	; 0xfffffb78 <__eeprom_end+0xff7efb78>
      e0:	b2 d4       	rcall	.+2404   	; 0xa46 <__stack+0x147>
      e2:	4e b9       	out	0x0e, r20	; 14
      e4:	38 36       	cpi	r19, 0x68	; 104
      e6:	a9 02       	muls	r26, r25
      e8:	0c 50       	subi	r16, 0x0C	; 12
      ea:	b9 91       	ld	r27, Y+
      ec:	86 88       	ldd	r8, Z+22	; 0x16
      ee:	08 3c       	cpi	r16, 0xC8	; 200
      f0:	a6 aa       	std	Z+54, r10	; 0x36
      f2:	aa 2a       	or	r10, r26
      f4:	be 00       	.word	0x00be	; ????
      f6:	00 00       	nop
      f8:	80 3f       	cpi	r24, 0xF0	; 240

000000fa <__ctors_end>:
      fa:	11 24       	eor	r1, r1
      fc:	1f be       	out	0x3f, r1	; 63
      fe:	cf ef       	ldi	r28, 0xFF	; 255
     100:	d8 e0       	ldi	r29, 0x08	; 8
     102:	de bf       	out	0x3e, r29	; 62
     104:	cd bf       	out	0x3d, r28	; 61

00000106 <__do_copy_data>:
     106:	11 e0       	ldi	r17, 0x01	; 1
     108:	a0 e0       	ldi	r26, 0x00	; 0
     10a:	b1 e0       	ldi	r27, 0x01	; 1
     10c:	e0 e2       	ldi	r30, 0x20	; 32
     10e:	f4 e1       	ldi	r31, 0x14	; 20
     110:	02 c0       	rjmp	.+4      	; 0x116 <__do_copy_data+0x10>
     112:	05 90       	lpm	r0, Z+
     114:	0d 92       	st	X+, r0
     116:	ae 3b       	cpi	r26, 0xBE	; 190
     118:	b1 07       	cpc	r27, r17
     11a:	d9 f7       	brne	.-10     	; 0x112 <__do_copy_data+0xc>

0000011c <__do_clear_bss>:
     11c:	22 e0       	ldi	r18, 0x02	; 2
     11e:	ae eb       	ldi	r26, 0xBE	; 190
     120:	b1 e0       	ldi	r27, 0x01	; 1
     122:	01 c0       	rjmp	.+2      	; 0x126 <.do_clear_bss_start>

00000124 <.do_clear_bss_loop>:
     124:	1d 92       	st	X+, r1

00000126 <.do_clear_bss_start>:
     126:	a4 30       	cpi	r26, 0x04	; 4
     128:	b2 07       	cpc	r27, r18
     12a:	e1 f7       	brne	.-8      	; 0x124 <.do_clear_bss_loop>
     12c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <main>
     130:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <_exit>

00000134 <__bad_interrupt>:
     134:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000138 <lcdCommand>:

	while(*StringPtr != 0x00){
		USART_send(*StringPtr);
	StringPtr++;}

}
     138:	8b b9       	out	0x0b, r24	; 11
     13a:	70 98       	cbi	0x0e, 0	; 14
     13c:	71 98       	cbi	0x0e, 1	; 14
     13e:	72 9a       	sbi	0x0e, 2	; 14
     140:	85 e0       	ldi	r24, 0x05	; 5
     142:	8a 95       	dec	r24
     144:	f1 f7       	brne	.-4      	; 0x142 <lcdCommand+0xa>
     146:	00 00       	nop
     148:	72 98       	cbi	0x0e, 2	; 14
     14a:	8f e8       	ldi	r24, 0x8F	; 143
     14c:	91 e0       	ldi	r25, 0x01	; 1
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <lcdCommand+0x16>
     152:	00 c0       	rjmp	.+0      	; 0x154 <lcdCommand+0x1c>
     154:	00 00       	nop
     156:	08 95       	ret

00000158 <lcdData>:
     158:	8b b9       	out	0x0b, r24	; 11
     15a:	70 9a       	sbi	0x0e, 0	; 14
     15c:	71 98       	cbi	0x0e, 1	; 14
     15e:	72 9a       	sbi	0x0e, 2	; 14
     160:	85 e0       	ldi	r24, 0x05	; 5
     162:	8a 95       	dec	r24
     164:	f1 f7       	brne	.-4      	; 0x162 <lcdData+0xa>
     166:	00 00       	nop
     168:	72 98       	cbi	0x0e, 2	; 14
     16a:	8f e8       	ldi	r24, 0x8F	; 143
     16c:	91 e0       	ldi	r25, 0x01	; 1
     16e:	01 97       	sbiw	r24, 0x01	; 1
     170:	f1 f7       	brne	.-4      	; 0x16e <lcdData+0x16>
     172:	00 c0       	rjmp	.+0      	; 0x174 <lcdData+0x1c>
     174:	00 00       	nop
     176:	08 95       	ret

00000178 <lcd_init>:
     178:	8f ef       	ldi	r24, 0xFF	; 255
     17a:	8a b9       	out	0x0a, r24	; 10
     17c:	8d b9       	out	0x0d, r24	; 13
     17e:	72 98       	cbi	0x0e, 2	; 14
     180:	8f e3       	ldi	r24, 0x3F	; 63
     182:	9f e1       	ldi	r25, 0x1F	; 31
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	f1 f7       	brne	.-4      	; 0x184 <lcd_init+0xc>
     188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_init+0x12>
     18a:	00 00       	nop
     18c:	88 e3       	ldi	r24, 0x38	; 56
     18e:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     192:	8c e0       	ldi	r24, 0x0C	; 12
     194:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     19e:	8f e3       	ldi	r24, 0x3F	; 63
     1a0:	9f e1       	ldi	r25, 0x1F	; 31
     1a2:	01 97       	sbiw	r24, 0x01	; 1
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x2a>
     1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x30>
     1a8:	00 00       	nop
     1aa:	86 e0       	ldi	r24, 0x06	; 6
     1ac:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     1b0:	08 95       	ret

000001b2 <lcd_gotoxy>:
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <lcd_gotoxy+0x6>
     1b8:	00 d0       	rcall	.+0      	; 0x1ba <lcd_gotoxy+0x8>
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
     1be:	90 e8       	ldi	r25, 0x80	; 128
     1c0:	99 83       	std	Y+1, r25	; 0x01
     1c2:	90 ec       	ldi	r25, 0xC0	; 192
     1c4:	9a 83       	std	Y+2, r25	; 0x02
     1c6:	94 e9       	ldi	r25, 0x94	; 148
     1c8:	9b 83       	std	Y+3, r25	; 0x03
     1ca:	94 ed       	ldi	r25, 0xD4	; 212
     1cc:	9c 83       	std	Y+4, r25	; 0x04
     1ce:	fe 01       	movw	r30, r28
     1d0:	e6 0f       	add	r30, r22
     1d2:	f1 1d       	adc	r31, r1
     1d4:	81 50       	subi	r24, 0x01	; 1
     1d6:	90 81       	ld	r25, Z
     1d8:	89 0f       	add	r24, r25
     1da:	0e 94 9c 00 	call	0x138	; 0x138 <lcdCommand>
     1de:	8f e8       	ldi	r24, 0x8F	; 143
     1e0:	91 e0       	ldi	r25, 0x01	; 1
     1e2:	01 97       	sbiw	r24, 0x01	; 1
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_gotoxy+0x30>
     1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <lcd_gotoxy+0x36>
     1e8:	00 00       	nop
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	0f 90       	pop	r0
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <lcd_print>:
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	cf 93       	push	r28
     1fe:	fc 01       	movw	r30, r24
     200:	80 81       	ld	r24, Z
     202:	88 23       	and	r24, r24
     204:	59 f0       	breq	.+22     	; 0x21c <lcd_print+0x24>
     206:	8f 01       	movw	r16, r30
     208:	c0 e0       	ldi	r28, 0x00	; 0
     20a:	0e 94 ac 00 	call	0x158	; 0x158 <lcdData>
     20e:	cf 5f       	subi	r28, 0xFF	; 255
     210:	f8 01       	movw	r30, r16
     212:	ec 0f       	add	r30, r28
     214:	f1 1d       	adc	r31, r1
     216:	80 81       	ld	r24, Z
     218:	81 11       	cpse	r24, r1
     21a:	f7 cf       	rjmp	.-18     	; 0x20a <lcd_print+0x12>
     21c:	cf 91       	pop	r28
     21e:	1f 91       	pop	r17
     220:	0f 91       	pop	r16
     222:	08 95       	ret

00000224 <ftoa>:
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	cd b7       	in	r28, 0x3d	; 61
     22a:	de b7       	in	r29, 0x3e	; 62
     22c:	2b 97       	sbiw	r28, 0x0b	; 11
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	f8 94       	cli
     232:	de bf       	out	0x3e, r29	; 62
     234:	0f be       	out	0x3f, r0	; 63
     236:	cd bf       	out	0x3d, r28	; 61
     238:	9b 01       	movw	r18, r22
     23a:	4b e0       	ldi	r20, 0x0B	; 11
     23c:	ea e0       	ldi	r30, 0x0A	; 10
     23e:	f1 e0       	ldi	r31, 0x01	; 1
     240:	de 01       	movw	r26, r28
     242:	11 96       	adiw	r26, 0x01	; 1
     244:	01 90       	ld	r0, Z+
     246:	0d 92       	st	X+, r0
     248:	4a 95       	dec	r20
     24a:	e1 f7       	brne	.-8      	; 0x244 <ftoa+0x20>
     24c:	6a e0       	ldi	r22, 0x0A	; 10
     24e:	70 e0       	ldi	r23, 0x00	; 0
     250:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__divmodhi4>
     254:	e1 e0       	ldi	r30, 0x01	; 1
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	ec 0f       	add	r30, r28
     25a:	fd 1f       	adc	r31, r29
     25c:	e6 0f       	add	r30, r22
     25e:	f7 1f       	adc	r31, r23
     260:	40 81       	ld	r20, Z
     262:	f9 01       	movw	r30, r18
     264:	40 83       	st	Z, r20
     266:	e1 e0       	ldi	r30, 0x01	; 1
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	ec 0f       	add	r30, r28
     26c:	fd 1f       	adc	r31, r29
     26e:	e8 0f       	add	r30, r24
     270:	f9 1f       	adc	r31, r25
     272:	80 81       	ld	r24, Z
     274:	f9 01       	movw	r30, r18
     276:	81 83       	std	Z+1, r24	; 0x01
     278:	12 82       	std	Z+2, r1	; 0x02
     27a:	2b 96       	adiw	r28, 0x0b	; 11
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	f8 94       	cli
     280:	de bf       	out	0x3e, r29	; 62
     282:	0f be       	out	0x3f, r0	; 63
     284:	cd bf       	out	0x3d, r28	; 61
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	08 95       	ret

0000028c <__vector_35>:



// Timer used to track seconds for startup routine of speed controller
ISR (TIMER3_OVF_vect)
{
     28c:	1f 92       	push	r1
     28e:	0f 92       	push	r0
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	0f 92       	push	r0
     294:	11 24       	eor	r1, r1
     296:	8f 93       	push	r24
     298:	9f 93       	push	r25
	TCNT3 = -15625; // reset the 1sec timer value 
     29a:	87 ef       	ldi	r24, 0xF7	; 247
     29c:	92 ec       	ldi	r25, 0xC2	; 194
     29e:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
     2a2:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
	overflowCount++;
     2a6:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <__data_end>
     2aa:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <__data_end+0x1>
     2ae:	01 96       	adiw	r24, 0x01	; 1
     2b0:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <__data_end+0x1>
     2b4:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <__data_end>
	if (overflowCount == 5) // wait  seconds
     2b8:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <__data_end>
     2bc:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <__data_end+0x1>
     2c0:	05 97       	sbiw	r24, 0x05	; 5
     2c2:	91 f4       	brne	.+36     	; 0x2e8 <__vector_35+0x5c>
	{
		OCR1A=38000-1;	// adjust pulse width of waveform being generated from 2ms to 1ms
     2c4:	8f e6       	ldi	r24, 0x6F	; 111
     2c6:	94 e9       	ldi	r25, 0x94	; 148
     2c8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     2cc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
		TCNT3 = 0; // set counter to 0
     2d0:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
     2d4:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
		TIMSK3 = (0 << TOIE3); // disable timer
     2d8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
		setupFlag = 1;
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <setupFlag+0x1>
     2e4:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <setupFlag>
	}
}
     2e8:	9f 91       	pop	r25
     2ea:	8f 91       	pop	r24
     2ec:	0f 90       	pop	r0
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	0f 90       	pop	r0
     2f2:	1f 90       	pop	r1
     2f4:	18 95       	reti

000002f6 <__vector_21>:

ISR(ADC_vect)
{
     2f6:	1f 92       	push	r1
     2f8:	0f 92       	push	r0
     2fa:	0f b6       	in	r0, 0x3f	; 63
     2fc:	0f 92       	push	r0
     2fe:	11 24       	eor	r1, r1
     300:	8f 93       	push	r24
     302:	9f 93       	push	r25
     304:	ef 93       	push	r30
     306:	ff 93       	push	r31
	potVal = ADC;
     308:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     30c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     310:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <potVal+0x1>
     314:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <potVal>
	ADCSRA |= (1<<ADSC);
     318:	ea e7       	ldi	r30, 0x7A	; 122
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	80 81       	ld	r24, Z
     31e:	80 64       	ori	r24, 0x40	; 64
     320:	80 83       	st	Z, r24
}
     322:	ff 91       	pop	r31
     324:	ef 91       	pop	r30
     326:	9f 91       	pop	r25
     328:	8f 91       	pop	r24
     32a:	0f 90       	pop	r0
     32c:	0f be       	out	0x3f, r0	; 63
     32e:	0f 90       	pop	r0
     330:	1f 90       	pop	r1
     332:	18 95       	reti

00000334 <peripheralSetup>:

/************************************************* STARTUP ROUTINE **********************************************************************************/

void peripheralSetup()
{
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
	// Set up ADC on PortC(3)
	DDRC &= ~(1<<3); // Set PC3 as input
     338:	3b 98       	cbi	0x07, 3	; 7
	PORTC |= (1 << 3);
     33a:	43 9a       	sbi	0x08, 3	; 8
	
	// Set registers for ADC on PortC3
	ADMUX = (0b01<<REFS0|(0<<ADLAR)|(0b0011<<MUX0));
     33c:	83 e4       	ldi	r24, 0x43	; 67
     33e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = (1<<ADEN)|(0<<ADSC)|(0<<ADATE)|(0<<ADIF)|(1<<ADIE)|(0b111<<ADPS0);
     342:	8f e8       	ldi	r24, 0x8F	; 143
     344:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	ADCSRB = 0b000<<ADTS0;
     348:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
	
	
	PORTE &= ~(1<<3); // Ensure 12V is OFF for speed controller 
     34c:	73 98       	cbi	0x0e, 3	; 14
	DDRE &= ~(1<<3);  // Ensure 12V is OFF for speed controller
     34e:	6b 98       	cbi	0x0d, 3	; 13
	
	//************************************** PIN CHANGE INTERRUPT SETUP *************************************//
	DDRC &= ~(_BV(2) | _BV(1) | _BV(4)); // sets PORTC 1, 2, and 4 to input (input from rotary encoder)
     350:	87 b1       	in	r24, 0x07	; 7
     352:	89 7e       	andi	r24, 0xE9	; 233
     354:	87 b9       	out	0x07, r24	; 7
	// 4 = SW signal (button press)
	
	
	//********************************************** PWM SETUP **********************************************//
	// Set up PWM on PortB(1)
	DDRB |= (1<<1); // set PINB 1 to output
     356:	21 9a       	sbi	0x04, 1	; 4
	PORTB = ~(1<<1); // Ensure PINB 1 is not outputting voltage
     358:	8d ef       	ldi	r24, 0xFD	; 253
     35a:	85 b9       	out	0x05, r24	; 5
	TCCR1A= (0b11 << COM1A0) | ( 0b00 << COM1B0) | (0b10 << WGM10); // set up PWM with pre-scalar
     35c:	82 ec       	ldi	r24, 0xC2	; 194
     35e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B= (0b11 << WGM12) | (0b010<< CS10);
     362:	8a e1       	ldi	r24, 0x1A	; 26
     364:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	ICR1= 40000-1; // (20MS /8 PRESCALAR)
     368:	8f e3       	ldi	r24, 0x3F	; 63
     36a:	9c e9       	ldi	r25, 0x9C	; 156
     36c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
     370:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	OCR1A=36000-1; // 1000->4000 0.5ms to 2ms *** adjust ***
     374:	8f e9       	ldi	r24, 0x9F	; 159
     376:	9c e8       	ldi	r25, 0x8C	; 140
     378:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     37c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	
	// Set up 4 second timer for startup
	TCCR3A = 0; //(0b00 << COM3A0) | (0b00 << COM3B0)
     380:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
	TCCR3B = (0 << ICNC3) | (0 << ICES3) | (0b00 << WGM32) | (0b101 << CS30);
     384:	85 e0       	ldi	r24, 0x05	; 5
     386:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__DATA_REGION_ORIGIN__+0x31>
	TIMSK3 = (0 << TOIE3); // Ensure timer 3 is disabled
     38a:	c1 e7       	ldi	r28, 0x71	; 113
     38c:	d0 e0       	ldi	r29, 0x00	; 0
     38e:	18 82       	st	Y, r1
	TCNT3 = -15625; // One second timer value
     390:	87 ef       	ldi	r24, 0xF7	; 247
     392:	92 ec       	ldi	r25, 0xC2	; 194
     394:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
     398:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
	
	// Enable global interrupts
	sei();
     39c:	78 94       	sei
	
	// Set up LCD and print starting message state
	lcd_init(); // initialize the LCD according to Dr. Viall's 263 code
     39e:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_init>
	lcd_gotoxy(1,1); // go to row 1 column 1 of LCD
     3a2:	61 e0       	ldi	r22, 0x01	; 1
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("Starting system"); // Print ->   [HEIGHT] ANGLE
     3aa:	85 e1       	ldi	r24, 0x15	; 21
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(1,2); // go to row 2 column 2 of LCD
     3b2:	62 e0       	ldi	r22, 0x02	; 2
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("Please wait..."); // Print -> 00.0 00.0
     3ba:	85 e2       	ldi	r24, 0x25	; 37
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	
	
	// ***** SPEED CONTROLLER STARTUP ***** //
	TIMSK3 = (1 << TOIE3); // Enable PWM timer for startup
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	88 83       	st	Y, r24
	PORTE |= (1<<BASE); // TURN ON 12V SUPPLY
     3c6:	73 9a       	sbi	0x0e, 3	; 14
	DDRE |= (1<<BASE);   // TURN ON 12V SUPPLY
     3c8:	6b 9a       	sbi	0x0d, 3	; 13

	while (setupFlag != 1)
     3ca:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <setupFlag>
     3ce:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <setupFlag+0x1>
     3d2:	01 97       	sbiw	r24, 0x01	; 1
     3d4:	d1 f7       	brne	.-12     	; 0x3ca <peripheralSetup+0x96>
	{
		// Wait until setup is completed
		// This flag will be set by Timer3 Overflow, after it has counted 5 seconds
		// This gives the speed controller time to set up according to its specs on the datasheet
	}
}
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	08 95       	ret

000003dc <main>:
char angleConv[16] = ""; // global character array for storing angle to be output to LCD
char potConv[16] = ""; // Debugging char array used for printing value of potentiometer to LCD screen
volatile int overflowCount = 0; // global variable used for tracking how many times the timer overflows (each overflow is equivalent to one second)

int main(void)
{
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	00 d0       	rcall	.+0      	; 0x3e2 <main+0x6>
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <main+0x8>
     3e4:	cd b7       	in	r28, 0x3d	; 61
     3e6:	de b7       	in	r29, 0x3e	; 62
	//USART_init();
	// These variables are Char arrays as the LCD cannot output int/float values, it must be sent as a string
	angleConv[0]='0'; // v Set up height and angle to start at 00.0 value
     3e8:	e0 ec       	ldi	r30, 0xC0	; 192
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	80 e3       	ldi	r24, 0x30	; 48
     3ee:	80 83       	st	Z, r24
	angleConv[1]='0';
     3f0:	81 83       	std	Z+1, r24	; 0x01
	angleConv[2]='\0';
     3f2:	12 82       	std	Z+2, r1	; 0x02
	heightConv[0]='0';
     3f4:	e0 ed       	ldi	r30, 0xD0	; 208
     3f6:	f1 e0       	ldi	r31, 0x01	; 1
     3f8:	80 83       	st	Z, r24
	heightConv[1]='0';
     3fa:	81 83       	std	Z+1, r24	; 0x01
	heightConv[2]='\0';
     3fc:	12 82       	std	Z+2, r1	; 0x02
	// ^
	
	// Set up all outside ports (LCD, Rotary encoder, PWM, ADC, timers, etc.)
	peripheralSetup();
     3fe:	0e 94 9a 01 	call	0x334	; 0x334 <peripheralSetup>
	
	// Enable input from ADC conversion
	ADCSRA |= (1<<ADSC);
     402:	ea e7       	ldi	r30, 0x7A	; 122
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	80 81       	ld	r24, Z
     408:	80 64       	ori	r24, 0x40	; 64
     40a:	80 83       	st	Z, r24
	
	//SETUP COMPLETE
	lcd_gotoxy(1,1); // go to row 1 column 1 of LCD
     40c:	61 e0       	ldi	r22, 0x01	; 1
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("System start    "); // Print ->   [HEIGHT] ANGLE
     414:	84 e3       	ldi	r24, 0x34	; 52
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(1,2); // go to row 2 column 2 of LCD
     41c:	62 e0       	ldi	r22, 0x02	; 2
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("completed!      "); // Print -> 00.0 00.0
     424:	85 e4       	ldi	r24, 0x45	; 69
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     42c:	2f ef       	ldi	r18, 0xFF	; 255
     42e:	33 ed       	ldi	r19, 0xD3	; 211
     430:	40 e3       	ldi	r20, 0x30	; 48
     432:	21 50       	subi	r18, 0x01	; 1
     434:	30 40       	sbci	r19, 0x00	; 0
     436:	40 40       	sbci	r20, 0x00	; 0
     438:	e1 f7       	brne	.-8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     43a:	00 c0       	rjmp	.+0      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     43c:	00 00       	nop
	_delay_ms(1000);
	lcd_gotoxy(1,1);
     43e:	61 e0       	ldi	r22, 0x01	; 1
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("Enabling UI...  ");
     446:	86 e5       	ldi	r24, 0x56	; 86
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(1,2);
     44e:	62 e0       	ldi	r22, 0x02	; 2
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("Enjoy! :)       ");
     456:	87 e6       	ldi	r24, 0x67	; 103
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
     45e:	5f ef       	ldi	r21, 0xFF	; 255
     460:	87 ea       	ldi	r24, 0xA7	; 167
     462:	91 e6       	ldi	r25, 0x61	; 97
     464:	51 50       	subi	r21, 0x01	; 1
     466:	80 40       	sbci	r24, 0x00	; 0
     468:	90 40       	sbci	r25, 0x00	; 0
     46a:	e1 f7       	brne	.-8      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     46c:	00 c0       	rjmp	.+0      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     46e:	00 00       	nop
	_delay_ms(2000);
	
	// ***** Enable User Control ***** //		
	PCICR |= (1<<PCIE1); // Enable pin change interrupt on PORTC
     470:	e8 e6       	ldi	r30, 0x68	; 104
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	80 81       	ld	r24, Z
     476:	82 60       	ori	r24, 0x02	; 2
     478:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT12) | (1<<PCINT9) | (1<<PCINT10); // Enable Pins 1,2, and 4 to trigger this interrupt
     47a:	ec e6       	ldi	r30, 0x6C	; 108
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	80 81       	ld	r24, Z
     480:	86 61       	ori	r24, 0x16	; 22
     482:	80 83       	st	Z, r24
	
	lcd_gotoxy(1,1); // go to row 1 column 1 of LCD
     484:	61 e0       	ldi	r22, 0x01	; 1
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(HEIGHT_SELECT); // Print ->   [HEIGHT] ANGLE
     48c:	88 e7       	ldi	r24, 0x78	; 120
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(1,2); // go to row 2 column 2 of LCD
     494:	62 e0       	ldi	r22, 0x02	; 2
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(DEFAULT_ANGLE); // Print -> 00.0 00.0
     49c:	89 e8       	ldi	r24, 0x89	; 137
     49e:	91 e0       	ldi	r25, 0x01	; 1
     4a0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	// ^ Usart messes up LCD very badly, and could not be used for debug
	// Code can be found in Putty.h header file
	
	// PID variables were placed here to debug a bug found in earlier code - * does not seem necessary
	int desiredPosition = 0; // 0 degree desired upon startup
	int currentPosition = potVal; // set current position to whatever potentiometer reads while fan is flat
     4a4:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <potVal>
     4a8:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <potVal+0x1>
	//USART_init();
	// ^ Usart messes up LCD very badly, and could not be used for debug
	// Code can be found in Putty.h header file
	
	// PID variables were placed here to debug a bug found in earlier code - * does not seem necessary
	int desiredPosition = 0; // 0 degree desired upon startup
     4ac:	1c 82       	std	Y+4, r1	; 0x04
     4ae:	1b 82       	std	Y+3, r1	; 0x03
		// 3)Adjust speed based on distance
		// 4)loop above
		// rough eq: potVal = 14 + (angle * 3.96);
		
		// need timer = ?
		currentPosition = potVal; // read current potentiometer value from ADC port
     4b0:	00 91 e0 01 	lds	r16, 0x01E0	; 0x8001e0 <potVal>
     4b4:	10 91 e1 01 	lds	r17, 0x01E1	; 0x8001e1 <potVal+0x1>
		if(valueConfirm == 1)
     4b8:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <valueConfirm>
     4bc:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <valueConfirm+0x1>
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	f1 f4       	brne	.+60     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
		{
			desiredPosition = (angle *3.96) + 14;
     4c4:	60 91 ee 01 	lds	r22, 0x01EE	; 0x8001ee <angle>
     4c8:	70 91 ef 01 	lds	r23, 0x01EF	; 0x8001ef <angle+0x1>
     4cc:	07 2e       	mov	r0, r23
     4ce:	00 0c       	add	r0, r0
     4d0:	88 0b       	sbc	r24, r24
     4d2:	99 0b       	sbc	r25, r25
     4d4:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__floatsisf>
     4d8:	24 ea       	ldi	r18, 0xA4	; 164
     4da:	30 e7       	ldi	r19, 0x70	; 112
     4dc:	4d e7       	ldi	r20, 0x7D	; 125
     4de:	50 e4       	ldi	r21, 0x40	; 64
     4e0:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     4e4:	20 e0       	ldi	r18, 0x00	; 0
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	40 e6       	ldi	r20, 0x60	; 96
     4ea:	51 e4       	ldi	r21, 0x41	; 65
     4ec:	0e 94 93 06 	call	0xd26	; 0xd26 <__addsf3>
     4f0:	0e 94 76 07 	call	0xeec	; 0xeec <__fixsfsi>
     4f4:	7c 83       	std	Y+4, r23	; 0x04
     4f6:	6b 83       	std	Y+3, r22	; 0x03
			// desiredPosition = 370 - ((angle *3.96) + 14);
			valueConfirm = 0; // reset flag
     4f8:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <valueConfirm+0x1>
     4fc:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <valueConfirm>
		
// 		if ( angle == 0)
// 			currentPosition = 0; // calculate desired position
// 		else
// 			currentPosition = 14 + (angle * 3.96); // calculate desired position
		pidError = desiredPosition - currentPosition;
     500:	eb 81       	ldd	r30, Y+3	; 0x03
     502:	fc 81       	ldd	r31, Y+4	; 0x04
     504:	e0 1b       	sub	r30, r16
     506:	f1 0b       	sbc	r31, r17
     508:	8f 01       	movw	r16, r30
		integral = integral + pidError;
     50a:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <integral>
     50e:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <integral+0x1>
     512:	8e 0f       	add	r24, r30
     514:	9f 1f       	adc	r25, r31
     516:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <integral+0x1>
     51a:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <integral>
		derivative = pidError - previousPidError;
     51e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <previousPidError>
     522:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <previousPidError+0x1>
     526:	9f 01       	movw	r18, r30
     528:	28 1b       	sub	r18, r24
     52a:	39 0b       	sbc	r19, r25
     52c:	30 93 fd 01 	sts	0x01FD, r19	; 0x8001fd <derivative+0x1>
     530:	20 93 fc 01 	sts	0x01FC, r18	; 0x8001fc <derivative>
		output = kp*pidError + ki*integral + kd*derivative;
     534:	80 90 06 01 	lds	r8, 0x0106	; 0x800106 <kp>
     538:	90 90 07 01 	lds	r9, 0x0107	; 0x800107 <kp+0x1>
     53c:	a0 90 08 01 	lds	r10, 0x0108	; 0x800108 <kp+0x2>
     540:	b0 90 09 01 	lds	r11, 0x0109	; 0x800109 <kp+0x3>
     544:	20 90 fe 01 	lds	r2, 0x01FE	; 0x8001fe <integral>
     548:	30 90 ff 01 	lds	r3, 0x01FF	; 0x8001ff <integral+0x1>
     54c:	40 90 f4 01 	lds	r4, 0x01F4	; 0x8001f4 <ki>
     550:	50 90 f5 01 	lds	r5, 0x01F5	; 0x8001f5 <ki+0x1>
     554:	60 90 f6 01 	lds	r6, 0x01F6	; 0x8001f6 <ki+0x2>
     558:	70 90 f7 01 	lds	r7, 0x01F7	; 0x8001f7 <ki+0x3>
     55c:	40 91 fc 01 	lds	r20, 0x01FC	; 0x8001fc <derivative>
     560:	50 91 fd 01 	lds	r21, 0x01FD	; 0x8001fd <derivative+0x1>
     564:	5a 83       	std	Y+2, r21	; 0x02
     566:	49 83       	std	Y+1, r20	; 0x01
     568:	c0 90 02 01 	lds	r12, 0x0102	; 0x800102 <kd>
     56c:	d0 90 03 01 	lds	r13, 0x0103	; 0x800103 <kd+0x1>
     570:	e0 90 04 01 	lds	r14, 0x0104	; 0x800104 <kd+0x2>
     574:	f0 90 05 01 	lds	r15, 0x0105	; 0x800105 <kd+0x3>
     578:	bf 01       	movw	r22, r30
     57a:	ff 0f       	add	r31, r31
     57c:	88 0b       	sbc	r24, r24
     57e:	99 0b       	sbc	r25, r25
     580:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__floatsisf>
     584:	a5 01       	movw	r20, r10
     586:	94 01       	movw	r18, r8
     588:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     58c:	4b 01       	movw	r8, r22
     58e:	5c 01       	movw	r10, r24
     590:	b1 01       	movw	r22, r2
     592:	33 0c       	add	r3, r3
     594:	88 0b       	sbc	r24, r24
     596:	99 0b       	sbc	r25, r25
     598:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__floatsisf>
     59c:	a3 01       	movw	r20, r6
     59e:	92 01       	movw	r18, r4
     5a0:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     5a4:	9b 01       	movw	r18, r22
     5a6:	ac 01       	movw	r20, r24
     5a8:	c5 01       	movw	r24, r10
     5aa:	b4 01       	movw	r22, r8
     5ac:	0e 94 93 06 	call	0xd26	; 0xd26 <__addsf3>
     5b0:	4b 01       	movw	r8, r22
     5b2:	5c 01       	movw	r10, r24
     5b4:	e9 81       	ldd	r30, Y+1	; 0x01
     5b6:	fa 81       	ldd	r31, Y+2	; 0x02
     5b8:	bf 01       	movw	r22, r30
     5ba:	ff 0f       	add	r31, r31
     5bc:	88 0b       	sbc	r24, r24
     5be:	99 0b       	sbc	r25, r25
     5c0:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__floatsisf>
     5c4:	a7 01       	movw	r20, r14
     5c6:	96 01       	movw	r18, r12
     5c8:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     5cc:	9b 01       	movw	r18, r22
     5ce:	ac 01       	movw	r20, r24
     5d0:	c5 01       	movw	r24, r10
     5d2:	b4 01       	movw	r22, r8
     5d4:	0e 94 93 06 	call	0xd26	; 0xd26 <__addsf3>
     5d8:	0e 94 76 07 	call	0xeec	; 0xeec <__fixsfsi>
     5dc:	70 93 fb 01 	sts	0x01FB, r23	; 0x8001fb <output+0x1>
     5e0:	60 93 fa 01 	sts	0x01FA, r22	; 0x8001fa <output>
//----------------------------------------------------------------------------------------------------------------



		// Set fan speed
		pwmChange =  -1 * (output); // Liam changed -------------------------------------------------------------------------
     5e4:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <output>
     5e8:	90 91 fb 01 	lds	r25, 0x01FB	; 0x8001fb <output+0x1>
     5ec:	91 95       	neg	r25
     5ee:	81 95       	neg	r24
     5f0:	91 09       	sbc	r25, r1
     5f2:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <pwmChange+0x1>
     5f6:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <pwmChange>
		if((OCR1A + pwmChange) <= 38000 && (OCR1A + pwmChange) >= 36000) // Ensure new PWM value within bounds of speed controller
     5fa:	e8 e8       	ldi	r30, 0x88	; 136
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	80 81       	ld	r24, Z
     600:	91 81       	ldd	r25, Z+1	; 0x01
     602:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <pwmChange>
     606:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <pwmChange+0x1>
     60a:	82 0f       	add	r24, r18
     60c:	93 1f       	adc	r25, r19
     60e:	81 37       	cpi	r24, 0x71	; 113
     610:	94 49       	sbci	r25, 0x94	; 148
     612:	d8 f4       	brcc	.+54     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
     614:	e8 e8       	ldi	r30, 0x88	; 136
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	80 81       	ld	r24, Z
     61a:	91 81       	ldd	r25, Z+1	; 0x01
     61c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <pwmChange>
     620:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <pwmChange+0x1>
     624:	82 0f       	add	r24, r18
     626:	93 1f       	adc	r25, r19
     628:	80 3a       	cpi	r24, 0xA0	; 160
     62a:	9c 48       	sbci	r25, 0x8C	; 140
     62c:	70 f0       	brcs	.+28     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
			OCR1A = OCR1A + pwmChange - 1;
     62e:	e8 e8       	ldi	r30, 0x88	; 136
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	80 81       	ld	r24, Z
     634:	91 81       	ldd	r25, Z+1	; 0x01
     636:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <pwmChange>
     63a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <pwmChange+0x1>
     63e:	01 97       	sbiw	r24, 0x01	; 1
     640:	82 0f       	add	r24, r18
     642:	93 1f       	adc	r25, r19
     644:	91 83       	std	Z+1, r25	; 0x01
     646:	80 83       	st	Z, r24
     648:	54 c0       	rjmp	.+168    	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
		else
		{
			if (OCR1A + pwmChange > 38000 ) // Speed is too large
     64a:	e8 e8       	ldi	r30, 0x88	; 136
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 81       	ld	r24, Z
     650:	91 81       	ldd	r25, Z+1	; 0x01
     652:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <pwmChange>
     656:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <pwmChange+0x1>
     65a:	82 0f       	add	r24, r18
     65c:	93 1f       	adc	r25, r19
     65e:	81 37       	cpi	r24, 0x71	; 113
     660:	94 49       	sbci	r25, 0x94	; 148
     662:	10 f1       	brcs	.+68     	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
			{
				overflow = OCR1A + pwmChange - 38000; // Calculate how much it overshoots and find max value that can be added within bounds
     664:	e8 e8       	ldi	r30, 0x88	; 136
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	80 81       	ld	r24, Z
     66a:	91 81       	ldd	r25, Z+1	; 0x01
     66c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <pwmChange>
     670:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <pwmChange+0x1>
     674:	80 57       	subi	r24, 0x70	; 112
     676:	94 49       	sbci	r25, 0x94	; 148
     678:	82 0f       	add	r24, r18
     67a:	93 1f       	adc	r25, r19
     67c:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <overflow+0x1>
     680:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <overflow>
				OCR1A = OCR1A + (pwmChange - overflow - 1);	// Add said value ( -1 to be safe )
     684:	80 81       	ld	r24, Z
     686:	91 81       	ldd	r25, Z+1	; 0x01
     688:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <pwmChange>
     68c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <pwmChange+0x1>
     690:	40 91 f8 01 	lds	r20, 0x01F8	; 0x8001f8 <overflow>
     694:	50 91 f9 01 	lds	r21, 0x01F9	; 0x8001f9 <overflow+0x1>
     698:	24 1b       	sub	r18, r20
     69a:	35 0b       	sbc	r19, r21
     69c:	01 97       	sbiw	r24, 0x01	; 1
     69e:	82 0f       	add	r24, r18
     6a0:	93 1f       	adc	r25, r19
     6a2:	91 83       	std	Z+1, r25	; 0x01
     6a4:	80 83       	st	Z, r24
     6a6:	25 c0       	rjmp	.+74     	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
			}
			else
			{
				overflow = 36000 - (OCR1A + pwmChange); // Calculate how much it undershoots and find max value that can be added (pwmChange will be negative in this case) within bounds
     6a8:	e8 e8       	ldi	r30, 0x88	; 136
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	80 81       	ld	r24, Z
     6ae:	91 81       	ldd	r25, Z+1	; 0x01
     6b0:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <pwmChange>
     6b4:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <pwmChange+0x1>
     6b8:	40 ea       	ldi	r20, 0xA0	; 160
     6ba:	5c e8       	ldi	r21, 0x8C	; 140
     6bc:	48 1b       	sub	r20, r24
     6be:	59 0b       	sbc	r21, r25
     6c0:	ca 01       	movw	r24, r20
     6c2:	82 1b       	sub	r24, r18
     6c4:	93 0b       	sbc	r25, r19
     6c6:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <overflow+0x1>
     6ca:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <overflow>
				OCR1A = OCR1A + (pwmChange + overflow) + 1; // Add said value ( +1 to be safe )
     6ce:	20 81       	ld	r18, Z
     6d0:	31 81       	ldd	r19, Z+1	; 0x01
     6d2:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <pwmChange>
     6d6:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <pwmChange+0x1>
     6da:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <overflow>
     6de:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <overflow+0x1>
     6e2:	84 0f       	add	r24, r20
     6e4:	95 1f       	adc	r25, r21
     6e6:	2f 5f       	subi	r18, 0xFF	; 255
     6e8:	3f 4f       	sbci	r19, 0xFF	; 255
     6ea:	82 0f       	add	r24, r18
     6ec:	93 1f       	adc	r25, r19
     6ee:	91 83       	std	Z+1, r25	; 0x01
     6f0:	80 83       	st	Z, r24
			}
		}
		//------------------------------------------------------------------------------------------------------------------------------
		previousPidError = pidError; // Save current error as previous error for next iteration of PID loop
     6f2:	10 93 01 02 	sts	0x0201, r17	; 0x800201 <previousPidError+0x1>
     6f6:	00 93 00 02 	sts	0x0200, r16	; 0x800200 <previousPidError>
     6fa:	8f e9       	ldi	r24, 0x9F	; 159
     6fc:	9f e0       	ldi	r25, 0x0F	; 15
     6fe:	01 97       	sbiw	r24, 0x01	; 1
     700:	f1 f7       	brne	.-4      	; 0x6fe <__LOCK_REGION_LENGTH__+0x2fe>
     702:	00 c0       	rjmp	.+0      	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
     704:	00 00       	nop
     706:	d4 ce       	rjmp	.-600    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>

00000708 <print_height_angle>:

/************************************************* NUMBER CHANING FUNCTIONS **********************************************************************************/

// Function used to print either the height or angle selection ** THIS FUNCTION IS ONLY FOR CHANGING THE SELECTION **
void print_height_angle(char *angleConv, char *heightConv, int heightSelect)
{
     708:	ef 92       	push	r14
     70a:	ff 92       	push	r15
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	ec 01       	movw	r28, r24
     716:	8b 01       	movw	r16, r22
     718:	7a 01       	movw	r14, r20
	lcd_gotoxy(1,1);
     71a:	61 e0       	ldi	r22, 0x01	; 1
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	if (heightSelect == 1)
     722:	ea 94       	dec	r14
     724:	ef 28       	or	r14, r15
     726:	29 f4       	brne	.+10     	; 0x732 <print_height_angle+0x2a>
		lcd_print(HEIGHT_SELECT);
     728:	88 e7       	ldi	r24, 0x78	; 120
     72a:	91 e0       	ldi	r25, 0x01	; 1
     72c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
     730:	04 c0       	rjmp	.+8      	; 0x73a <print_height_angle+0x32>
	else
		lcd_print(ANGLE_SELECT);
     732:	89 e9       	ldi	r24, 0x99	; 153
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	// un-select bottom row
	lcd_gotoxy(1,2);
     73a:	62 e0       	ldi	r22, 0x02	; 2
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("   "); // remove bracket
     742:	84 e7       	ldi	r24, 0x74	; 116
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_print(heightConv);
     74a:	c8 01       	movw	r24, r16
     74c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_print(" "); //remove bracket
     750:	86 e7       	ldi	r24, 0x76	; 118
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(12,2);
     758:	62 e0       	ldi	r22, 0x02	; 2
     75a:	8c e0       	ldi	r24, 0x0C	; 12
     75c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(" "); //remove bracket
     760:	86 e7       	ldi	r24, 0x76	; 118
     762:	91 e0       	ldi	r25, 0x01	; 1
     764:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_print(angleConv);
     768:	ce 01       	movw	r24, r28
     76a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_print(" "); //remove bracket
     76e:	86 e7       	ldi	r24, 0x76	; 118
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
}
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	1f 91       	pop	r17
     77c:	0f 91       	pop	r16
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	08 95       	ret

00000784 <print_height_change>:

// Function used to print a change in the height value
void print_height_change(char *conversion)
{
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	ec 01       	movw	r28, r24
	//ensure height becomes unselected
	lcd_gotoxy(1,1);
     78a:	61 e0       	ldi	r22, 0x01	; 1
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(NO_HS_SELECT);
     792:	8a ea       	ldi	r24, 0xAA	; 170
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(3,2);
     79a:	62 e0       	ldi	r22, 0x02	; 2
     79c:	83 e0       	ldi	r24, 0x03	; 3
     79e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("[");
     7a2:	8b eb       	ldi	r24, 0xBB	; 187
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_print(conversion);
     7aa:	ce 01       	movw	r24, r28
     7ac:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_print("]");
     7b0:	88 ea       	ldi	r24, 0xA8	; 168
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
}
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	08 95       	ret

000007be <print_angle_change>:

// Function used to print a change in the angle value
void print_angle_change(char *conversion)
{
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	ec 01       	movw	r28, r24
	lcd_gotoxy(1,1);
     7c4:	61 e0       	ldi	r22, 0x01	; 1
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print(NO_HS_SELECT);
     7cc:	8a ea       	ldi	r24, 0xAA	; 170
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_gotoxy(12,2);
     7d4:	62 e0       	ldi	r22, 0x02	; 2
     7d6:	8c e0       	ldi	r24, 0x0C	; 12
     7d8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_gotoxy>
	lcd_print("[");
     7dc:	8b eb       	ldi	r24, 0xBB	; 187
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_print(conversion);
     7e4:	ce 01       	movw	r24, r28
     7e6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	lcd_print("]");
     7ea:	88 ea       	ldi	r24, 0xA8	; 168
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_print>
	
}
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	08 95       	ret

000007f8 <__vector_4>:
//		- maybe add feature to indicate height / angle reached max value on LCD
//	-Button press either:
//		- Confirms height / angle adjustment
//		- Selects angle / height and moves user to adjust height / angle
ISR(PCINT1_vect)
{
     7f8:	1f 92       	push	r1
     7fa:	0f 92       	push	r0
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	0f 92       	push	r0
     800:	11 24       	eor	r1, r1
     802:	cf 92       	push	r12
     804:	df 92       	push	r13
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	2f 93       	push	r18
     80c:	3f 93       	push	r19
     80e:	4f 93       	push	r20
     810:	5f 93       	push	r21
     812:	6f 93       	push	r22
     814:	7f 93       	push	r23
     816:	8f 93       	push	r24
     818:	9f 93       	push	r25
     81a:	af 93       	push	r26
     81c:	bf 93       	push	r27
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ef 93       	push	r30
     824:	ff 93       	push	r31
     826:	8f e1       	ldi	r24, 0x1F	; 31
     828:	9e e4       	ldi	r25, 0x4E	; 78
     82a:	01 97       	sbiw	r24, 0x01	; 1
     82c:	f1 f7       	brne	.-4      	; 0x82a <__vector_4+0x32>
     82e:	00 c0       	rjmp	.+0      	; 0x830 <__vector_4+0x38>
     830:	00 00       	nop
	_delay_ms(5);
//  ** Debug Code for showing PINC values when entering interrupt on LCD **
// 	ftoa(PINC, potConv);
// 	lcd_gotoxy(1,2);
// 	lcd_print(potConv);
	if(PINC == RIGHT) //if right turn triggered interrupt - 0b01110011 --- (PINC & 0b00000100) == 0b00000100
     832:	86 b1       	in	r24, 0x06	; 6
     834:	83 37       	cpi	r24, 0x73	; 115
     836:	09 f0       	breq	.+2      	; 0x83a <__vector_4+0x42>
     838:	6b c0       	rjmp	.+214    	; 0x910 <__stack+0x11>
	{
		switch(state)
     83a:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <state>
     83e:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <state+0x1>
     842:	82 30       	cpi	r24, 0x02	; 2
     844:	91 05       	cpc	r25, r1
     846:	a9 f0       	breq	.+42     	; 0x872 <__vector_4+0x7a>
     848:	83 30       	cpi	r24, 0x03	; 3
     84a:	91 05       	cpc	r25, r1
     84c:	d1 f1       	breq	.+116    	; 0x8c2 <__vector_4+0xca>
     84e:	89 2b       	or	r24, r25
     850:	09 f0       	breq	.+2      	; 0x854 <__vector_4+0x5c>
     852:	5e c0       	rjmp	.+188    	; 0x910 <__stack+0x11>
		{
			case HEIGHT: // change to angle state
				print_height_angle(angleConv,heightConv,0);
     854:	40 e0       	ldi	r20, 0x00	; 0
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	60 ed       	ldi	r22, 0xD0	; 208
     85a:	71 e0       	ldi	r23, 0x01	; 1
     85c:	80 ec       	ldi	r24, 0xC0	; 192
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	0e 94 84 03 	call	0x708	; 0x708 <print_height_angle>
				state = ANGLE;
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <state+0x1>
     86c:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <state>
				break;
     870:	4f c0       	rjmp	.+158    	; 0x910 <__stack+0x11>
			case ANGLE:
				// do nothing
				break;
			case CHEIGHT: // increment height value (as long as < MAX (?))
				if ((height+valueChange) <= MAX_HEIGHT) // total guess right now
     872:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <height>
     876:	30 91 f1 01 	lds	r19, 0x01F1	; 0x8001f1 <height+0x1>
     87a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     87e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     882:	82 0f       	add	r24, r18
     884:	93 1f       	adc	r25, r19
     886:	40 97       	sbiw	r24, 0x10	; 16
     888:	0c f0       	brlt	.+2      	; 0x88c <__vector_4+0x94>
     88a:	42 c0       	rjmp	.+132    	; 0x910 <__stack+0x11>
				{
					height = height + valueChange; //increment height by tenth
     88c:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <height>
     890:	30 91 f1 01 	lds	r19, 0x01F1	; 0x8001f1 <height+0x1>
     894:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     898:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     89c:	82 0f       	add	r24, r18
     89e:	93 1f       	adc	r25, r19
     8a0:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <height+0x1>
     8a4:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <height>
					ftoa(height,heightConv); // convert height to char array (heightConv) with 1 decimal place
     8a8:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <height>
     8ac:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <height+0x1>
     8b0:	60 ed       	ldi	r22, 0xD0	; 208
     8b2:	71 e0       	ldi	r23, 0x01	; 1
     8b4:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
					print_height_change(heightConv); // print conversion to LCD
     8b8:	80 ed       	ldi	r24, 0xD0	; 208
     8ba:	91 e0       	ldi	r25, 0x01	; 1
     8bc:	0e 94 c2 03 	call	0x784	; 0x784 <print_height_change>
     8c0:	27 c0       	rjmp	.+78     	; 0x910 <__stack+0x11>
				}
				break;
			case CANGLE: // increment angle value (as long as <= MAX (90))
				if ((angle+valueChange) <= MAX_ANGLE)
     8c2:	20 91 ee 01 	lds	r18, 0x01EE	; 0x8001ee <angle>
     8c6:	30 91 ef 01 	lds	r19, 0x01EF	; 0x8001ef <angle+0x1>
     8ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     8ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     8d2:	82 0f       	add	r24, r18
     8d4:	93 1f       	adc	r25, r19
     8d6:	8b 35       	cpi	r24, 0x5B	; 91
     8d8:	91 05       	cpc	r25, r1
     8da:	d4 f4       	brge	.+52     	; 0x910 <__stack+0x11>
				{
					angle=angle + valueChange;
     8dc:	20 91 ee 01 	lds	r18, 0x01EE	; 0x8001ee <angle>
     8e0:	30 91 ef 01 	lds	r19, 0x01EF	; 0x8001ef <angle+0x1>
     8e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     8e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     8ec:	82 0f       	add	r24, r18
     8ee:	93 1f       	adc	r25, r19
     8f0:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <angle+0x1>
     8f4:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <angle>
					ftoa(angle,angleConv); // convert angle to char array (angleConv) with 1 decimal place
     8f8:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <angle>
     8fc:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <angle+0x1>
     900:	60 ec       	ldi	r22, 0xC0	; 192
     902:	71 e0       	ldi	r23, 0x01	; 1
     904:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
					print_angle_change(angleConv);	// print conversion to LCD
     908:	80 ec       	ldi	r24, 0xC0	; 192
     90a:	91 e0       	ldi	r25, 0x01	; 1
     90c:	0e 94 df 03 	call	0x7be	; 0x7be <print_angle_change>
				break;
		}
	}
	
	
	if (PINC == LEFT) // If left turn triggered interrupt
     910:	86 b1       	in	r24, 0x06	; 6
     912:	85 37       	cpi	r24, 0x75	; 117
     914:	09 f0       	breq	.+2      	; 0x918 <__stack+0x19>
     916:	66 c0       	rjmp	.+204    	; 0x9e4 <__stack+0xe5>
	{
		switch(state)
     918:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <state>
     91c:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <state+0x1>
     920:	82 30       	cpi	r24, 0x02	; 2
     922:	91 05       	cpc	r25, r1
     924:	99 f0       	breq	.+38     	; 0x94c <__stack+0x4d>
     926:	83 30       	cpi	r24, 0x03	; 3
     928:	91 05       	cpc	r25, r1
     92a:	b9 f1       	breq	.+110    	; 0x99a <__stack+0x9b>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	09 f0       	breq	.+2      	; 0x932 <__stack+0x33>
     930:	59 c0       	rjmp	.+178    	; 0x9e4 <__stack+0xe5>
		{
			case HEIGHT: // Change increment/decrement value to 1
				// do nothing
				break;
			case ANGLE: // change to height state
				print_height_angle(angleConv,heightConv, 1);
     932:	41 e0       	ldi	r20, 0x01	; 1
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	60 ed       	ldi	r22, 0xD0	; 208
     938:	71 e0       	ldi	r23, 0x01	; 1
     93a:	80 ec       	ldi	r24, 0xC0	; 192
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	0e 94 84 03 	call	0x708	; 0x708 <print_height_angle>
				state = HEIGHT;
     942:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <state+0x1>
     946:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <state>
				break;
     94a:	4c c0       	rjmp	.+152    	; 0x9e4 <__stack+0xe5>
			case CHEIGHT: // decrement height value (as long as >= MIN (0) )
				if ((height-valueChange) >= 0)
     94c:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <height>
     950:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <height+0x1>
     954:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     958:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	0a f4       	brpl	.+2      	; 0x964 <__stack+0x65>
     962:	40 c0       	rjmp	.+128    	; 0x9e4 <__stack+0xe5>
				{
					height = height - valueChange;
     964:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <height>
     968:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <height+0x1>
     96c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     970:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     974:	82 1b       	sub	r24, r18
     976:	93 0b       	sbc	r25, r19
     978:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <height+0x1>
     97c:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <height>
					ftoa(height,heightConv); // convert height to char array (heightConv) with 1 decimal place
     980:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <height>
     984:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <height+0x1>
     988:	60 ed       	ldi	r22, 0xD0	; 208
     98a:	71 e0       	ldi	r23, 0x01	; 1
     98c:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
					print_height_change(heightConv); // print conversion to LCD
     990:	80 ed       	ldi	r24, 0xD0	; 208
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	0e 94 c2 03 	call	0x784	; 0x784 <print_height_change>
     998:	25 c0       	rjmp	.+74     	; 0x9e4 <__stack+0xe5>
				}
				break;
			case CANGLE: // increment angle value (as long as >= MIN (0))
				if((angle-valueChange) >= 0)
     99a:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <angle>
     99e:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <angle+0x1>
     9a2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     9a6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     9aa:	82 1b       	sub	r24, r18
     9ac:	93 0b       	sbc	r25, r19
     9ae:	d2 f0       	brmi	.+52     	; 0x9e4 <__stack+0xe5>
				{
					angle = angle - valueChange;
     9b0:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <angle>
     9b4:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <angle+0x1>
     9b8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     9bc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     9c0:	82 1b       	sub	r24, r18
     9c2:	93 0b       	sbc	r25, r19
     9c4:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <angle+0x1>
     9c8:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <angle>
					ftoa(angle,angleConv); // convert angle to char array (angleConv) with 1 decimal place
     9cc:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <angle>
     9d0:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <angle+0x1>
     9d4:	60 ec       	ldi	r22, 0xC0	; 192
     9d6:	71 e0       	ldi	r23, 0x01	; 1
     9d8:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
					print_angle_change(angleConv);	// print conversion to LCD
     9dc:	80 ec       	ldi	r24, 0xC0	; 192
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	0e 94 df 03 	call	0x7be	; 0x7be <print_angle_change>
				break;
		}
	}


	if(PINC == BUTTON) // If button press triggered interrupt
     9e4:	86 b1       	in	r24, 0x06	; 6
     9e6:	87 36       	cpi	r24, 0x67	; 103
     9e8:	09 f0       	breq	.+2      	; 0x9ec <__stack+0xed>
     9ea:	71 c1       	rjmp	.+738    	; 0xcce <__stack+0x3cf>
	{
		switch(state)
     9ec:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <state>
     9f0:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <state+0x1>
     9f4:	81 30       	cpi	r24, 0x01	; 1
     9f6:	91 05       	cpc	r25, r1
     9f8:	f1 f0       	breq	.+60     	; 0xa36 <__stack+0x137>
     9fa:	1c f4       	brge	.+6      	; 0xa02 <__stack+0x103>
     9fc:	89 2b       	or	r24, r25
     9fe:	41 f0       	breq	.+16     	; 0xa10 <__stack+0x111>
     a00:	66 c1       	rjmp	.+716    	; 0xcce <__stack+0x3cf>
     a02:	82 30       	cpi	r24, 0x02	; 2
     a04:	91 05       	cpc	r25, r1
     a06:	51 f1       	breq	.+84     	; 0xa5c <__stack+0x15d>
     a08:	03 97       	sbiw	r24, 0x03	; 3
     a0a:	09 f4       	brne	.+2      	; 0xa0e <__stack+0x10f>
     a0c:	c2 c0       	rjmp	.+388    	; 0xb92 <__stack+0x293>
     a0e:	5f c1       	rjmp	.+702    	; 0xcce <__stack+0x3cf>
		{
			case HEIGHT: // change to height change state
				ftoa(height,heightConv);
     a10:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <height>
     a14:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <height+0x1>
     a18:	60 ed       	ldi	r22, 0xD0	; 208
     a1a:	71 e0       	ldi	r23, 0x01	; 1
     a1c:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_height_change(heightConv);
     a20:	80 ed       	ldi	r24, 0xD0	; 208
     a22:	91 e0       	ldi	r25, 0x01	; 1
     a24:	0e 94 c2 03 	call	0x784	; 0x784 <print_height_change>
				state = CHEIGHT;
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <state+0x1>
     a30:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <state>
				break;
     a34:	4c c1       	rjmp	.+664    	; 0xcce <__stack+0x3cf>
			case ANGLE: // change to angle change state
				ftoa(angle,angleConv);
     a36:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <angle>
     a3a:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <angle+0x1>
     a3e:	60 ec       	ldi	r22, 0xC0	; 192
     a40:	71 e0       	ldi	r23, 0x01	; 1
     a42:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_angle_change(angleConv);
     a46:	80 ec       	ldi	r24, 0xC0	; 192
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	0e 94 df 03 	call	0x7be	; 0x7be <print_angle_change>
				state = CANGLE;
     a4e:	83 e0       	ldi	r24, 0x03	; 3
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <state+0x1>
     a56:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <state>
				break;
     a5a:	39 c1       	rjmp	.+626    	; 0xcce <__stack+0x3cf>
			case CHEIGHT: // confirm height change value
				valueConfirm = 1; // set flag
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <valueConfirm+0x1>
     a64:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <valueConfirm>
				// Convert height to angle
				dAngle = height; // save height variable as double
     a68:	60 91 f0 01 	lds	r22, 0x01F0	; 0x8001f0 <height>
     a6c:	70 91 f1 01 	lds	r23, 0x01F1	; 0x8001f1 <height+0x1>
     a70:	07 2e       	mov	r0, r23
     a72:	00 0c       	add	r0, r0
     a74:	88 0b       	sbc	r24, r24
     a76:	99 0b       	sbc	r25, r25
     a78:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__floatsisf>
     a7c:	60 93 ea 01 	sts	0x01EA, r22	; 0x8001ea <dAngle>
     a80:	70 93 eb 01 	sts	0x01EB, r23	; 0x8001eb <dAngle+0x1>
     a84:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <dAngle+0x2>
     a88:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <dAngle+0x3>
				dAngle = dAngle * dAngle; // square dAngle
     a8c:	60 91 ea 01 	lds	r22, 0x01EA	; 0x8001ea <dAngle>
     a90:	70 91 eb 01 	lds	r23, 0x01EB	; 0x8001eb <dAngle+0x1>
     a94:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <dAngle+0x2>
     a98:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <dAngle+0x3>
     a9c:	20 91 ea 01 	lds	r18, 0x01EA	; 0x8001ea <dAngle>
     aa0:	30 91 eb 01 	lds	r19, 0x01EB	; 0x8001eb <dAngle+0x1>
     aa4:	40 91 ec 01 	lds	r20, 0x01EC	; 0x8001ec <dAngle+0x2>
     aa8:	50 91 ed 01 	lds	r21, 0x01ED	; 0x8001ed <dAngle+0x3>
     aac:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     ab0:	60 93 ea 01 	sts	0x01EA, r22	; 0x8001ea <dAngle>
     ab4:	70 93 eb 01 	sts	0x01EB, r23	; 0x8001eb <dAngle+0x1>
     ab8:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <dAngle+0x2>
     abc:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <dAngle+0x3>
				dAngle = sqrt(225 - dAngle) / 15;
     ac0:	c0 90 ea 01 	lds	r12, 0x01EA	; 0x8001ea <dAngle>
     ac4:	d0 90 eb 01 	lds	r13, 0x01EB	; 0x8001eb <dAngle+0x1>
     ac8:	e0 90 ec 01 	lds	r14, 0x01EC	; 0x8001ec <dAngle+0x2>
     acc:	f0 90 ed 01 	lds	r15, 0x01ED	; 0x8001ed <dAngle+0x3>
     ad0:	a7 01       	movw	r20, r14
     ad2:	96 01       	movw	r18, r12
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e6       	ldi	r24, 0x61	; 97
     ada:	93 e4       	ldi	r25, 0x43	; 67
     adc:	0e 94 92 06 	call	0xd24	; 0xd24 <__subsf3>
     ae0:	0e 94 8b 09 	call	0x1316	; 0x1316 <sqrt>
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 e7       	ldi	r20, 0x70	; 112
     aea:	51 e4       	ldi	r21, 0x41	; 65
     aec:	0e 94 04 07 	call	0xe08	; 0xe08 <__divsf3>
     af0:	60 93 ea 01 	sts	0x01EA, r22	; 0x8001ea <dAngle>
     af4:	70 93 eb 01 	sts	0x01EB, r23	; 0x8001eb <dAngle+0x1>
     af8:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <dAngle+0x2>
     afc:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <dAngle+0x3>
				dAngle = acos(dAngle) * (180 / M_PI);  // See Alex's lab notebook for formula used (combo of pythag. and trig.)
     b00:	60 91 ea 01 	lds	r22, 0x01EA	; 0x8001ea <dAngle>
     b04:	70 91 eb 01 	lds	r23, 0x01EB	; 0x8001eb <dAngle+0x1>
     b08:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <dAngle+0x2>
     b0c:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <dAngle+0x3>
     b10:	0e 94 81 06 	call	0xd02	; 0xd02 <acos>
     b14:	20 ee       	ldi	r18, 0xE0	; 224
     b16:	3e e2       	ldi	r19, 0x2E	; 46
     b18:	45 e6       	ldi	r20, 0x65	; 101
     b1a:	52 e4       	ldi	r21, 0x42	; 66
     b1c:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     b20:	60 93 ea 01 	sts	0x01EA, r22	; 0x8001ea <dAngle>
     b24:	70 93 eb 01 	sts	0x01EB, r23	; 0x8001eb <dAngle+0x1>
     b28:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <dAngle+0x2>
     b2c:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <dAngle+0x3>
				angle = floor(dAngle);
     b30:	60 91 ea 01 	lds	r22, 0x01EA	; 0x8001ea <dAngle>
     b34:	70 91 eb 01 	lds	r23, 0x01EB	; 0x8001eb <dAngle+0x1>
     b38:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <dAngle+0x2>
     b3c:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <dAngle+0x3>
     b40:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <floor>
     b44:	0e 94 76 07 	call	0xeec	; 0xeec <__fixsfsi>
     b48:	70 93 ef 01 	sts	0x01EF, r23	; 0x8001ef <angle+0x1>
     b4c:	60 93 ee 01 	sts	0x01EE, r22	; 0x8001ee <angle>
				if (height == 15)
     b50:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <height>
     b54:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <height+0x1>
     b58:	0f 97       	sbiw	r24, 0x0f	; 15
     b5a:	31 f4       	brne	.+12     	; 0xb68 <__stack+0x269>
				{
					angle = 90;
     b5c:	8a e5       	ldi	r24, 0x5A	; 90
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <angle+0x1>
     b64:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <angle>
				}
				ftoa(angle, angleConv);
     b68:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <angle>
     b6c:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <angle+0x1>
     b70:	60 ec       	ldi	r22, 0xC0	; 192
     b72:	71 e0       	ldi	r23, 0x01	; 1
     b74:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_height_angle(angleConv,heightConv, 1); // refresh screen with height selected
     b78:	41 e0       	ldi	r20, 0x01	; 1
     b7a:	50 e0       	ldi	r21, 0x00	; 0
     b7c:	60 ed       	ldi	r22, 0xD0	; 208
     b7e:	71 e0       	ldi	r23, 0x01	; 1
     b80:	80 ec       	ldi	r24, 0xC0	; 192
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 84 03 	call	0x708	; 0x708 <print_height_angle>
				state = HEIGHT; // exit from change function
     b88:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <state+0x1>
     b8c:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <state>
				break;
     b90:	9e c0       	rjmp	.+316    	; 0xcce <__stack+0x3cf>
			case CANGLE: // confirm angle change value
				valueConfirm = 1; // set flag - might need to make unique flag
     b92:	c1 e0       	ldi	r28, 0x01	; 1
     b94:	d0 e0       	ldi	r29, 0x00	; 0
     b96:	d0 93 e5 01 	sts	0x01E5, r29	; 0x8001e5 <valueConfirm+0x1>
     b9a:	c0 93 e4 01 	sts	0x01E4, r28	; 0x8001e4 <valueConfirm>
				// Convert angle to height
				dHeight = angle; // save angle as double
     b9e:	60 91 ee 01 	lds	r22, 0x01EE	; 0x8001ee <angle>
     ba2:	70 91 ef 01 	lds	r23, 0x01EF	; 0x8001ef <angle+0x1>
     ba6:	07 2e       	mov	r0, r23
     ba8:	00 0c       	add	r0, r0
     baa:	88 0b       	sbc	r24, r24
     bac:	99 0b       	sbc	r25, r25
     bae:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__floatsisf>
     bb2:	60 93 e6 01 	sts	0x01E6, r22	; 0x8001e6 <dHeight>
     bb6:	70 93 e7 01 	sts	0x01E7, r23	; 0x8001e7 <dHeight+0x1>
     bba:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <dHeight+0x2>
     bbe:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <dHeight+0x3>
				dHeight = (dHeight) * (M_PI / 180); // convert angle to radians
     bc2:	60 91 e6 01 	lds	r22, 0x01E6	; 0x8001e6 <dHeight>
     bc6:	70 91 e7 01 	lds	r23, 0x01E7	; 0x8001e7 <dHeight+0x1>
     bca:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <dHeight+0x2>
     bce:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <dHeight+0x3>
     bd2:	25 e3       	ldi	r18, 0x35	; 53
     bd4:	3a ef       	ldi	r19, 0xFA	; 250
     bd6:	4e e8       	ldi	r20, 0x8E	; 142
     bd8:	5c e3       	ldi	r21, 0x3C	; 60
     bda:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     bde:	60 93 e6 01 	sts	0x01E6, r22	; 0x8001e6 <dHeight>
     be2:	70 93 e7 01 	sts	0x01E7, r23	; 0x8001e7 <dHeight+0x1>
     be6:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <dHeight+0x2>
     bea:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <dHeight+0x3>
				dHeight = 15*(cos(dHeight));
     bee:	60 91 e6 01 	lds	r22, 0x01E6	; 0x8001e6 <dHeight>
     bf2:	70 91 e7 01 	lds	r23, 0x01E7	; 0x8001e7 <dHeight+0x1>
     bf6:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <dHeight+0x2>
     bfa:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <dHeight+0x3>
     bfe:	0e 94 ff 06 	call	0xdfe	; 0xdfe <cos>
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	40 e7       	ldi	r20, 0x70	; 112
     c08:	51 e4       	ldi	r21, 0x41	; 65
     c0a:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     c0e:	60 93 e6 01 	sts	0x01E6, r22	; 0x8001e6 <dHeight>
     c12:	70 93 e7 01 	sts	0x01E7, r23	; 0x8001e7 <dHeight+0x1>
     c16:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <dHeight+0x2>
     c1a:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <dHeight+0x3>
				dHeight = dHeight * dHeight;
     c1e:	60 91 e6 01 	lds	r22, 0x01E6	; 0x8001e6 <dHeight>
     c22:	70 91 e7 01 	lds	r23, 0x01E7	; 0x8001e7 <dHeight+0x1>
     c26:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <dHeight+0x2>
     c2a:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <dHeight+0x3>
     c2e:	20 91 e6 01 	lds	r18, 0x01E6	; 0x8001e6 <dHeight>
     c32:	30 91 e7 01 	lds	r19, 0x01E7	; 0x8001e7 <dHeight+0x1>
     c36:	40 91 e8 01 	lds	r20, 0x01E8	; 0x8001e8 <dHeight+0x2>
     c3a:	50 91 e9 01 	lds	r21, 0x01E9	; 0x8001e9 <dHeight+0x3>
     c3e:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
     c42:	60 93 e6 01 	sts	0x01E6, r22	; 0x8001e6 <dHeight>
     c46:	70 93 e7 01 	sts	0x01E7, r23	; 0x8001e7 <dHeight+0x1>
     c4a:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <dHeight+0x2>
     c4e:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <dHeight+0x3>
				dHeight = sqrt((225-dHeight));
     c52:	c0 90 e6 01 	lds	r12, 0x01E6	; 0x8001e6 <dHeight>
     c56:	d0 90 e7 01 	lds	r13, 0x01E7	; 0x8001e7 <dHeight+0x1>
     c5a:	e0 90 e8 01 	lds	r14, 0x01E8	; 0x8001e8 <dHeight+0x2>
     c5e:	f0 90 e9 01 	lds	r15, 0x01E9	; 0x8001e9 <dHeight+0x3>
     c62:	a7 01       	movw	r20, r14
     c64:	96 01       	movw	r18, r12
     c66:	60 e0       	ldi	r22, 0x00	; 0
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	81 e6       	ldi	r24, 0x61	; 97
     c6c:	93 e4       	ldi	r25, 0x43	; 67
     c6e:	0e 94 92 06 	call	0xd24	; 0xd24 <__subsf3>
     c72:	0e 94 8b 09 	call	0x1316	; 0x1316 <sqrt>
     c76:	60 93 e6 01 	sts	0x01E6, r22	; 0x8001e6 <dHeight>
     c7a:	70 93 e7 01 	sts	0x01E7, r23	; 0x8001e7 <dHeight+0x1>
     c7e:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <dHeight+0x2>
     c82:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <dHeight+0x3>
				height = floor(dHeight);
     c86:	60 91 e6 01 	lds	r22, 0x01E6	; 0x8001e6 <dHeight>
     c8a:	70 91 e7 01 	lds	r23, 0x01E7	; 0x8001e7 <dHeight+0x1>
     c8e:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <dHeight+0x2>
     c92:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <dHeight+0x3>
     c96:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <floor>
     c9a:	0e 94 76 07 	call	0xeec	; 0xeec <__fixsfsi>
     c9e:	70 93 f1 01 	sts	0x01F1, r23	; 0x8001f1 <height+0x1>
     ca2:	60 93 f0 01 	sts	0x01F0, r22	; 0x8001f0 <height>
				ftoa(height,heightConv);
     ca6:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <height>
     caa:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <height+0x1>
     cae:	60 ed       	ldi	r22, 0xD0	; 208
     cb0:	71 e0       	ldi	r23, 0x01	; 1
     cb2:	0e 94 12 01 	call	0x224	; 0x224 <ftoa>
				print_height_angle(angleConv,heightConv, 0); // refresh screen with angle selected
     cb6:	40 e0       	ldi	r20, 0x00	; 0
     cb8:	50 e0       	ldi	r21, 0x00	; 0
     cba:	60 ed       	ldi	r22, 0xD0	; 208
     cbc:	71 e0       	ldi	r23, 0x01	; 1
     cbe:	80 ec       	ldi	r24, 0xC0	; 192
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	0e 94 84 03 	call	0x708	; 0x708 <print_height_angle>
				state = ANGLE;
     cc6:	d0 93 f3 01 	sts	0x01F3, r29	; 0x8001f3 <state+0x1>
     cca:	c0 93 f2 01 	sts	0x01F2, r28	; 0x8001f2 <state>
				break;
		}
	}
	

	while(PINC != 0b01110111)
     cce:	86 b1       	in	r24, 0x06	; 6
     cd0:	87 37       	cpi	r24, 0x77	; 119
     cd2:	e9 f7       	brne	.-6      	; 0xcce <__stack+0x3cf>
	{
		
	}

}
     cd4:	ff 91       	pop	r31
     cd6:	ef 91       	pop	r30
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	bf 91       	pop	r27
     cde:	af 91       	pop	r26
     ce0:	9f 91       	pop	r25
     ce2:	8f 91       	pop	r24
     ce4:	7f 91       	pop	r23
     ce6:	6f 91       	pop	r22
     ce8:	5f 91       	pop	r21
     cea:	4f 91       	pop	r20
     cec:	3f 91       	pop	r19
     cee:	2f 91       	pop	r18
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	df 90       	pop	r13
     cf6:	cf 90       	pop	r12
     cf8:	0f 90       	pop	r0
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	0f 90       	pop	r0
     cfe:	1f 90       	pop	r1
     d00:	18 95       	reti

00000d02 <acos>:
     d02:	9f 93       	push	r25
     d04:	9f 77       	andi	r25, 0x7F	; 127
     d06:	0e 94 00 08 	call	0x1000	; 0x1000 <__fp_arccos>
     d0a:	0f 90       	pop	r0
     d0c:	00 20       	and	r0, r0
     d0e:	42 f4       	brpl	.+16     	; 0xd20 <acos+0x1e>
     d10:	90 58       	subi	r25, 0x80	; 128
     d12:	a2 ea       	ldi	r26, 0xA2	; 162
     d14:	2a ed       	ldi	r18, 0xDA	; 218
     d16:	3f e0       	ldi	r19, 0x0F	; 15
     d18:	49 e4       	ldi	r20, 0x49	; 73
     d1a:	50 e4       	ldi	r21, 0x40	; 64
     d1c:	0e 94 aa 06 	call	0xd54	; 0xd54 <__addsf3x>
     d20:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__fp_round>

00000d24 <__subsf3>:
     d24:	50 58       	subi	r21, 0x80	; 128

00000d26 <__addsf3>:
     d26:	bb 27       	eor	r27, r27
     d28:	aa 27       	eor	r26, r26
     d2a:	0e 94 aa 06 	call	0xd54	; 0xd54 <__addsf3x>
     d2e:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__fp_round>
     d32:	0e 94 79 08 	call	0x10f2	; 0x10f2 <__fp_pscA>
     d36:	38 f0       	brcs	.+14     	; 0xd46 <__addsf3+0x20>
     d38:	0e 94 80 08 	call	0x1100	; 0x1100 <__fp_pscB>
     d3c:	20 f0       	brcs	.+8      	; 0xd46 <__addsf3+0x20>
     d3e:	39 f4       	brne	.+14     	; 0xd4e <__addsf3+0x28>
     d40:	9f 3f       	cpi	r25, 0xFF	; 255
     d42:	19 f4       	brne	.+6      	; 0xd4a <__addsf3+0x24>
     d44:	26 f4       	brtc	.+8      	; 0xd4e <__addsf3+0x28>
     d46:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__fp_nan>
     d4a:	0e f4       	brtc	.+2      	; 0xd4e <__addsf3+0x28>
     d4c:	e0 95       	com	r30
     d4e:	e7 fb       	bst	r30, 7
     d50:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_inf>

00000d54 <__addsf3x>:
     d54:	e9 2f       	mov	r30, r25
     d56:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__fp_split3>
     d5a:	58 f3       	brcs	.-42     	; 0xd32 <__addsf3+0xc>
     d5c:	ba 17       	cp	r27, r26
     d5e:	62 07       	cpc	r22, r18
     d60:	73 07       	cpc	r23, r19
     d62:	84 07       	cpc	r24, r20
     d64:	95 07       	cpc	r25, r21
     d66:	20 f0       	brcs	.+8      	; 0xd70 <__addsf3x+0x1c>
     d68:	79 f4       	brne	.+30     	; 0xd88 <__addsf3x+0x34>
     d6a:	a6 f5       	brtc	.+104    	; 0xdd4 <__addsf3x+0x80>
     d6c:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__fp_zero>
     d70:	0e f4       	brtc	.+2      	; 0xd74 <__addsf3x+0x20>
     d72:	e0 95       	com	r30
     d74:	0b 2e       	mov	r0, r27
     d76:	ba 2f       	mov	r27, r26
     d78:	a0 2d       	mov	r26, r0
     d7a:	0b 01       	movw	r0, r22
     d7c:	b9 01       	movw	r22, r18
     d7e:	90 01       	movw	r18, r0
     d80:	0c 01       	movw	r0, r24
     d82:	ca 01       	movw	r24, r20
     d84:	a0 01       	movw	r20, r0
     d86:	11 24       	eor	r1, r1
     d88:	ff 27       	eor	r31, r31
     d8a:	59 1b       	sub	r21, r25
     d8c:	99 f0       	breq	.+38     	; 0xdb4 <__addsf3x+0x60>
     d8e:	59 3f       	cpi	r21, 0xF9	; 249
     d90:	50 f4       	brcc	.+20     	; 0xda6 <__addsf3x+0x52>
     d92:	50 3e       	cpi	r21, 0xE0	; 224
     d94:	68 f1       	brcs	.+90     	; 0xdf0 <__addsf3x+0x9c>
     d96:	1a 16       	cp	r1, r26
     d98:	f0 40       	sbci	r31, 0x00	; 0
     d9a:	a2 2f       	mov	r26, r18
     d9c:	23 2f       	mov	r18, r19
     d9e:	34 2f       	mov	r19, r20
     da0:	44 27       	eor	r20, r20
     da2:	58 5f       	subi	r21, 0xF8	; 248
     da4:	f3 cf       	rjmp	.-26     	; 0xd8c <__addsf3x+0x38>
     da6:	46 95       	lsr	r20
     da8:	37 95       	ror	r19
     daa:	27 95       	ror	r18
     dac:	a7 95       	ror	r26
     dae:	f0 40       	sbci	r31, 0x00	; 0
     db0:	53 95       	inc	r21
     db2:	c9 f7       	brne	.-14     	; 0xda6 <__addsf3x+0x52>
     db4:	7e f4       	brtc	.+30     	; 0xdd4 <__addsf3x+0x80>
     db6:	1f 16       	cp	r1, r31
     db8:	ba 0b       	sbc	r27, r26
     dba:	62 0b       	sbc	r22, r18
     dbc:	73 0b       	sbc	r23, r19
     dbe:	84 0b       	sbc	r24, r20
     dc0:	ba f0       	brmi	.+46     	; 0xdf0 <__addsf3x+0x9c>
     dc2:	91 50       	subi	r25, 0x01	; 1
     dc4:	a1 f0       	breq	.+40     	; 0xdee <__addsf3x+0x9a>
     dc6:	ff 0f       	add	r31, r31
     dc8:	bb 1f       	adc	r27, r27
     dca:	66 1f       	adc	r22, r22
     dcc:	77 1f       	adc	r23, r23
     dce:	88 1f       	adc	r24, r24
     dd0:	c2 f7       	brpl	.-16     	; 0xdc2 <__addsf3x+0x6e>
     dd2:	0e c0       	rjmp	.+28     	; 0xdf0 <__addsf3x+0x9c>
     dd4:	ba 0f       	add	r27, r26
     dd6:	62 1f       	adc	r22, r18
     dd8:	73 1f       	adc	r23, r19
     dda:	84 1f       	adc	r24, r20
     ddc:	48 f4       	brcc	.+18     	; 0xdf0 <__addsf3x+0x9c>
     dde:	87 95       	ror	r24
     de0:	77 95       	ror	r23
     de2:	67 95       	ror	r22
     de4:	b7 95       	ror	r27
     de6:	f7 95       	ror	r31
     de8:	9e 3f       	cpi	r25, 0xFE	; 254
     dea:	08 f0       	brcs	.+2      	; 0xdee <__addsf3x+0x9a>
     dec:	b0 cf       	rjmp	.-160    	; 0xd4e <__addsf3+0x28>
     dee:	93 95       	inc	r25
     df0:	88 0f       	add	r24, r24
     df2:	08 f0       	brcs	.+2      	; 0xdf6 <__addsf3x+0xa2>
     df4:	99 27       	eor	r25, r25
     df6:	ee 0f       	add	r30, r30
     df8:	97 95       	ror	r25
     dfa:	87 95       	ror	r24
     dfc:	08 95       	ret

00000dfe <cos>:
     dfe:	0e 94 89 08 	call	0x1112	; 0x1112 <__fp_rempio2>
     e02:	e3 95       	inc	r30
     e04:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__fp_sinus>

00000e08 <__divsf3>:
     e08:	0e 94 18 07 	call	0xe30	; 0xe30 <__divsf3x>
     e0c:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__fp_round>
     e10:	0e 94 80 08 	call	0x1100	; 0x1100 <__fp_pscB>
     e14:	58 f0       	brcs	.+22     	; 0xe2c <__divsf3+0x24>
     e16:	0e 94 79 08 	call	0x10f2	; 0x10f2 <__fp_pscA>
     e1a:	40 f0       	brcs	.+16     	; 0xe2c <__divsf3+0x24>
     e1c:	29 f4       	brne	.+10     	; 0xe28 <__divsf3+0x20>
     e1e:	5f 3f       	cpi	r21, 0xFF	; 255
     e20:	29 f0       	breq	.+10     	; 0xe2c <__divsf3+0x24>
     e22:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_inf>
     e26:	51 11       	cpse	r21, r1
     e28:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__fp_szero>
     e2c:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__fp_nan>

00000e30 <__divsf3x>:
     e30:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__fp_split3>
     e34:	68 f3       	brcs	.-38     	; 0xe10 <__divsf3+0x8>

00000e36 <__divsf3_pse>:
     e36:	99 23       	and	r25, r25
     e38:	b1 f3       	breq	.-20     	; 0xe26 <__divsf3+0x1e>
     e3a:	55 23       	and	r21, r21
     e3c:	91 f3       	breq	.-28     	; 0xe22 <__divsf3+0x1a>
     e3e:	95 1b       	sub	r25, r21
     e40:	55 0b       	sbc	r21, r21
     e42:	bb 27       	eor	r27, r27
     e44:	aa 27       	eor	r26, r26
     e46:	62 17       	cp	r22, r18
     e48:	73 07       	cpc	r23, r19
     e4a:	84 07       	cpc	r24, r20
     e4c:	38 f0       	brcs	.+14     	; 0xe5c <__divsf3_pse+0x26>
     e4e:	9f 5f       	subi	r25, 0xFF	; 255
     e50:	5f 4f       	sbci	r21, 0xFF	; 255
     e52:	22 0f       	add	r18, r18
     e54:	33 1f       	adc	r19, r19
     e56:	44 1f       	adc	r20, r20
     e58:	aa 1f       	adc	r26, r26
     e5a:	a9 f3       	breq	.-22     	; 0xe46 <__divsf3_pse+0x10>
     e5c:	35 d0       	rcall	.+106    	; 0xec8 <__divsf3_pse+0x92>
     e5e:	0e 2e       	mov	r0, r30
     e60:	3a f0       	brmi	.+14     	; 0xe70 <__divsf3_pse+0x3a>
     e62:	e0 e8       	ldi	r30, 0x80	; 128
     e64:	32 d0       	rcall	.+100    	; 0xeca <__divsf3_pse+0x94>
     e66:	91 50       	subi	r25, 0x01	; 1
     e68:	50 40       	sbci	r21, 0x00	; 0
     e6a:	e6 95       	lsr	r30
     e6c:	00 1c       	adc	r0, r0
     e6e:	ca f7       	brpl	.-14     	; 0xe62 <__divsf3_pse+0x2c>
     e70:	2b d0       	rcall	.+86     	; 0xec8 <__divsf3_pse+0x92>
     e72:	fe 2f       	mov	r31, r30
     e74:	29 d0       	rcall	.+82     	; 0xec8 <__divsf3_pse+0x92>
     e76:	66 0f       	add	r22, r22
     e78:	77 1f       	adc	r23, r23
     e7a:	88 1f       	adc	r24, r24
     e7c:	bb 1f       	adc	r27, r27
     e7e:	26 17       	cp	r18, r22
     e80:	37 07       	cpc	r19, r23
     e82:	48 07       	cpc	r20, r24
     e84:	ab 07       	cpc	r26, r27
     e86:	b0 e8       	ldi	r27, 0x80	; 128
     e88:	09 f0       	breq	.+2      	; 0xe8c <__divsf3_pse+0x56>
     e8a:	bb 0b       	sbc	r27, r27
     e8c:	80 2d       	mov	r24, r0
     e8e:	bf 01       	movw	r22, r30
     e90:	ff 27       	eor	r31, r31
     e92:	93 58       	subi	r25, 0x83	; 131
     e94:	5f 4f       	sbci	r21, 0xFF	; 255
     e96:	3a f0       	brmi	.+14     	; 0xea6 <__divsf3_pse+0x70>
     e98:	9e 3f       	cpi	r25, 0xFE	; 254
     e9a:	51 05       	cpc	r21, r1
     e9c:	78 f0       	brcs	.+30     	; 0xebc <__divsf3_pse+0x86>
     e9e:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_inf>
     ea2:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__fp_szero>
     ea6:	5f 3f       	cpi	r21, 0xFF	; 255
     ea8:	e4 f3       	brlt	.-8      	; 0xea2 <__divsf3_pse+0x6c>
     eaa:	98 3e       	cpi	r25, 0xE8	; 232
     eac:	d4 f3       	brlt	.-12     	; 0xea2 <__divsf3_pse+0x6c>
     eae:	86 95       	lsr	r24
     eb0:	77 95       	ror	r23
     eb2:	67 95       	ror	r22
     eb4:	b7 95       	ror	r27
     eb6:	f7 95       	ror	r31
     eb8:	9f 5f       	subi	r25, 0xFF	; 255
     eba:	c9 f7       	brne	.-14     	; 0xeae <__divsf3_pse+0x78>
     ebc:	88 0f       	add	r24, r24
     ebe:	91 1d       	adc	r25, r1
     ec0:	96 95       	lsr	r25
     ec2:	87 95       	ror	r24
     ec4:	97 f9       	bld	r25, 7
     ec6:	08 95       	ret
     ec8:	e1 e0       	ldi	r30, 0x01	; 1
     eca:	66 0f       	add	r22, r22
     ecc:	77 1f       	adc	r23, r23
     ece:	88 1f       	adc	r24, r24
     ed0:	bb 1f       	adc	r27, r27
     ed2:	62 17       	cp	r22, r18
     ed4:	73 07       	cpc	r23, r19
     ed6:	84 07       	cpc	r24, r20
     ed8:	ba 07       	cpc	r27, r26
     eda:	20 f0       	brcs	.+8      	; 0xee4 <__divsf3_pse+0xae>
     edc:	62 1b       	sub	r22, r18
     ede:	73 0b       	sbc	r23, r19
     ee0:	84 0b       	sbc	r24, r20
     ee2:	ba 0b       	sbc	r27, r26
     ee4:	ee 1f       	adc	r30, r30
     ee6:	88 f7       	brcc	.-30     	; 0xeca <__divsf3_pse+0x94>
     ee8:	e0 95       	com	r30
     eea:	08 95       	ret

00000eec <__fixsfsi>:
     eec:	0e 94 7d 07 	call	0xefa	; 0xefa <__fixunssfsi>
     ef0:	68 94       	set
     ef2:	b1 11       	cpse	r27, r1
     ef4:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__fp_szero>
     ef8:	08 95       	ret

00000efa <__fixunssfsi>:
     efa:	0e 94 df 08 	call	0x11be	; 0x11be <__fp_splitA>
     efe:	88 f0       	brcs	.+34     	; 0xf22 <__fixunssfsi+0x28>
     f00:	9f 57       	subi	r25, 0x7F	; 127
     f02:	98 f0       	brcs	.+38     	; 0xf2a <__fixunssfsi+0x30>
     f04:	b9 2f       	mov	r27, r25
     f06:	99 27       	eor	r25, r25
     f08:	b7 51       	subi	r27, 0x17	; 23
     f0a:	b0 f0       	brcs	.+44     	; 0xf38 <__fixunssfsi+0x3e>
     f0c:	e1 f0       	breq	.+56     	; 0xf46 <__fixunssfsi+0x4c>
     f0e:	66 0f       	add	r22, r22
     f10:	77 1f       	adc	r23, r23
     f12:	88 1f       	adc	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	1a f0       	brmi	.+6      	; 0xf1e <__fixunssfsi+0x24>
     f18:	ba 95       	dec	r27
     f1a:	c9 f7       	brne	.-14     	; 0xf0e <__fixunssfsi+0x14>
     f1c:	14 c0       	rjmp	.+40     	; 0xf46 <__fixunssfsi+0x4c>
     f1e:	b1 30       	cpi	r27, 0x01	; 1
     f20:	91 f0       	breq	.+36     	; 0xf46 <__fixunssfsi+0x4c>
     f22:	0e 94 11 09 	call	0x1222	; 0x1222 <__fp_zero>
     f26:	b1 e0       	ldi	r27, 0x01	; 1
     f28:	08 95       	ret
     f2a:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__fp_zero>
     f2e:	67 2f       	mov	r22, r23
     f30:	78 2f       	mov	r23, r24
     f32:	88 27       	eor	r24, r24
     f34:	b8 5f       	subi	r27, 0xF8	; 248
     f36:	39 f0       	breq	.+14     	; 0xf46 <__fixunssfsi+0x4c>
     f38:	b9 3f       	cpi	r27, 0xF9	; 249
     f3a:	cc f3       	brlt	.-14     	; 0xf2e <__fixunssfsi+0x34>
     f3c:	86 95       	lsr	r24
     f3e:	77 95       	ror	r23
     f40:	67 95       	ror	r22
     f42:	b3 95       	inc	r27
     f44:	d9 f7       	brne	.-10     	; 0xf3c <__fixunssfsi+0x42>
     f46:	3e f4       	brtc	.+14     	; 0xf56 <__fixunssfsi+0x5c>
     f48:	90 95       	com	r25
     f4a:	80 95       	com	r24
     f4c:	70 95       	com	r23
     f4e:	61 95       	neg	r22
     f50:	7f 4f       	sbci	r23, 0xFF	; 255
     f52:	8f 4f       	sbci	r24, 0xFF	; 255
     f54:	9f 4f       	sbci	r25, 0xFF	; 255
     f56:	08 95       	ret

00000f58 <__floatunsisf>:
     f58:	e8 94       	clt
     f5a:	09 c0       	rjmp	.+18     	; 0xf6e <__floatsisf+0x12>

00000f5c <__floatsisf>:
     f5c:	97 fb       	bst	r25, 7
     f5e:	3e f4       	brtc	.+14     	; 0xf6e <__floatsisf+0x12>
     f60:	90 95       	com	r25
     f62:	80 95       	com	r24
     f64:	70 95       	com	r23
     f66:	61 95       	neg	r22
     f68:	7f 4f       	sbci	r23, 0xFF	; 255
     f6a:	8f 4f       	sbci	r24, 0xFF	; 255
     f6c:	9f 4f       	sbci	r25, 0xFF	; 255
     f6e:	99 23       	and	r25, r25
     f70:	a9 f0       	breq	.+42     	; 0xf9c <__floatsisf+0x40>
     f72:	f9 2f       	mov	r31, r25
     f74:	96 e9       	ldi	r25, 0x96	; 150
     f76:	bb 27       	eor	r27, r27
     f78:	93 95       	inc	r25
     f7a:	f6 95       	lsr	r31
     f7c:	87 95       	ror	r24
     f7e:	77 95       	ror	r23
     f80:	67 95       	ror	r22
     f82:	b7 95       	ror	r27
     f84:	f1 11       	cpse	r31, r1
     f86:	f8 cf       	rjmp	.-16     	; 0xf78 <__floatsisf+0x1c>
     f88:	fa f4       	brpl	.+62     	; 0xfc8 <__floatsisf+0x6c>
     f8a:	bb 0f       	add	r27, r27
     f8c:	11 f4       	brne	.+4      	; 0xf92 <__floatsisf+0x36>
     f8e:	60 ff       	sbrs	r22, 0
     f90:	1b c0       	rjmp	.+54     	; 0xfc8 <__floatsisf+0x6c>
     f92:	6f 5f       	subi	r22, 0xFF	; 255
     f94:	7f 4f       	sbci	r23, 0xFF	; 255
     f96:	8f 4f       	sbci	r24, 0xFF	; 255
     f98:	9f 4f       	sbci	r25, 0xFF	; 255
     f9a:	16 c0       	rjmp	.+44     	; 0xfc8 <__floatsisf+0x6c>
     f9c:	88 23       	and	r24, r24
     f9e:	11 f0       	breq	.+4      	; 0xfa4 <__floatsisf+0x48>
     fa0:	96 e9       	ldi	r25, 0x96	; 150
     fa2:	11 c0       	rjmp	.+34     	; 0xfc6 <__floatsisf+0x6a>
     fa4:	77 23       	and	r23, r23
     fa6:	21 f0       	breq	.+8      	; 0xfb0 <__floatsisf+0x54>
     fa8:	9e e8       	ldi	r25, 0x8E	; 142
     faa:	87 2f       	mov	r24, r23
     fac:	76 2f       	mov	r23, r22
     fae:	05 c0       	rjmp	.+10     	; 0xfba <__floatsisf+0x5e>
     fb0:	66 23       	and	r22, r22
     fb2:	71 f0       	breq	.+28     	; 0xfd0 <__floatsisf+0x74>
     fb4:	96 e8       	ldi	r25, 0x86	; 134
     fb6:	86 2f       	mov	r24, r22
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	60 e0       	ldi	r22, 0x00	; 0
     fbc:	2a f0       	brmi	.+10     	; 0xfc8 <__floatsisf+0x6c>
     fbe:	9a 95       	dec	r25
     fc0:	66 0f       	add	r22, r22
     fc2:	77 1f       	adc	r23, r23
     fc4:	88 1f       	adc	r24, r24
     fc6:	da f7       	brpl	.-10     	; 0xfbe <__floatsisf+0x62>
     fc8:	88 0f       	add	r24, r24
     fca:	96 95       	lsr	r25
     fcc:	87 95       	ror	r24
     fce:	97 f9       	bld	r25, 7
     fd0:	08 95       	ret

00000fd2 <floor>:
     fd2:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__fp_trunc>
     fd6:	90 f0       	brcs	.+36     	; 0xffc <floor+0x2a>
     fd8:	9f 37       	cpi	r25, 0x7F	; 127
     fda:	48 f4       	brcc	.+18     	; 0xfee <floor+0x1c>
     fdc:	91 11       	cpse	r25, r1
     fde:	16 f0       	brts	.+4      	; 0xfe4 <floor+0x12>
     fe0:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__fp_szero>
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	80 e8       	ldi	r24, 0x80	; 128
     fea:	9f eb       	ldi	r25, 0xBF	; 191
     fec:	08 95       	ret
     fee:	26 f4       	brtc	.+8      	; 0xff8 <floor+0x26>
     ff0:	1b 16       	cp	r1, r27
     ff2:	61 1d       	adc	r22, r1
     ff4:	71 1d       	adc	r23, r1
     ff6:	81 1d       	adc	r24, r1
     ff8:	0c 94 26 08 	jmp	0x104c	; 0x104c <__fp_mintl>
     ffc:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__fp_mpack>

00001000 <__fp_arccos>:
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	1f 93       	push	r17
    1006:	0f 93       	push	r16
    1008:	8b 01       	movw	r16, r22
    100a:	ec 01       	movw	r28, r24
    100c:	e4 eb       	ldi	r30, 0xB4	; 180
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__fp_powser>
    1014:	0e 94 b2 08 	call	0x1164	; 0x1164 <__fp_round>
    1018:	98 01       	movw	r18, r16
    101a:	ae 01       	movw	r20, r28
    101c:	8b 01       	movw	r16, r22
    101e:	ec 01       	movw	r28, r24
    1020:	60 e0       	ldi	r22, 0x00	; 0
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	80 e8       	ldi	r24, 0x80	; 128
    1026:	9f e3       	ldi	r25, 0x3F	; 63
    1028:	0e 94 92 06 	call	0xd24	; 0xd24 <__subsf3>
    102c:	0e 94 8b 09 	call	0x1316	; 0x1316 <sqrt>
    1030:	98 01       	movw	r18, r16
    1032:	ae 01       	movw	r20, r28
    1034:	0f 91       	pop	r16
    1036:	1f 91       	pop	r17
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	0c 94 2b 09 	jmp	0x1256	; 0x1256 <__mulsf3x>

00001040 <__fp_inf>:
    1040:	97 f9       	bld	r25, 7
    1042:	9f 67       	ori	r25, 0x7F	; 127
    1044:	80 e8       	ldi	r24, 0x80	; 128
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	08 95       	ret

0000104c <__fp_mintl>:
    104c:	88 23       	and	r24, r24
    104e:	71 f4       	brne	.+28     	; 0x106c <__fp_mintl+0x20>
    1050:	77 23       	and	r23, r23
    1052:	21 f0       	breq	.+8      	; 0x105c <__fp_mintl+0x10>
    1054:	98 50       	subi	r25, 0x08	; 8
    1056:	87 2b       	or	r24, r23
    1058:	76 2f       	mov	r23, r22
    105a:	07 c0       	rjmp	.+14     	; 0x106a <__fp_mintl+0x1e>
    105c:	66 23       	and	r22, r22
    105e:	11 f4       	brne	.+4      	; 0x1064 <__fp_mintl+0x18>
    1060:	99 27       	eor	r25, r25
    1062:	0d c0       	rjmp	.+26     	; 0x107e <__fp_mintl+0x32>
    1064:	90 51       	subi	r25, 0x10	; 16
    1066:	86 2b       	or	r24, r22
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	2a f0       	brmi	.+10     	; 0x1078 <__fp_mintl+0x2c>
    106e:	9a 95       	dec	r25
    1070:	66 0f       	add	r22, r22
    1072:	77 1f       	adc	r23, r23
    1074:	88 1f       	adc	r24, r24
    1076:	da f7       	brpl	.-10     	; 0x106e <__fp_mintl+0x22>
    1078:	88 0f       	add	r24, r24
    107a:	96 95       	lsr	r25
    107c:	87 95       	ror	r24
    107e:	97 f9       	bld	r25, 7
    1080:	08 95       	ret

00001082 <__fp_mpack>:
    1082:	9f 3f       	cpi	r25, 0xFF	; 255
    1084:	31 f0       	breq	.+12     	; 0x1092 <__fp_mpack_finite+0xc>

00001086 <__fp_mpack_finite>:
    1086:	91 50       	subi	r25, 0x01	; 1
    1088:	20 f4       	brcc	.+8      	; 0x1092 <__fp_mpack_finite+0xc>
    108a:	87 95       	ror	r24
    108c:	77 95       	ror	r23
    108e:	67 95       	ror	r22
    1090:	b7 95       	ror	r27
    1092:	88 0f       	add	r24, r24
    1094:	91 1d       	adc	r25, r1
    1096:	96 95       	lsr	r25
    1098:	87 95       	ror	r24
    109a:	97 f9       	bld	r25, 7
    109c:	08 95       	ret

0000109e <__fp_nan>:
    109e:	9f ef       	ldi	r25, 0xFF	; 255
    10a0:	80 ec       	ldi	r24, 0xC0	; 192
    10a2:	08 95       	ret

000010a4 <__fp_powser>:
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	1f 93       	push	r17
    10aa:	0f 93       	push	r16
    10ac:	ff 92       	push	r15
    10ae:	ef 92       	push	r14
    10b0:	df 92       	push	r13
    10b2:	7b 01       	movw	r14, r22
    10b4:	8c 01       	movw	r16, r24
    10b6:	68 94       	set
    10b8:	06 c0       	rjmp	.+12     	; 0x10c6 <__fp_powser+0x22>
    10ba:	da 2e       	mov	r13, r26
    10bc:	ef 01       	movw	r28, r30
    10be:	0e 94 2b 09 	call	0x1256	; 0x1256 <__mulsf3x>
    10c2:	fe 01       	movw	r30, r28
    10c4:	e8 94       	clt
    10c6:	a5 91       	lpm	r26, Z+
    10c8:	25 91       	lpm	r18, Z+
    10ca:	35 91       	lpm	r19, Z+
    10cc:	45 91       	lpm	r20, Z+
    10ce:	55 91       	lpm	r21, Z+
    10d0:	a6 f3       	brts	.-24     	; 0x10ba <__fp_powser+0x16>
    10d2:	ef 01       	movw	r28, r30
    10d4:	0e 94 aa 06 	call	0xd54	; 0xd54 <__addsf3x>
    10d8:	fe 01       	movw	r30, r28
    10da:	97 01       	movw	r18, r14
    10dc:	a8 01       	movw	r20, r16
    10de:	da 94       	dec	r13
    10e0:	69 f7       	brne	.-38     	; 0x10bc <__fp_powser+0x18>
    10e2:	df 90       	pop	r13
    10e4:	ef 90       	pop	r14
    10e6:	ff 90       	pop	r15
    10e8:	0f 91       	pop	r16
    10ea:	1f 91       	pop	r17
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <__fp_pscA>:
    10f2:	00 24       	eor	r0, r0
    10f4:	0a 94       	dec	r0
    10f6:	16 16       	cp	r1, r22
    10f8:	17 06       	cpc	r1, r23
    10fa:	18 06       	cpc	r1, r24
    10fc:	09 06       	cpc	r0, r25
    10fe:	08 95       	ret

00001100 <__fp_pscB>:
    1100:	00 24       	eor	r0, r0
    1102:	0a 94       	dec	r0
    1104:	12 16       	cp	r1, r18
    1106:	13 06       	cpc	r1, r19
    1108:	14 06       	cpc	r1, r20
    110a:	05 06       	cpc	r0, r21
    110c:	08 95       	ret
    110e:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__fp_nan>

00001112 <__fp_rempio2>:
    1112:	0e 94 df 08 	call	0x11be	; 0x11be <__fp_splitA>
    1116:	d8 f3       	brcs	.-10     	; 0x110e <__fp_pscB+0xe>
    1118:	e8 94       	clt
    111a:	e0 e0       	ldi	r30, 0x00	; 0
    111c:	bb 27       	eor	r27, r27
    111e:	9f 57       	subi	r25, 0x7F	; 127
    1120:	f0 f0       	brcs	.+60     	; 0x115e <__fp_rempio2+0x4c>
    1122:	2a ed       	ldi	r18, 0xDA	; 218
    1124:	3f e0       	ldi	r19, 0x0F	; 15
    1126:	49 ec       	ldi	r20, 0xC9	; 201
    1128:	06 c0       	rjmp	.+12     	; 0x1136 <__fp_rempio2+0x24>
    112a:	ee 0f       	add	r30, r30
    112c:	bb 0f       	add	r27, r27
    112e:	66 1f       	adc	r22, r22
    1130:	77 1f       	adc	r23, r23
    1132:	88 1f       	adc	r24, r24
    1134:	28 f0       	brcs	.+10     	; 0x1140 <__fp_rempio2+0x2e>
    1136:	b2 3a       	cpi	r27, 0xA2	; 162
    1138:	62 07       	cpc	r22, r18
    113a:	73 07       	cpc	r23, r19
    113c:	84 07       	cpc	r24, r20
    113e:	28 f0       	brcs	.+10     	; 0x114a <__fp_rempio2+0x38>
    1140:	b2 5a       	subi	r27, 0xA2	; 162
    1142:	62 0b       	sbc	r22, r18
    1144:	73 0b       	sbc	r23, r19
    1146:	84 0b       	sbc	r24, r20
    1148:	e3 95       	inc	r30
    114a:	9a 95       	dec	r25
    114c:	72 f7       	brpl	.-36     	; 0x112a <__fp_rempio2+0x18>
    114e:	80 38       	cpi	r24, 0x80	; 128
    1150:	30 f4       	brcc	.+12     	; 0x115e <__fp_rempio2+0x4c>
    1152:	9a 95       	dec	r25
    1154:	bb 0f       	add	r27, r27
    1156:	66 1f       	adc	r22, r22
    1158:	77 1f       	adc	r23, r23
    115a:	88 1f       	adc	r24, r24
    115c:	d2 f7       	brpl	.-12     	; 0x1152 <__fp_rempio2+0x40>
    115e:	90 48       	sbci	r25, 0x80	; 128
    1160:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__fp_mpack_finite>

00001164 <__fp_round>:
    1164:	09 2e       	mov	r0, r25
    1166:	03 94       	inc	r0
    1168:	00 0c       	add	r0, r0
    116a:	11 f4       	brne	.+4      	; 0x1170 <__fp_round+0xc>
    116c:	88 23       	and	r24, r24
    116e:	52 f0       	brmi	.+20     	; 0x1184 <__fp_round+0x20>
    1170:	bb 0f       	add	r27, r27
    1172:	40 f4       	brcc	.+16     	; 0x1184 <__fp_round+0x20>
    1174:	bf 2b       	or	r27, r31
    1176:	11 f4       	brne	.+4      	; 0x117c <__fp_round+0x18>
    1178:	60 ff       	sbrs	r22, 0
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <__fp_round+0x20>
    117c:	6f 5f       	subi	r22, 0xFF	; 255
    117e:	7f 4f       	sbci	r23, 0xFF	; 255
    1180:	8f 4f       	sbci	r24, 0xFF	; 255
    1182:	9f 4f       	sbci	r25, 0xFF	; 255
    1184:	08 95       	ret

00001186 <__fp_sinus>:
    1186:	ef 93       	push	r30
    1188:	e0 ff       	sbrs	r30, 0
    118a:	07 c0       	rjmp	.+14     	; 0x119a <__fp_sinus+0x14>
    118c:	a2 ea       	ldi	r26, 0xA2	; 162
    118e:	2a ed       	ldi	r18, 0xDA	; 218
    1190:	3f e0       	ldi	r19, 0x0F	; 15
    1192:	49 ec       	ldi	r20, 0xC9	; 201
    1194:	5f eb       	ldi	r21, 0xBF	; 191
    1196:	0e 94 aa 06 	call	0xd54	; 0xd54 <__addsf3x>
    119a:	0e 94 b2 08 	call	0x1164	; 0x1164 <__fp_round>
    119e:	0f 90       	pop	r0
    11a0:	03 94       	inc	r0
    11a2:	01 fc       	sbrc	r0, 1
    11a4:	90 58       	subi	r25, 0x80	; 128
    11a6:	ec ed       	ldi	r30, 0xDC	; 220
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__fp_powsodd>

000011ae <__fp_split3>:
    11ae:	57 fd       	sbrc	r21, 7
    11b0:	90 58       	subi	r25, 0x80	; 128
    11b2:	44 0f       	add	r20, r20
    11b4:	55 1f       	adc	r21, r21
    11b6:	59 f0       	breq	.+22     	; 0x11ce <__fp_splitA+0x10>
    11b8:	5f 3f       	cpi	r21, 0xFF	; 255
    11ba:	71 f0       	breq	.+28     	; 0x11d8 <__fp_splitA+0x1a>
    11bc:	47 95       	ror	r20

000011be <__fp_splitA>:
    11be:	88 0f       	add	r24, r24
    11c0:	97 fb       	bst	r25, 7
    11c2:	99 1f       	adc	r25, r25
    11c4:	61 f0       	breq	.+24     	; 0x11de <__fp_splitA+0x20>
    11c6:	9f 3f       	cpi	r25, 0xFF	; 255
    11c8:	79 f0       	breq	.+30     	; 0x11e8 <__fp_splitA+0x2a>
    11ca:	87 95       	ror	r24
    11cc:	08 95       	ret
    11ce:	12 16       	cp	r1, r18
    11d0:	13 06       	cpc	r1, r19
    11d2:	14 06       	cpc	r1, r20
    11d4:	55 1f       	adc	r21, r21
    11d6:	f2 cf       	rjmp	.-28     	; 0x11bc <__fp_split3+0xe>
    11d8:	46 95       	lsr	r20
    11da:	f1 df       	rcall	.-30     	; 0x11be <__fp_splitA>
    11dc:	08 c0       	rjmp	.+16     	; 0x11ee <__fp_splitA+0x30>
    11de:	16 16       	cp	r1, r22
    11e0:	17 06       	cpc	r1, r23
    11e2:	18 06       	cpc	r1, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	f1 cf       	rjmp	.-30     	; 0x11ca <__fp_splitA+0xc>
    11e8:	86 95       	lsr	r24
    11ea:	71 05       	cpc	r23, r1
    11ec:	61 05       	cpc	r22, r1
    11ee:	08 94       	sec
    11f0:	08 95       	ret

000011f2 <__fp_trunc>:
    11f2:	0e 94 df 08 	call	0x11be	; 0x11be <__fp_splitA>
    11f6:	a0 f0       	brcs	.+40     	; 0x1220 <__fp_trunc+0x2e>
    11f8:	be e7       	ldi	r27, 0x7E	; 126
    11fa:	b9 17       	cp	r27, r25
    11fc:	88 f4       	brcc	.+34     	; 0x1220 <__fp_trunc+0x2e>
    11fe:	bb 27       	eor	r27, r27
    1200:	9f 38       	cpi	r25, 0x8F	; 143
    1202:	60 f4       	brcc	.+24     	; 0x121c <__fp_trunc+0x2a>
    1204:	16 16       	cp	r1, r22
    1206:	b1 1d       	adc	r27, r1
    1208:	67 2f       	mov	r22, r23
    120a:	78 2f       	mov	r23, r24
    120c:	88 27       	eor	r24, r24
    120e:	98 5f       	subi	r25, 0xF8	; 248
    1210:	f7 cf       	rjmp	.-18     	; 0x1200 <__fp_trunc+0xe>
    1212:	86 95       	lsr	r24
    1214:	77 95       	ror	r23
    1216:	67 95       	ror	r22
    1218:	b1 1d       	adc	r27, r1
    121a:	93 95       	inc	r25
    121c:	96 39       	cpi	r25, 0x96	; 150
    121e:	c8 f3       	brcs	.-14     	; 0x1212 <__fp_trunc+0x20>
    1220:	08 95       	ret

00001222 <__fp_zero>:
    1222:	e8 94       	clt

00001224 <__fp_szero>:
    1224:	bb 27       	eor	r27, r27
    1226:	66 27       	eor	r22, r22
    1228:	77 27       	eor	r23, r23
    122a:	cb 01       	movw	r24, r22
    122c:	97 f9       	bld	r25, 7
    122e:	08 95       	ret

00001230 <__mulsf3>:
    1230:	0e 94 2b 09 	call	0x1256	; 0x1256 <__mulsf3x>
    1234:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__fp_round>
    1238:	0e 94 79 08 	call	0x10f2	; 0x10f2 <__fp_pscA>
    123c:	38 f0       	brcs	.+14     	; 0x124c <__mulsf3+0x1c>
    123e:	0e 94 80 08 	call	0x1100	; 0x1100 <__fp_pscB>
    1242:	20 f0       	brcs	.+8      	; 0x124c <__mulsf3+0x1c>
    1244:	95 23       	and	r25, r21
    1246:	11 f0       	breq	.+4      	; 0x124c <__mulsf3+0x1c>
    1248:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_inf>
    124c:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__fp_nan>
    1250:	11 24       	eor	r1, r1
    1252:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__fp_szero>

00001256 <__mulsf3x>:
    1256:	0e 94 d7 08 	call	0x11ae	; 0x11ae <__fp_split3>
    125a:	70 f3       	brcs	.-36     	; 0x1238 <__mulsf3+0x8>

0000125c <__mulsf3_pse>:
    125c:	95 9f       	mul	r25, r21
    125e:	c1 f3       	breq	.-16     	; 0x1250 <__mulsf3+0x20>
    1260:	95 0f       	add	r25, r21
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	55 1f       	adc	r21, r21
    1266:	62 9f       	mul	r22, r18
    1268:	f0 01       	movw	r30, r0
    126a:	72 9f       	mul	r23, r18
    126c:	bb 27       	eor	r27, r27
    126e:	f0 0d       	add	r31, r0
    1270:	b1 1d       	adc	r27, r1
    1272:	63 9f       	mul	r22, r19
    1274:	aa 27       	eor	r26, r26
    1276:	f0 0d       	add	r31, r0
    1278:	b1 1d       	adc	r27, r1
    127a:	aa 1f       	adc	r26, r26
    127c:	64 9f       	mul	r22, r20
    127e:	66 27       	eor	r22, r22
    1280:	b0 0d       	add	r27, r0
    1282:	a1 1d       	adc	r26, r1
    1284:	66 1f       	adc	r22, r22
    1286:	82 9f       	mul	r24, r18
    1288:	22 27       	eor	r18, r18
    128a:	b0 0d       	add	r27, r0
    128c:	a1 1d       	adc	r26, r1
    128e:	62 1f       	adc	r22, r18
    1290:	73 9f       	mul	r23, r19
    1292:	b0 0d       	add	r27, r0
    1294:	a1 1d       	adc	r26, r1
    1296:	62 1f       	adc	r22, r18
    1298:	83 9f       	mul	r24, r19
    129a:	a0 0d       	add	r26, r0
    129c:	61 1d       	adc	r22, r1
    129e:	22 1f       	adc	r18, r18
    12a0:	74 9f       	mul	r23, r20
    12a2:	33 27       	eor	r19, r19
    12a4:	a0 0d       	add	r26, r0
    12a6:	61 1d       	adc	r22, r1
    12a8:	23 1f       	adc	r18, r19
    12aa:	84 9f       	mul	r24, r20
    12ac:	60 0d       	add	r22, r0
    12ae:	21 1d       	adc	r18, r1
    12b0:	82 2f       	mov	r24, r18
    12b2:	76 2f       	mov	r23, r22
    12b4:	6a 2f       	mov	r22, r26
    12b6:	11 24       	eor	r1, r1
    12b8:	9f 57       	subi	r25, 0x7F	; 127
    12ba:	50 40       	sbci	r21, 0x00	; 0
    12bc:	9a f0       	brmi	.+38     	; 0x12e4 <__mulsf3_pse+0x88>
    12be:	f1 f0       	breq	.+60     	; 0x12fc <__mulsf3_pse+0xa0>
    12c0:	88 23       	and	r24, r24
    12c2:	4a f0       	brmi	.+18     	; 0x12d6 <__mulsf3_pse+0x7a>
    12c4:	ee 0f       	add	r30, r30
    12c6:	ff 1f       	adc	r31, r31
    12c8:	bb 1f       	adc	r27, r27
    12ca:	66 1f       	adc	r22, r22
    12cc:	77 1f       	adc	r23, r23
    12ce:	88 1f       	adc	r24, r24
    12d0:	91 50       	subi	r25, 0x01	; 1
    12d2:	50 40       	sbci	r21, 0x00	; 0
    12d4:	a9 f7       	brne	.-22     	; 0x12c0 <__mulsf3_pse+0x64>
    12d6:	9e 3f       	cpi	r25, 0xFE	; 254
    12d8:	51 05       	cpc	r21, r1
    12da:	80 f0       	brcs	.+32     	; 0x12fc <__mulsf3_pse+0xa0>
    12dc:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_inf>
    12e0:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__fp_szero>
    12e4:	5f 3f       	cpi	r21, 0xFF	; 255
    12e6:	e4 f3       	brlt	.-8      	; 0x12e0 <__mulsf3_pse+0x84>
    12e8:	98 3e       	cpi	r25, 0xE8	; 232
    12ea:	d4 f3       	brlt	.-12     	; 0x12e0 <__mulsf3_pse+0x84>
    12ec:	86 95       	lsr	r24
    12ee:	77 95       	ror	r23
    12f0:	67 95       	ror	r22
    12f2:	b7 95       	ror	r27
    12f4:	f7 95       	ror	r31
    12f6:	e7 95       	ror	r30
    12f8:	9f 5f       	subi	r25, 0xFF	; 255
    12fa:	c1 f7       	brne	.-16     	; 0x12ec <__mulsf3_pse+0x90>
    12fc:	fe 2b       	or	r31, r30
    12fe:	88 0f       	add	r24, r24
    1300:	91 1d       	adc	r25, r1
    1302:	96 95       	lsr	r25
    1304:	87 95       	ror	r24
    1306:	97 f9       	bld	r25, 7
    1308:	08 95       	ret
    130a:	19 f4       	brne	.+6      	; 0x1312 <__mulsf3_pse+0xb6>
    130c:	16 f4       	brtc	.+4      	; 0x1312 <__mulsf3_pse+0xb6>
    130e:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__fp_nan>
    1312:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__fp_mpack>

00001316 <sqrt>:
    1316:	0e 94 df 08 	call	0x11be	; 0x11be <__fp_splitA>
    131a:	b8 f3       	brcs	.-18     	; 0x130a <__mulsf3_pse+0xae>
    131c:	99 23       	and	r25, r25
    131e:	c9 f3       	breq	.-14     	; 0x1312 <__mulsf3_pse+0xb6>
    1320:	b6 f3       	brts	.-20     	; 0x130e <__mulsf3_pse+0xb2>
    1322:	9f 57       	subi	r25, 0x7F	; 127
    1324:	55 0b       	sbc	r21, r21
    1326:	87 ff       	sbrs	r24, 7
    1328:	0e 94 cb 09 	call	0x1396	; 0x1396 <__fp_norm2>
    132c:	00 24       	eor	r0, r0
    132e:	a0 e6       	ldi	r26, 0x60	; 96
    1330:	40 ea       	ldi	r20, 0xA0	; 160
    1332:	90 01       	movw	r18, r0
    1334:	80 58       	subi	r24, 0x80	; 128
    1336:	56 95       	lsr	r21
    1338:	97 95       	ror	r25
    133a:	28 f4       	brcc	.+10     	; 0x1346 <sqrt+0x30>
    133c:	80 5c       	subi	r24, 0xC0	; 192
    133e:	66 0f       	add	r22, r22
    1340:	77 1f       	adc	r23, r23
    1342:	88 1f       	adc	r24, r24
    1344:	20 f0       	brcs	.+8      	; 0x134e <sqrt+0x38>
    1346:	26 17       	cp	r18, r22
    1348:	37 07       	cpc	r19, r23
    134a:	48 07       	cpc	r20, r24
    134c:	30 f4       	brcc	.+12     	; 0x135a <sqrt+0x44>
    134e:	62 1b       	sub	r22, r18
    1350:	73 0b       	sbc	r23, r19
    1352:	84 0b       	sbc	r24, r20
    1354:	20 29       	or	r18, r0
    1356:	31 29       	or	r19, r1
    1358:	4a 2b       	or	r20, r26
    135a:	a6 95       	lsr	r26
    135c:	17 94       	ror	r1
    135e:	07 94       	ror	r0
    1360:	20 25       	eor	r18, r0
    1362:	31 25       	eor	r19, r1
    1364:	4a 27       	eor	r20, r26
    1366:	58 f7       	brcc	.-42     	; 0x133e <sqrt+0x28>
    1368:	66 0f       	add	r22, r22
    136a:	77 1f       	adc	r23, r23
    136c:	88 1f       	adc	r24, r24
    136e:	20 f0       	brcs	.+8      	; 0x1378 <sqrt+0x62>
    1370:	26 17       	cp	r18, r22
    1372:	37 07       	cpc	r19, r23
    1374:	48 07       	cpc	r20, r24
    1376:	30 f4       	brcc	.+12     	; 0x1384 <sqrt+0x6e>
    1378:	62 0b       	sbc	r22, r18
    137a:	73 0b       	sbc	r23, r19
    137c:	84 0b       	sbc	r24, r20
    137e:	20 0d       	add	r18, r0
    1380:	31 1d       	adc	r19, r1
    1382:	41 1d       	adc	r20, r1
    1384:	a0 95       	com	r26
    1386:	81 f7       	brne	.-32     	; 0x1368 <sqrt+0x52>
    1388:	b9 01       	movw	r22, r18
    138a:	84 2f       	mov	r24, r20
    138c:	91 58       	subi	r25, 0x81	; 129
    138e:	88 0f       	add	r24, r24
    1390:	96 95       	lsr	r25
    1392:	87 95       	ror	r24
    1394:	08 95       	ret

00001396 <__fp_norm2>:
    1396:	91 50       	subi	r25, 0x01	; 1
    1398:	50 40       	sbci	r21, 0x00	; 0
    139a:	66 0f       	add	r22, r22
    139c:	77 1f       	adc	r23, r23
    139e:	88 1f       	adc	r24, r24
    13a0:	d2 f7       	brpl	.-12     	; 0x1396 <__fp_norm2>
    13a2:	08 95       	ret

000013a4 <__fp_powsodd>:
    13a4:	9f 93       	push	r25
    13a6:	8f 93       	push	r24
    13a8:	7f 93       	push	r23
    13aa:	6f 93       	push	r22
    13ac:	ff 93       	push	r31
    13ae:	ef 93       	push	r30
    13b0:	9b 01       	movw	r18, r22
    13b2:	ac 01       	movw	r20, r24
    13b4:	0e 94 18 09 	call	0x1230	; 0x1230 <__mulsf3>
    13b8:	ef 91       	pop	r30
    13ba:	ff 91       	pop	r31
    13bc:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__fp_powser>
    13c0:	2f 91       	pop	r18
    13c2:	3f 91       	pop	r19
    13c4:	4f 91       	pop	r20
    13c6:	5f 91       	pop	r21
    13c8:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__mulsf3>

000013cc <__divmodhi4>:
    13cc:	97 fb       	bst	r25, 7
    13ce:	07 2e       	mov	r0, r23
    13d0:	16 f4       	brtc	.+4      	; 0x13d6 <__divmodhi4+0xa>
    13d2:	00 94       	com	r0
    13d4:	07 d0       	rcall	.+14     	; 0x13e4 <__divmodhi4_neg1>
    13d6:	77 fd       	sbrc	r23, 7
    13d8:	09 d0       	rcall	.+18     	; 0x13ec <__divmodhi4_neg2>
    13da:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__udivmodhi4>
    13de:	07 fc       	sbrc	r0, 7
    13e0:	05 d0       	rcall	.+10     	; 0x13ec <__divmodhi4_neg2>
    13e2:	3e f4       	brtc	.+14     	; 0x13f2 <__divmodhi4_exit>

000013e4 <__divmodhi4_neg1>:
    13e4:	90 95       	com	r25
    13e6:	81 95       	neg	r24
    13e8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ea:	08 95       	ret

000013ec <__divmodhi4_neg2>:
    13ec:	70 95       	com	r23
    13ee:	61 95       	neg	r22
    13f0:	7f 4f       	sbci	r23, 0xFF	; 255

000013f2 <__divmodhi4_exit>:
    13f2:	08 95       	ret

000013f4 <__udivmodhi4>:
    13f4:	aa 1b       	sub	r26, r26
    13f6:	bb 1b       	sub	r27, r27
    13f8:	51 e1       	ldi	r21, 0x11	; 17
    13fa:	07 c0       	rjmp	.+14     	; 0x140a <__udivmodhi4_ep>

000013fc <__udivmodhi4_loop>:
    13fc:	aa 1f       	adc	r26, r26
    13fe:	bb 1f       	adc	r27, r27
    1400:	a6 17       	cp	r26, r22
    1402:	b7 07       	cpc	r27, r23
    1404:	10 f0       	brcs	.+4      	; 0x140a <__udivmodhi4_ep>
    1406:	a6 1b       	sub	r26, r22
    1408:	b7 0b       	sbc	r27, r23

0000140a <__udivmodhi4_ep>:
    140a:	88 1f       	adc	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	5a 95       	dec	r21
    1410:	a9 f7       	brne	.-22     	; 0x13fc <__udivmodhi4_loop>
    1412:	80 95       	com	r24
    1414:	90 95       	com	r25
    1416:	bc 01       	movw	r22, r24
    1418:	cd 01       	movw	r24, r26
    141a:	08 95       	ret

0000141c <_exit>:
    141c:	f8 94       	cli

0000141e <__stop_program>:
    141e:	ff cf       	rjmp	.-2      	; 0x141e <__stop_program>
