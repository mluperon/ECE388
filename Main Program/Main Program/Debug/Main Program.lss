
Main Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d6  00800100  00000982  00000a16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000982  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  008001d6  008001d6  00000aec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000185d  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aee  00000000  00000000  00002449  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000092b  00000000  00000000  00002f37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00003864  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061a  00000000  00000000  00003a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000949  00000000  00000000  0000406e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000049b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__vector_4>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__vector_35>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 e8       	ldi	r30, 0x82	; 130
  c8:	f9 e0       	ldi	r31, 0x09	; 9
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a6 3d       	cpi	r26, 0xD6	; 214
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	22 e0       	ldi	r18, 0x02	; 2
  d8:	a6 ed       	ldi	r26, 0xD6	; 214
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a2 30       	cpi	r26, 0x02	; 2
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 05 02 	call	0x40a	; 0x40a <main>
  ea:	0c 94 bf 04 	jmp	0x97e	; 0x97e <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <lcdCommand>:


//*******************************************************
void lcdCommand( unsigned char cmnd )
{
  LCD_DPRT = cmnd;			
  f2:	8b b9       	out	0x0b, r24	; 11
  LCD_CPRT &= ~ (1<<LCD_RS);
  f4:	70 98       	cbi	0x0e, 0	; 14
  LCD_CPRT &= ~ (1<<LCD_RW);
  f6:	71 98       	cbi	0x0e, 1	; 14
  LCD_CPRT |= (1<<LCD_EN);	
  f8:	72 9a       	sbi	0x0e, 2	; 14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	85 e0       	ldi	r24, 0x05	; 5
  fc:	8a 95       	dec	r24
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcdCommand+0xa>
 100:	00 00       	nop
  _delay_us(1);				
  LCD_CPRT &= ~ (1<<LCD_EN);
 102:	72 98       	cbi	0x0e, 2	; 14
 104:	8f e8       	ldi	r24, 0x8F	; 143
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcdCommand+0x16>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <lcdCommand+0x1c>
 10e:	00 00       	nop
 110:	08 95       	ret

00000112 <lcdData>:
}

//*******************************************************
void lcdData( unsigned char data )
{
  LCD_DPRT = data;			
 112:	8b b9       	out	0x0b, r24	; 11
  LCD_CPRT |= (1<<LCD_RS);	
 114:	70 9a       	sbi	0x0e, 0	; 14
  LCD_CPRT &= ~ (1<<LCD_RW);
 116:	71 98       	cbi	0x0e, 1	; 14
  LCD_CPRT |= (1<<LCD_EN);	
 118:	72 9a       	sbi	0x0e, 2	; 14
 11a:	85 e0       	ldi	r24, 0x05	; 5
 11c:	8a 95       	dec	r24
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcdData+0xa>
 120:	00 00       	nop
  _delay_us(1);				
  LCD_CPRT &= ~ (1<<LCD_EN);
 122:	72 98       	cbi	0x0e, 2	; 14
 124:	8f e8       	ldi	r24, 0x8F	; 143
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcdData+0x16>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcdData+0x1c>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <lcd_init>:
}

//*******************************************************
void lcd_init()
{
  LCD_DDDR = 0xFF;
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	8a b9       	out	0x0a, r24	; 10
  LCD_CDDR = 0xFF;
 136:	8d b9       	out	0x0d, r24	; 13
 
  LCD_CPRT &=~(1<<LCD_EN);	
 138:	72 98       	cbi	0x0e, 2	; 14
 13a:	8f e3       	ldi	r24, 0x3F	; 63
 13c:	9f e1       	ldi	r25, 0x1F	; 31
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_init+0xc>
 142:	00 c0       	rjmp	.+0      	; 0x144 <lcd_init+0x12>
 144:	00 00       	nop
  _delay_us(2000);			
  lcdCommand(0x38);					
 146:	88 e3       	ldi	r24, 0x38	; 56
 148:	0e 94 79 00 	call	0xf2	; 0xf2 <lcdCommand>
  lcdCommand(0x0C);
 14c:	8c e0       	ldi	r24, 0x0C	; 12
 14e:	0e 94 79 00 	call	0xf2	; 0xf2 <lcdCommand>
  lcdCommand(0x01); //clear
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	0e 94 79 00 	call	0xf2	; 0xf2 <lcdCommand>
 158:	8f e3       	ldi	r24, 0x3F	; 63
 15a:	9f e1       	ldi	r25, 0x1F	; 31
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_init+0x2a>
 160:	00 c0       	rjmp	.+0      	; 0x162 <lcd_init+0x30>
 162:	00 00       	nop
  _delay_us(2000);			
  lcdCommand(0x06);			
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	0e 94 79 00 	call	0xf2	; 0xf2 <lcdCommand>
 16a:	08 95       	ret

0000016c <lcd_gotoxy>:
}

//*******************************************************
void lcd_gotoxy(unsigned char x, unsigned char y)
{  
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	00 d0       	rcall	.+0      	; 0x172 <lcd_gotoxy+0x6>
 172:	00 d0       	rcall	.+0      	; 0x174 <lcd_gotoxy+0x8>
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
 unsigned char firstCharAdr[]={0x80,0xC0,0x94,0xD4};//table 12-5  
 178:	90 e8       	ldi	r25, 0x80	; 128
 17a:	99 83       	std	Y+1, r25	; 0x01
 17c:	90 ec       	ldi	r25, 0xC0	; 192
 17e:	9a 83       	std	Y+2, r25	; 0x02
 180:	94 e9       	ldi	r25, 0x94	; 148
 182:	9b 83       	std	Y+3, r25	; 0x03
 184:	94 ed       	ldi	r25, 0xD4	; 212
 186:	9c 83       	std	Y+4, r25	; 0x04
 lcdCommand(firstCharAdr[y-1] + x - 1);
 188:	fe 01       	movw	r30, r28
 18a:	e6 0f       	add	r30, r22
 18c:	f1 1d       	adc	r31, r1
 18e:	81 50       	subi	r24, 0x01	; 1
 190:	90 81       	ld	r25, Z
 192:	89 0f       	add	r24, r25
 194:	0e 94 79 00 	call	0xf2	; 0xf2 <lcdCommand>
 198:	8f e8       	ldi	r24, 0x8F	; 143
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_gotoxy+0x30>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <lcd_gotoxy+0x36>
 1a2:	00 00       	nop
 _delay_us(100);	
}
 1a4:	0f 90       	pop	r0
 1a6:	0f 90       	pop	r0
 1a8:	0f 90       	pop	r0
 1aa:	0f 90       	pop	r0
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <lcd_print>:

//*******************************************************
void lcd_print( char * str )
{
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	fc 01       	movw	r30, r24
  unsigned char i = 0 ;
  while(str[i]!=0)
 1ba:	80 81       	ld	r24, Z
 1bc:	88 23       	and	r24, r24
 1be:	59 f0       	breq	.+22     	; 0x1d6 <lcd_print+0x24>
 1c0:	8f 01       	movw	r16, r30
 1c2:	c0 e0       	ldi	r28, 0x00	; 0
  {
    lcdData(str[i]);
 1c4:	0e 94 89 00 	call	0x112	; 0x112 <lcdData>
    i++ ;
 1c8:	cf 5f       	subi	r28, 0xFF	; 255

//*******************************************************
void lcd_print( char * str )
{
  unsigned char i = 0 ;
  while(str[i]!=0)
 1ca:	f8 01       	movw	r30, r16
 1cc:	ec 0f       	add	r30, r28
 1ce:	f1 1d       	adc	r31, r1
 1d0:	80 81       	ld	r24, Z
 1d2:	81 11       	cpse	r24, r1
 1d4:	f7 cf       	rjmp	.-18     	; 0x1c4 <lcd_print+0x12>
  {
    lcdData(str[i]);
    i++ ;
  }
}
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	08 95       	ret

000001de <ftoa>:
 */ 

#ifndef FLOATCONVERT_H_
#define FLOATCONVERT_H_
void ftoa(int n, char* res)
{
 1de:	ef 92       	push	r14
 1e0:	ff 92       	push	r15
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
 1ee:	2b 97       	sbiw	r28, 0x0b	; 11
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	cd bf       	out	0x3d, r28	; 61
 1fa:	8c 01       	movw	r16, r24
 1fc:	9b 01       	movw	r18, r22
	char numbers[11] = "0123456789";
 1fe:	8b e0       	ldi	r24, 0x0B	; 11
 200:	e2 e0       	ldi	r30, 0x02	; 2
 202:	f1 e0       	ldi	r31, 0x01	; 1
 204:	de 01       	movw	r26, r28
 206:	11 96       	adiw	r26, 0x01	; 1
 208:	01 90       	ld	r0, Z+
 20a:	0d 92       	st	X+, r0
 20c:	8a 95       	dec	r24
 20e:	e1 f7       	brne	.-8      	; 0x208 <ftoa+0x2a>
	int power = 0;

	if (n < 10)
 210:	0a 30       	cpi	r16, 0x0A	; 10
 212:	11 05       	cpc	r17, r1
 214:	0c f4       	brge	.+2      	; 0x218 <ftoa+0x3a>
 216:	5a c0       	rjmp	.+180    	; 0x2cc <ftoa+0xee>
	power = 0;
	else if (n < 100)
 218:	04 36       	cpi	r16, 0x64	; 100
 21a:	11 05       	cpc	r17, r1
 21c:	0c f5       	brge	.+66     	; 0x260 <ftoa+0x82>

		break;
		
		
		case 1:
		res[0] = '0';
 21e:	80 e3       	ldi	r24, 0x30	; 48
 220:	db 01       	movw	r26, r22
 222:	8c 93       	st	X, r24
		res[1] = numbers[n/10];
 224:	c8 01       	movw	r24, r16
 226:	6a e0       	ldi	r22, 0x0A	; 10
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	0e 94 97 04 	call	0x92e	; 0x92e <__divmodhi4>
 22e:	e1 e0       	ldi	r30, 0x01	; 1
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	ec 0f       	add	r30, r28
 234:	fd 1f       	adc	r31, r29
 236:	e6 0f       	add	r30, r22
 238:	f7 1f       	adc	r31, r23
 23a:	40 81       	ld	r20, Z
 23c:	f9 01       	movw	r30, r18
 23e:	41 83       	std	Z+1, r20	; 0x01
		res[2] = '.';
 240:	4e e2       	ldi	r20, 0x2E	; 46
 242:	42 83       	std	Z+2, r20	; 0x02
		res[3] = numbers[n % 10];
 244:	e1 e0       	ldi	r30, 0x01	; 1
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	ec 0f       	add	r30, r28
 24a:	fd 1f       	adc	r31, r29
 24c:	e8 0f       	add	r30, r24
 24e:	f9 1f       	adc	r31, r25
 250:	80 81       	ld	r24, Z
 252:	d9 01       	movw	r26, r18
 254:	13 96       	adiw	r26, 0x03	; 3
 256:	8c 93       	st	X, r24
 258:	13 97       	sbiw	r26, 0x03	; 3
		res[4] = '\0';
 25a:	14 96       	adiw	r26, 0x04	; 4
 25c:	1c 92       	st	X, r1

		break;
 25e:	49 c0       	rjmp	.+146    	; 0x2f2 <ftoa+0x114>
		
		
		case 2:
		res[0] = numbers[n / 100];
 260:	c8 01       	movw	r24, r16
 262:	64 e6       	ldi	r22, 0x64	; 100
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	0e 94 97 04 	call	0x92e	; 0x92e <__divmodhi4>
 26a:	7c 01       	movw	r14, r24
 26c:	e1 e0       	ldi	r30, 0x01	; 1
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	ec 0f       	add	r30, r28
 272:	fd 1f       	adc	r31, r29
 274:	e6 0f       	add	r30, r22
 276:	f7 1f       	adc	r31, r23
 278:	80 81       	ld	r24, Z
 27a:	f9 01       	movw	r30, r18
 27c:	80 83       	st	Z, r24
		res[1] = numbers[(n / 10) % 10];
 27e:	ea e0       	ldi	r30, 0x0A	; 10
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	c8 01       	movw	r24, r16
 284:	bf 01       	movw	r22, r30
 286:	0e 94 97 04 	call	0x92e	; 0x92e <__divmodhi4>
 28a:	cb 01       	movw	r24, r22
 28c:	bf 01       	movw	r22, r30
 28e:	0e 94 97 04 	call	0x92e	; 0x92e <__divmodhi4>
 292:	a1 e0       	ldi	r26, 0x01	; 1
 294:	b0 e0       	ldi	r27, 0x00	; 0
 296:	ac 0f       	add	r26, r28
 298:	bd 1f       	adc	r27, r29
 29a:	a8 0f       	add	r26, r24
 29c:	b9 1f       	adc	r27, r25
 29e:	8c 91       	ld	r24, X
 2a0:	d9 01       	movw	r26, r18
 2a2:	11 96       	adiw	r26, 0x01	; 1
 2a4:	8c 93       	st	X, r24
 2a6:	11 97       	sbiw	r26, 0x01	; 1
		res[2] = '.';
 2a8:	8e e2       	ldi	r24, 0x2E	; 46
 2aa:	12 96       	adiw	r26, 0x02	; 2
 2ac:	8c 93       	st	X, r24
		res[3] = numbers[(n % 100) % 10];
 2ae:	c7 01       	movw	r24, r14
 2b0:	bf 01       	movw	r22, r30
 2b2:	0e 94 97 04 	call	0x92e	; 0x92e <__divmodhi4>
 2b6:	e1 e0       	ldi	r30, 0x01	; 1
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	ec 0f       	add	r30, r28
 2bc:	fd 1f       	adc	r31, r29
 2be:	e8 0f       	add	r30, r24
 2c0:	f9 1f       	adc	r31, r25
 2c2:	80 81       	ld	r24, Z
 2c4:	f9 01       	movw	r30, r18
 2c6:	83 83       	std	Z+3, r24	; 0x03
		res[4] = '\0';
 2c8:	14 82       	std	Z+4, r1	; 0x04
		break;
 2ca:	13 c0       	rjmp	.+38     	; 0x2f2 <ftoa+0x114>
	else
	power = 2;
	switch (power)
	{
		case 0: // tenth decimal place
		res[0] = '0';
 2cc:	80 e3       	ldi	r24, 0x30	; 48
 2ce:	db 01       	movw	r26, r22
 2d0:	8c 93       	st	X, r24
		res[1] = '0';
 2d2:	11 96       	adiw	r26, 0x01	; 1
 2d4:	8c 93       	st	X, r24
 2d6:	11 97       	sbiw	r26, 0x01	; 1
		res[2] = '.';
 2d8:	8e e2       	ldi	r24, 0x2E	; 46
 2da:	12 96       	adiw	r26, 0x02	; 2
 2dc:	8c 93       	st	X, r24
 2de:	12 97       	sbiw	r26, 0x02	; 2
		res[3] = numbers[n];
 2e0:	fe 01       	movw	r30, r28
 2e2:	e0 0f       	add	r30, r16
 2e4:	f1 1f       	adc	r31, r17
 2e6:	81 81       	ldd	r24, Z+1	; 0x01
 2e8:	13 96       	adiw	r26, 0x03	; 3
 2ea:	8c 93       	st	X, r24
 2ec:	13 97       	sbiw	r26, 0x03	; 3
		res[4] = '\0';
 2ee:	14 96       	adiw	r26, 0x04	; 4
 2f0:	1c 92       	st	X, r1
		res[4] = '\0';
		break;
		
	}

}
 2f2:	2b 96       	adiw	r28, 0x0b	; 11
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	f8 94       	cli
 2f8:	de bf       	out	0x3e, r29	; 62
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	cd bf       	out	0x3d, r28	; 61
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	1f 91       	pop	r17
 304:	0f 91       	pop	r16
 306:	ff 90       	pop	r15
 308:	ef 90       	pop	r14
 30a:	08 95       	ret

0000030c <__vector_35>:
}


// Timer used to track seconds for startup routine of speed controller
ISR (TIMER3_OVF_vect)
{
 30c:	1f 92       	push	r1
 30e:	0f 92       	push	r0
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	0f 92       	push	r0
 314:	11 24       	eor	r1, r1
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
	TCNT3 = -15625; // reset the 1sec timer value 
 31a:	87 ef       	ldi	r24, 0xF7	; 247
 31c:	92 ec       	ldi	r25, 0xC2	; 194
 31e:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
 322:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
	overflowCount++;
 326:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <__data_end>
 32a:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <__data_end+0x1>
 32e:	01 96       	adiw	r24, 0x01	; 1
 330:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <__data_end+0x1>
 334:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <__data_end>
	if (overflowCount == 5) // wait 5 seconds
 338:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <__data_end>
 33c:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <__data_end+0x1>
 340:	05 97       	sbiw	r24, 0x05	; 5
 342:	91 f4       	brne	.+36     	; 0x368 <__vector_35+0x5c>
	{
		OCR1A=38000-1;	// adjust pulse width of waveform being generated from 2ms to 1ms
 344:	8f e6       	ldi	r24, 0x6F	; 111
 346:	94 e9       	ldi	r25, 0x94	; 148
 348:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 34c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
		TCNT3 = 0; // set counter to 0
 350:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
 354:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
		TIMSK3 = (0 << TOIE3); // disable timer
 358:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
		setupFlag = 1;
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <setupFlag+0x1>
 364:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <setupFlag>
	}
}
 368:	9f 91       	pop	r25
 36a:	8f 91       	pop	r24
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <peripheralSetup>:

/************************************************* STARTUP ROUTINE **********************************************************************************/

void peripheralSetup()
{
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
	PORTE &= ~(1<<3); // Ensure 12V is OFF
 37a:	73 98       	cbi	0x0e, 3	; 14
	DDRE &= ~(1<<3);  // Ensure 12V is OFF
 37c:	6b 98       	cbi	0x0d, 3	; 13
	
	//********************************************** PIN CHANGE INTERRUPT SETUP **********************************************//
	DDRC &= ~(_BV(2) | _BV(1) | _BV(4)); // sets PORTC 1, 2, and 4 to input (input from rotary encoder)
 37e:	87 b1       	in	r24, 0x07	; 7
 380:	89 7e       	andi	r24, 0xE9	; 233
 382:	87 b9       	out	0x07, r24	; 7
	// 4 = SW signal (button press)
	
	
	//********************************************** PWM SETUP **********************************************//
	// Set up PWM on PortB(1)
	DDRB |= (1<<1); // set PINB 1 to output
 384:	21 9a       	sbi	0x04, 1	; 4
	PORTB &= ~(1<<1); // Ensure PINB 1 is not outputting voltage
 386:	29 98       	cbi	0x05, 1	; 5
	TCCR1A= (0b11 << COM1A0) | ( 0b00 << COM1B0) | (0b10 << WGM10); // set up PWM with pre-scalar
 388:	82 ec       	ldi	r24, 0xC2	; 194
 38a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B= (0b11 << WGM12) | (0b010<< CS10);
 38e:	8a e1       	ldi	r24, 0x1A	; 26
 390:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	ICR1= 40000-1; // (20MS /8 PRESCALAR)
 394:	8f e3       	ldi	r24, 0x3F	; 63
 396:	9c e9       	ldi	r25, 0x9C	; 156
 398:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 39c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	OCR1A=36000-1; // 1000->4000 0.5ms to 2ms *** adjust ***
 3a0:	8f e9       	ldi	r24, 0x9F	; 159
 3a2:	9c e8       	ldi	r25, 0x8C	; 140
 3a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 3a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	
	// Set up 5 second timer for startup
	TCCR3A = 0; //(0b00 << COM3A0) | (0b00 << COM3B0)
 3ac:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
	TCCR3B = (0 << ICNC3) | (0 << ICES3) | (0b00 << WGM32) | (0b101 << CS30);
 3b0:	85 e0       	ldi	r24, 0x05	; 5
 3b2:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__DATA_REGION_ORIGIN__+0x31>
	TIMSK3 = (0 << TOIE3); // Ensure timer 3 is disabled
 3b6:	c1 e7       	ldi	r28, 0x71	; 113
 3b8:	d0 e0       	ldi	r29, 0x00	; 0
 3ba:	18 82       	st	Y, r1
	TCNT3 = -15625; // One second timer value
 3bc:	87 ef       	ldi	r24, 0xF7	; 247
 3be:	92 ec       	ldi	r25, 0xC2	; 194
 3c0:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__DATA_REGION_ORIGIN__+0x35>
 3c4:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__DATA_REGION_ORIGIN__+0x34>
	
	// Set up LCD and print starting message state
	lcd_init(); // initialize the LCD according to Dr. Viall's 263 code
 3c8:	0e 94 99 00 	call	0x132	; 0x132 <lcd_init>
	lcd_gotoxy(1,1); // go to row 1 column 1 of LCD
 3cc:	61 e0       	ldi	r22, 0x01	; 1
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_gotoxy>
	lcd_print("Starting system"); // Print ->   [HEIGHT] ANGLE
 3d4:	8d e0       	ldi	r24, 0x0D	; 13
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
	lcd_gotoxy(1,2); // go to row 2 column 2 of LCD
 3dc:	62 e0       	ldi	r22, 0x02	; 2
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_gotoxy>
	lcd_print("Please wait..."); // Print -> 00.0 00.0
 3e4:	8d e1       	ldi	r24, 0x1D	; 29
 3e6:	91 e0       	ldi	r25, 0x01	; 1
 3e8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
	
	
	sei(); // enable global interrupts
 3ec:	78 94       	sei
	
	// ***** SPEED CONTROLLER STARTUP ***** //
	TIMSK3 = (1 << TOIE3); // Enable PWM timer for startup
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	88 83       	st	Y, r24
	PORTE &= ~(1<<3); // TURN ON 12V SUPPLY
 3f2:	73 98       	cbi	0x0e, 3	; 14
	DDRE |= (1<<3);   // TURN ON 12V SUPPLY
 3f4:	6b 9a       	sbi	0x0d, 3	; 13
	
	PORTB |= (1<<1); // Begin outputting 2ms pulse
 3f6:	29 9a       	sbi	0x05, 1	; 5
	// Timer 3 will auto adjust pulse length after this routine
	
	while(setupFlag != 1)
 3f8:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <setupFlag>
 3fc:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <setupFlag+0x1>
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	d1 f7       	brne	.-12     	; 0x3f8 <peripheralSetup+0x82>
	{
		// Wait for setup to finish
	}
}
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	08 95       	ret

0000040a <main>:
volatile int overflowCount = 0; // global variable used for tracking how many times the timer overflows (each overflow is equivalent to one second)

int main(void)
{
	// These variables are Char arrays as the LCD cannot output int/float values, it must be sent as a string
	angleConv[0]='0'; // v Set up height and angle to start at 00.0 value
 40a:	e8 ed       	ldi	r30, 0xD8	; 216
 40c:	f1 e0       	ldi	r31, 0x01	; 1
 40e:	80 e3       	ldi	r24, 0x30	; 48
 410:	80 83       	st	Z, r24
	angleConv[1]='0';
 412:	81 83       	std	Z+1, r24	; 0x01
	angleConv[2]='.';
 414:	9e e2       	ldi	r25, 0x2E	; 46
 416:	92 83       	std	Z+2, r25	; 0x02
	angleConv[3]='0';
 418:	83 83       	std	Z+3, r24	; 0x03
	heightConv[0]='0';
 41a:	e8 ee       	ldi	r30, 0xE8	; 232
 41c:	f1 e0       	ldi	r31, 0x01	; 1
 41e:	80 83       	st	Z, r24
	heightConv[1]='0';
 420:	81 83       	std	Z+1, r24	; 0x01
	heightConv[2]='.';
 422:	92 83       	std	Z+2, r25	; 0x02
	heightConv[3]='0';// ^
 424:	83 83       	std	Z+3, r24	; 0x03
	
	peripheralSetup();
 426:	0e 94 bb 01 	call	0x376	; 0x376 <peripheralSetup>
	
	//SETUP COMPLETE
	lcd_gotoxy(1,1); // go to row 1 column 1 of LCD
 42a:	61 e0       	ldi	r22, 0x01	; 1
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_gotoxy>
	lcd_print("System start    "); // Print ->   [HEIGHT] ANGLE
 432:	8c e2       	ldi	r24, 0x2C	; 44
 434:	91 e0       	ldi	r25, 0x01	; 1
 436:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
	lcd_gotoxy(1,2); // go to row 2 column 2 of LCD
 43a:	62 e0       	ldi	r22, 0x02	; 2
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_gotoxy>
	lcd_print("completed!      "); // Print -> 00.0 00.0
 442:	8d e3       	ldi	r24, 0x3D	; 61
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 44a:	2f ef       	ldi	r18, 0xFF	; 255
 44c:	83 ed       	ldi	r24, 0xD3	; 211
 44e:	90 e3       	ldi	r25, 0x30	; 48
 450:	21 50       	subi	r18, 0x01	; 1
 452:	80 40       	sbci	r24, 0x00	; 0
 454:	90 40       	sbci	r25, 0x00	; 0
 456:	e1 f7       	brne	.-8      	; 0x450 <main+0x46>
 458:	00 c0       	rjmp	.+0      	; 0x45a <main+0x50>
 45a:	00 00       	nop
	_delay_ms(1000);
	lcd_print("Enabling UI...  ");
 45c:	8e e4       	ldi	r24, 0x4E	; 78
 45e:	91 e0       	ldi	r25, 0x01	; 1
 460:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
	lcd_print("Enjoy! :)       ");
 464:	8f e5       	ldi	r24, 0x5F	; 95
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
	
	// ***** Enable User Control ***** //		
	PCICR |= (1<<PCIE1); // Enable pin change interrupt on PORTC
 46c:	e8 e6       	ldi	r30, 0x68	; 104
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	82 60       	ori	r24, 0x02	; 2
 474:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PCINT11) | (1<<PCINT9) | (1<<PCINT10); // Enable Pins 1,2, and 4 to trigger this interrupt
 476:	ec e6       	ldi	r30, 0x6C	; 108
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	8e 60       	ori	r24, 0x0E	; 14
 47e:	80 83       	st	Z, r24
	
	lcd_gotoxy(1,1); // go to row 1 column 1 of LCD
 480:	61 e0       	ldi	r22, 0x01	; 1
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_gotoxy>
	lcd_print(HEIGHT_SELECT); // Print ->   [HEIGHT] ANGLE
 488:	80 e7       	ldi	r24, 0x70	; 112
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
	lcd_gotoxy(1,2); // go to row 2 column 2 of LCD
 490:	62 e0       	ldi	r22, 0x02	; 2
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_gotoxy>
	lcd_print(DEFAULT_ANGLE); // Print -> 00.0 00.0
 498:	81 e8       	ldi	r24, 0x81	; 129
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
 4a0:	ff cf       	rjmp	.-2      	; 0x4a0 <main+0x96>

000004a2 <print_height_angle>:

/************************************************* NUMBER CHANING FUNCTIONS **********************************************************************************/

// Function used to print either the height or angle selection ** THIS FUNCTION IS ONLY FOR CHANGING THE SELECTION **
void print_height_angle(char *angleConv, char *heightConv, int heightSelect)
{
 4a2:	ef 92       	push	r14
 4a4:	ff 92       	push	r15
 4a6:	0f 93       	push	r16
 4a8:	1f 93       	push	r17
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
 4ae:	ec 01       	movw	r28, r24
 4b0:	8b 01       	movw	r16, r22
 4b2:	7a 01       	movw	r14, r20
	lcd_gotoxy(1,1);
 4b4:	61 e0       	ldi	r22, 0x01	; 1
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_gotoxy>
	if (heightSelect == 1)
 4bc:	ea 94       	dec	r14
 4be:	ef 28       	or	r14, r15
 4c0:	29 f4       	brne	.+10     	; 0x4cc <print_height_angle+0x2a>
	lcd_print(HEIGHT_SELECT);
 4c2:	80 e7       	ldi	r24, 0x70	; 112
 4c4:	91 e0       	ldi	r25, 0x01	; 1
 4c6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
 4ca:	04 c0       	rjmp	.+8      	; 0x4d4 <print_height_angle+0x32>
	else
	lcd_print(ANGLE_SELECT);
 4cc:	80 e9       	ldi	r24, 0x90	; 144
 4ce:	91 e0       	ldi	r25, 0x01	; 1
 4d0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
	// un-select bottom row
	lcd_gotoxy(1,2);
 4d4:	62 e0       	ldi	r22, 0x02	; 2
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_gotoxy>
	lcd_print(" ");
 4dc:	8e e6       	ldi	r24, 0x6E	; 110
 4de:	91 e0       	ldi	r25, 0x01	; 1
 4e0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
	lcd_print(heightConv);
 4e4:	c8 01       	movw	r24, r16
 4e6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
	lcd_gotoxy(6,2);
 4ea:	62 e0       	ldi	r22, 0x02	; 2
 4ec:	86 e0       	ldi	r24, 0x06	; 6
 4ee:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_gotoxy>
	lcd_print(" ");
 4f2:	8e e6       	ldi	r24, 0x6E	; 110
 4f4:	91 e0       	ldi	r25, 0x01	; 1
 4f6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
	lcd_gotoxy(10,2);
 4fa:	62 e0       	ldi	r22, 0x02	; 2
 4fc:	8a e0       	ldi	r24, 0x0A	; 10
 4fe:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_gotoxy>
	lcd_print(" ");
 502:	8e e6       	ldi	r24, 0x6E	; 110
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
	lcd_print(angleConv);
 50a:	ce 01       	movw	r24, r28
 50c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
	lcd_gotoxy(15,2);
 510:	62 e0       	ldi	r22, 0x02	; 2
 512:	8f e0       	ldi	r24, 0x0F	; 15
 514:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_gotoxy>
	lcd_print(" ");
 518:	8e e6       	ldi	r24, 0x6E	; 110
 51a:	91 e0       	ldi	r25, 0x01	; 1
 51c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
}
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	1f 91       	pop	r17
 526:	0f 91       	pop	r16
 528:	ff 90       	pop	r15
 52a:	ef 90       	pop	r14
 52c:	08 95       	ret

0000052e <print_height_change>:

// Function used to print a change in the height value
void print_height_change(char *conversion)
{
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	ec 01       	movw	r28, r24
	//ensure height becomes unselected
	lcd_gotoxy(1,1);
 534:	61 e0       	ldi	r22, 0x01	; 1
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_gotoxy>
	lcd_print(NO_HS_SELECT);
 53c:	81 ea       	ldi	r24, 0xA1	; 161
 53e:	91 e0       	ldi	r25, 0x01	; 1
 540:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
	lcd_gotoxy(1,2);
 544:	62 e0       	ldi	r22, 0x02	; 2
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_gotoxy>
	lcd_print("[");
 54c:	82 eb       	ldi	r24, 0xB2	; 178
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
	lcd_gotoxy(2,2);
 554:	62 e0       	ldi	r22, 0x02	; 2
 556:	82 e0       	ldi	r24, 0x02	; 2
 558:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_gotoxy>
	lcd_print(conversion);
 55c:	ce 01       	movw	r24, r28
 55e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
	lcd_gotoxy(6,2);
 562:	62 e0       	ldi	r22, 0x02	; 2
 564:	86 e0       	ldi	r24, 0x06	; 6
 566:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_gotoxy>
	lcd_print("]");
 56a:	8f e9       	ldi	r24, 0x9F	; 159
 56c:	91 e0       	ldi	r25, 0x01	; 1
 56e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
}
 572:	df 91       	pop	r29
 574:	cf 91       	pop	r28
 576:	08 95       	ret

00000578 <print_angle_change>:

// Function used to print a change in the angle value
void print_angle_change(char *conversion)
{
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	ec 01       	movw	r28, r24
	lcd_gotoxy(1,1);
 57e:	61 e0       	ldi	r22, 0x01	; 1
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_gotoxy>
	lcd_print(NO_HS_SELECT);
 586:	81 ea       	ldi	r24, 0xA1	; 161
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
	lcd_gotoxy(10,2);
 58e:	62 e0       	ldi	r22, 0x02	; 2
 590:	8a e0       	ldi	r24, 0x0A	; 10
 592:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_gotoxy>
	lcd_print("[");
 596:	82 eb       	ldi	r24, 0xB2	; 178
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
	lcd_gotoxy(11,2);
 59e:	62 e0       	ldi	r22, 0x02	; 2
 5a0:	8b e0       	ldi	r24, 0x0B	; 11
 5a2:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_gotoxy>
	lcd_print(conversion);
 5a6:	ce 01       	movw	r24, r28
 5a8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
	lcd_gotoxy(15,2);
 5ac:	62 e0       	ldi	r22, 0x02	; 2
 5ae:	8f e0       	ldi	r24, 0x0F	; 15
 5b0:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_gotoxy>
	lcd_print("]");
 5b4:	8f e9       	ldi	r24, 0x9F	; 159
 5b6:	91 e0       	ldi	r25, 0x01	; 1
 5b8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
	
}
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	08 95       	ret

000005c2 <__vector_4>:
//	-Button press either:
//		- Confirms height / angle adjustment
//		- Selects angle / height and moves user to adjust height / angle

ISR(PCINT1_vect)
{
 5c2:	1f 92       	push	r1
 5c4:	0f 92       	push	r0
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	0f 92       	push	r0
 5ca:	11 24       	eor	r1, r1
 5cc:	2f 93       	push	r18
 5ce:	3f 93       	push	r19
 5d0:	4f 93       	push	r20
 5d2:	5f 93       	push	r21
 5d4:	6f 93       	push	r22
 5d6:	7f 93       	push	r23
 5d8:	8f 93       	push	r24
 5da:	9f 93       	push	r25
 5dc:	af 93       	push	r26
 5de:	bf 93       	push	r27
 5e0:	cf 93       	push	r28
 5e2:	df 93       	push	r29
 5e4:	ef 93       	push	r30
 5e6:	ff 93       	push	r31
 5e8:	8f e1       	ldi	r24, 0x1F	; 31
 5ea:	9e e4       	ldi	r25, 0x4E	; 78
 5ec:	01 97       	sbiw	r24, 0x01	; 1
 5ee:	f1 f7       	brne	.-4      	; 0x5ec <__vector_4+0x2a>
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <__vector_4+0x30>
 5f2:	00 00       	nop
	_delay_ms(5);
	// 	ftoa(tmp,heightConv);
	// 	print_height_change(heightConv);
	
	if(PINC == RIGHT) //if right turn triggered interrupt
 5f4:	86 b1       	in	r24, 0x06	; 6
 5f6:	8b 37       	cpi	r24, 0x7B	; 123
 5f8:	09 f0       	breq	.+2      	; 0x5fc <__vector_4+0x3a>
 5fa:	93 c0       	rjmp	.+294    	; 0x722 <__vector_4+0x160>
	{
		switch(state)
 5fc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
 600:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>
 604:	81 30       	cpi	r24, 0x01	; 1
 606:	91 05       	cpc	r25, r1
 608:	d1 f0       	breq	.+52     	; 0x63e <__vector_4+0x7c>
 60a:	1c f4       	brge	.+6      	; 0x612 <__vector_4+0x50>
 60c:	89 2b       	or	r24, r25
 60e:	41 f0       	breq	.+16     	; 0x620 <__vector_4+0x5e>
 610:	88 c0       	rjmp	.+272    	; 0x722 <__vector_4+0x160>
 612:	82 30       	cpi	r24, 0x02	; 2
 614:	91 05       	cpc	r25, r1
 616:	a9 f1       	breq	.+106    	; 0x682 <__vector_4+0xc0>
 618:	03 97       	sbiw	r24, 0x03	; 3
 61a:	09 f4       	brne	.+2      	; 0x61e <__vector_4+0x5c>
 61c:	5b c0       	rjmp	.+182    	; 0x6d4 <__vector_4+0x112>
 61e:	81 c0       	rjmp	.+258    	; 0x722 <__vector_4+0x160>
		{
			case HEIGHT: // change to angle state
				print_height_angle(angleConv,heightConv,0);
 620:	40 e0       	ldi	r20, 0x00	; 0
 622:	50 e0       	ldi	r21, 0x00	; 0
 624:	68 ee       	ldi	r22, 0xE8	; 232
 626:	71 e0       	ldi	r23, 0x01	; 1
 628:	88 ed       	ldi	r24, 0xD8	; 216
 62a:	91 e0       	ldi	r25, 0x01	; 1
 62c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <print_height_angle>
				state = ANGLE;
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
 638:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>
				break;
 63c:	72 c0       	rjmp	.+228    	; 0x722 <__vector_4+0x160>
			case ANGLE: // Change increment/decrement value to 10
				valueChange = 10;
 63e:	8a e0       	ldi	r24, 0x0A	; 10
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 646:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				cli();
 64a:	f8 94       	cli
				lcd_gotoxy(1,1);
 64c:	61 e0       	ldi	r22, 0x01	; 1
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_gotoxy>
				lcd_print("Order +-1       ");
 654:	84 eb       	ldi	r24, 0xB4	; 180
 656:	91 e0       	ldi	r25, 0x01	; 1
 658:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
 65c:	9f ef       	ldi	r25, 0xFF	; 255
 65e:	23 ed       	ldi	r18, 0xD3	; 211
 660:	80 e3       	ldi	r24, 0x30	; 48
 662:	91 50       	subi	r25, 0x01	; 1
 664:	20 40       	sbci	r18, 0x00	; 0
 666:	80 40       	sbci	r24, 0x00	; 0
 668:	e1 f7       	brne	.-8      	; 0x662 <__vector_4+0xa0>
 66a:	00 c0       	rjmp	.+0      	; 0x66c <__vector_4+0xaa>
 66c:	00 00       	nop
				_delay_ms(1000);
				lcd_gotoxy(1,1);
 66e:	61 e0       	ldi	r22, 0x01	; 1
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_gotoxy>
				lcd_print(ANGLE_SELECT);
 676:	80 e9       	ldi	r24, 0x90	; 144
 678:	91 e0       	ldi	r25, 0x01	; 1
 67a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
				sei();
 67e:	78 94       	sei
				break;
 680:	50 c0       	rjmp	.+160    	; 0x722 <__vector_4+0x160>
			case CHEIGHT: // increment height value (as long as < MAX (?))
				if ((height+valueChange) <= MAX_HEIGHT) // total guess right now
 682:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <height>
 686:	30 91 ff 01 	lds	r19, 0x01FF	; 0x8001ff <height+0x1>
 68a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 68e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 692:	82 0f       	add	r24, r18
 694:	93 1f       	adc	r25, r19
 696:	87 39       	cpi	r24, 0x97	; 151
 698:	91 05       	cpc	r25, r1
 69a:	0c f0       	brlt	.+2      	; 0x69e <__vector_4+0xdc>
 69c:	42 c0       	rjmp	.+132    	; 0x722 <__vector_4+0x160>
				{
					height=height + valueChange; //increment height by tenth
 69e:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <height>
 6a2:	30 91 ff 01 	lds	r19, 0x01FF	; 0x8001ff <height+0x1>
 6a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 6aa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 6ae:	82 0f       	add	r24, r18
 6b0:	93 1f       	adc	r25, r19
 6b2:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <height+0x1>
 6b6:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <height>
					ftoa(height,heightConv); // convert height to char array (heightConv) with 1 decimal place
 6ba:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <height>
 6be:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <height+0x1>
 6c2:	68 ee       	ldi	r22, 0xE8	; 232
 6c4:	71 e0       	ldi	r23, 0x01	; 1
 6c6:	0e 94 ef 00 	call	0x1de	; 0x1de <ftoa>
					print_height_change(heightConv); // print conversion to LCD
 6ca:	88 ee       	ldi	r24, 0xE8	; 232
 6cc:	91 e0       	ldi	r25, 0x01	; 1
 6ce:	0e 94 97 02 	call	0x52e	; 0x52e <print_height_change>
 6d2:	27 c0       	rjmp	.+78     	; 0x722 <__vector_4+0x160>
				}
				break;
			case CANGLE: // increment angle value (as long as <= MAX (90))
				if ((angle+valueChange) <= MAX_ANGLE)
 6d4:	20 91 fc 01 	lds	r18, 0x01FC	; 0x8001fc <angle>
 6d8:	30 91 fd 01 	lds	r19, 0x01FD	; 0x8001fd <angle+0x1>
 6dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 6e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 6e4:	82 0f       	add	r24, r18
 6e6:	93 1f       	adc	r25, r19
 6e8:	85 38       	cpi	r24, 0x85	; 133
 6ea:	93 40       	sbci	r25, 0x03	; 3
 6ec:	d4 f4       	brge	.+52     	; 0x722 <__vector_4+0x160>
				{
					angle=angle + valueChange;
 6ee:	20 91 fc 01 	lds	r18, 0x01FC	; 0x8001fc <angle>
 6f2:	30 91 fd 01 	lds	r19, 0x01FD	; 0x8001fd <angle+0x1>
 6f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 6fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 6fe:	82 0f       	add	r24, r18
 700:	93 1f       	adc	r25, r19
 702:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <angle+0x1>
 706:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <angle>
					ftoa(angle,angleConv); // convert angle to char array (angleConv) with 1 decimal place
 70a:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <angle>
 70e:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <angle+0x1>
 712:	68 ed       	ldi	r22, 0xD8	; 216
 714:	71 e0       	ldi	r23, 0x01	; 1
 716:	0e 94 ef 00 	call	0x1de	; 0x1de <ftoa>
					print_angle_change(angleConv);	// print conversion to LCD
 71a:	88 ed       	ldi	r24, 0xD8	; 216
 71c:	91 e0       	ldi	r25, 0x01	; 1
 71e:	0e 94 bc 02 	call	0x578	; 0x578 <print_angle_change>
				break;
		}
	}
	
	
	if (PINC == LEFT) // If left turn triggered interrupt
 722:	86 b1       	in	r24, 0x06	; 6
 724:	8d 37       	cpi	r24, 0x7D	; 125
 726:	09 f0       	breq	.+2      	; 0x72a <__vector_4+0x168>
 728:	8c c0       	rjmp	.+280    	; 0x842 <__vector_4+0x280>
	{
		switch(state)
 72a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
 72e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>
 732:	81 30       	cpi	r24, 0x01	; 1
 734:	91 05       	cpc	r25, r1
 736:	61 f1       	breq	.+88     	; 0x790 <__vector_4+0x1ce>
 738:	1c f4       	brge	.+6      	; 0x740 <__vector_4+0x17e>
 73a:	89 2b       	or	r24, r25
 73c:	41 f0       	breq	.+16     	; 0x74e <__vector_4+0x18c>
 73e:	81 c0       	rjmp	.+258    	; 0x842 <__vector_4+0x280>
 740:	82 30       	cpi	r24, 0x02	; 2
 742:	91 05       	cpc	r25, r1
 744:	91 f1       	breq	.+100    	; 0x7aa <__vector_4+0x1e8>
 746:	03 97       	sbiw	r24, 0x03	; 3
 748:	09 f4       	brne	.+2      	; 0x74c <__vector_4+0x18a>
 74a:	56 c0       	rjmp	.+172    	; 0x7f8 <__vector_4+0x236>
 74c:	7a c0       	rjmp	.+244    	; 0x842 <__vector_4+0x280>
		{
			case HEIGHT: // Change increment/decrement value to 1
				valueChange = 1;
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 756:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				cli();
 75a:	f8 94       	cli
				lcd_gotoxy(1,1);
 75c:	61 e0       	ldi	r22, 0x01	; 1
 75e:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_gotoxy>
				lcd_print("Order +-.1     ");
 762:	85 ec       	ldi	r24, 0xC5	; 197
 764:	91 e0       	ldi	r25, 0x01	; 1
 766:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
 76a:	8f ef       	ldi	r24, 0xFF	; 255
 76c:	93 ed       	ldi	r25, 0xD3	; 211
 76e:	20 e3       	ldi	r18, 0x30	; 48
 770:	81 50       	subi	r24, 0x01	; 1
 772:	90 40       	sbci	r25, 0x00	; 0
 774:	20 40       	sbci	r18, 0x00	; 0
 776:	e1 f7       	brne	.-8      	; 0x770 <__vector_4+0x1ae>
 778:	00 c0       	rjmp	.+0      	; 0x77a <__vector_4+0x1b8>
 77a:	00 00       	nop
				_delay_ms(1000);
				lcd_gotoxy(1,1);
 77c:	61 e0       	ldi	r22, 0x01	; 1
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_gotoxy>
				lcd_print(HEIGHT_SELECT);
 784:	80 e7       	ldi	r24, 0x70	; 112
 786:	91 e0       	ldi	r25, 0x01	; 1
 788:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_print>
				sei();
 78c:	78 94       	sei
				break;
 78e:	59 c0       	rjmp	.+178    	; 0x842 <__vector_4+0x280>
			case ANGLE: // change to height state
				print_height_angle(angleConv,heightConv, 1);
 790:	41 e0       	ldi	r20, 0x01	; 1
 792:	50 e0       	ldi	r21, 0x00	; 0
 794:	68 ee       	ldi	r22, 0xE8	; 232
 796:	71 e0       	ldi	r23, 0x01	; 1
 798:	88 ed       	ldi	r24, 0xD8	; 216
 79a:	91 e0       	ldi	r25, 0x01	; 1
 79c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <print_height_angle>
				state = HEIGHT;
 7a0:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <state+0x1>
 7a4:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <state>
				break;
 7a8:	4c c0       	rjmp	.+152    	; 0x842 <__vector_4+0x280>
			case CHEIGHT: // decrement height value (as long as >= MIN (0) )
				if ((height-valueChange) >= 0)
 7aa:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <height>
 7ae:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <height+0x1>
 7b2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 7b6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 7ba:	82 1b       	sub	r24, r18
 7bc:	93 0b       	sbc	r25, r19
 7be:	0a f4       	brpl	.+2      	; 0x7c2 <__vector_4+0x200>
 7c0:	40 c0       	rjmp	.+128    	; 0x842 <__vector_4+0x280>
				{
					height = height - valueChange;
 7c2:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <height>
 7c6:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <height+0x1>
 7ca:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 7ce:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 7d2:	82 1b       	sub	r24, r18
 7d4:	93 0b       	sbc	r25, r19
 7d6:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <height+0x1>
 7da:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <height>
					ftoa(height,heightConv); // convert height to char array (heightConv) with 1 decimal place
 7de:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <height>
 7e2:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <height+0x1>
 7e6:	68 ee       	ldi	r22, 0xE8	; 232
 7e8:	71 e0       	ldi	r23, 0x01	; 1
 7ea:	0e 94 ef 00 	call	0x1de	; 0x1de <ftoa>
					print_height_change(heightConv); // print conversion to LCD
 7ee:	88 ee       	ldi	r24, 0xE8	; 232
 7f0:	91 e0       	ldi	r25, 0x01	; 1
 7f2:	0e 94 97 02 	call	0x52e	; 0x52e <print_height_change>
 7f6:	25 c0       	rjmp	.+74     	; 0x842 <__vector_4+0x280>
				}
				break;
			case CANGLE: // increment angle value (as long as >= MIN (0))
				if((angle-valueChange) >= 0)
 7f8:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <angle>
 7fc:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <angle+0x1>
 800:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 804:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 808:	82 1b       	sub	r24, r18
 80a:	93 0b       	sbc	r25, r19
 80c:	d2 f0       	brmi	.+52     	; 0x842 <__vector_4+0x280>
				{
					angle = angle - valueChange;
 80e:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <angle>
 812:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <angle+0x1>
 816:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 81a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 81e:	82 1b       	sub	r24, r18
 820:	93 0b       	sbc	r25, r19
 822:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <angle+0x1>
 826:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <angle>
					ftoa(angle,angleConv); // convert angle to char array (angleConv) with 1 decimal place
 82a:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <angle>
 82e:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <angle+0x1>
 832:	68 ed       	ldi	r22, 0xD8	; 216
 834:	71 e0       	ldi	r23, 0x01	; 1
 836:	0e 94 ef 00 	call	0x1de	; 0x1de <ftoa>
					print_angle_change(angleConv);	// print conversion to LCD
 83a:	88 ed       	ldi	r24, 0xD8	; 216
 83c:	91 e0       	ldi	r25, 0x01	; 1
 83e:	0e 94 bc 02 	call	0x578	; 0x578 <print_angle_change>
				break;
		}
	}


	if(PINC == BUTTON) // If button press triggered interrupt
 842:	86 b1       	in	r24, 0x06	; 6
 844:	8f 36       	cpi	r24, 0x6F	; 111
 846:	09 f0       	breq	.+2      	; 0x84a <__vector_4+0x288>
 848:	5c c0       	rjmp	.+184    	; 0x902 <__stack+0x3>
	{
		switch(state)
 84a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <state>
 84e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <state+0x1>
 852:	81 30       	cpi	r24, 0x01	; 1
 854:	91 05       	cpc	r25, r1
 856:	e9 f0       	breq	.+58     	; 0x892 <__vector_4+0x2d0>
 858:	1c f4       	brge	.+6      	; 0x860 <__vector_4+0x29e>
 85a:	89 2b       	or	r24, r25
 85c:	39 f0       	breq	.+14     	; 0x86c <__vector_4+0x2aa>
 85e:	51 c0       	rjmp	.+162    	; 0x902 <__stack+0x3>
 860:	82 30       	cpi	r24, 0x02	; 2
 862:	91 05       	cpc	r25, r1
 864:	49 f1       	breq	.+82     	; 0x8b8 <__vector_4+0x2f6>
 866:	03 97       	sbiw	r24, 0x03	; 3
 868:	d1 f1       	breq	.+116    	; 0x8de <__vector_4+0x31c>
 86a:	4b c0       	rjmp	.+150    	; 0x902 <__stack+0x3>
		{
			case HEIGHT: // change to height change state
				ftoa(height,heightConv);
 86c:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <height>
 870:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <height+0x1>
 874:	68 ee       	ldi	r22, 0xE8	; 232
 876:	71 e0       	ldi	r23, 0x01	; 1
 878:	0e 94 ef 00 	call	0x1de	; 0x1de <ftoa>
				print_height_change(heightConv);
 87c:	88 ee       	ldi	r24, 0xE8	; 232
 87e:	91 e0       	ldi	r25, 0x01	; 1
 880:	0e 94 97 02 	call	0x52e	; 0x52e <print_height_change>
				state = CHEIGHT;
 884:	82 e0       	ldi	r24, 0x02	; 2
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
 88c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>
				break;
 890:	38 c0       	rjmp	.+112    	; 0x902 <__stack+0x3>
			case ANGLE: // change to angle change state
				ftoa(angle,angleConv);
 892:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <angle>
 896:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <angle+0x1>
 89a:	68 ed       	ldi	r22, 0xD8	; 216
 89c:	71 e0       	ldi	r23, 0x01	; 1
 89e:	0e 94 ef 00 	call	0x1de	; 0x1de <ftoa>
				print_angle_change(angleConv);
 8a2:	88 ed       	ldi	r24, 0xD8	; 216
 8a4:	91 e0       	ldi	r25, 0x01	; 1
 8a6:	0e 94 bc 02 	call	0x578	; 0x578 <print_angle_change>
				state = CANGLE;
 8aa:	83 e0       	ldi	r24, 0x03	; 3
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <state+0x1>
 8b2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <state>
				break;
 8b6:	25 c0       	rjmp	.+74     	; 0x902 <__stack+0x3>
			case CHEIGHT: // confirm height change value
				valueConfirm = 1; // set flag
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <valueConfirm+0x1>
 8c0:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <valueConfirm>
				print_height_angle(angleConv,heightConv, 1); // refresh screen with height selected
 8c4:	41 e0       	ldi	r20, 0x01	; 1
 8c6:	50 e0       	ldi	r21, 0x00	; 0
 8c8:	68 ee       	ldi	r22, 0xE8	; 232
 8ca:	71 e0       	ldi	r23, 0x01	; 1
 8cc:	88 ed       	ldi	r24, 0xD8	; 216
 8ce:	91 e0       	ldi	r25, 0x01	; 1
 8d0:	0e 94 51 02 	call	0x4a2	; 0x4a2 <print_height_angle>
				state = HEIGHT; // exit from change function
 8d4:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <state+0x1>
 8d8:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <state>
				break;
 8dc:	12 c0       	rjmp	.+36     	; 0x902 <__stack+0x3>
			case CANGLE: // confirm angle change value
				valueConfirm = 1; // set flag - might need to make unique flag
 8de:	c1 e0       	ldi	r28, 0x01	; 1
 8e0:	d0 e0       	ldi	r29, 0x00	; 0
 8e2:	d0 93 fb 01 	sts	0x01FB, r29	; 0x8001fb <valueConfirm+0x1>
 8e6:	c0 93 fa 01 	sts	0x01FA, r28	; 0x8001fa <valueConfirm>
				print_height_angle(angleConv,heightConv, 0); // refresh screen with angle selected
 8ea:	40 e0       	ldi	r20, 0x00	; 0
 8ec:	50 e0       	ldi	r21, 0x00	; 0
 8ee:	68 ee       	ldi	r22, 0xE8	; 232
 8f0:	71 e0       	ldi	r23, 0x01	; 1
 8f2:	88 ed       	ldi	r24, 0xD8	; 216
 8f4:	91 e0       	ldi	r25, 0x01	; 1
 8f6:	0e 94 51 02 	call	0x4a2	; 0x4a2 <print_height_angle>
				state = ANGLE;
 8fa:	d0 93 01 02 	sts	0x0201, r29	; 0x800201 <state+0x1>
 8fe:	c0 93 00 02 	sts	0x0200, r28	; 0x800200 <state>
				break;
		}
	}
	
	while(PINC != 127)
 902:	86 b1       	in	r24, 0x06	; 6
 904:	8f 37       	cpi	r24, 0x7F	; 127
 906:	e9 f7       	brne	.-6      	; 0x902 <__stack+0x3>
	{
		// Wait for PINC to return to default state 
		// i.e. no pulse being sent from rotary encoder	
	}

}
 908:	ff 91       	pop	r31
 90a:	ef 91       	pop	r30
 90c:	df 91       	pop	r29
 90e:	cf 91       	pop	r28
 910:	bf 91       	pop	r27
 912:	af 91       	pop	r26
 914:	9f 91       	pop	r25
 916:	8f 91       	pop	r24
 918:	7f 91       	pop	r23
 91a:	6f 91       	pop	r22
 91c:	5f 91       	pop	r21
 91e:	4f 91       	pop	r20
 920:	3f 91       	pop	r19
 922:	2f 91       	pop	r18
 924:	0f 90       	pop	r0
 926:	0f be       	out	0x3f, r0	; 63
 928:	0f 90       	pop	r0
 92a:	1f 90       	pop	r1
 92c:	18 95       	reti

0000092e <__divmodhi4>:
 92e:	97 fb       	bst	r25, 7
 930:	07 2e       	mov	r0, r23
 932:	16 f4       	brtc	.+4      	; 0x938 <__divmodhi4+0xa>
 934:	00 94       	com	r0
 936:	07 d0       	rcall	.+14     	; 0x946 <__divmodhi4_neg1>
 938:	77 fd       	sbrc	r23, 7
 93a:	09 d0       	rcall	.+18     	; 0x94e <__divmodhi4_neg2>
 93c:	0e 94 ab 04 	call	0x956	; 0x956 <__udivmodhi4>
 940:	07 fc       	sbrc	r0, 7
 942:	05 d0       	rcall	.+10     	; 0x94e <__divmodhi4_neg2>
 944:	3e f4       	brtc	.+14     	; 0x954 <__divmodhi4_exit>

00000946 <__divmodhi4_neg1>:
 946:	90 95       	com	r25
 948:	81 95       	neg	r24
 94a:	9f 4f       	sbci	r25, 0xFF	; 255
 94c:	08 95       	ret

0000094e <__divmodhi4_neg2>:
 94e:	70 95       	com	r23
 950:	61 95       	neg	r22
 952:	7f 4f       	sbci	r23, 0xFF	; 255

00000954 <__divmodhi4_exit>:
 954:	08 95       	ret

00000956 <__udivmodhi4>:
 956:	aa 1b       	sub	r26, r26
 958:	bb 1b       	sub	r27, r27
 95a:	51 e1       	ldi	r21, 0x11	; 17
 95c:	07 c0       	rjmp	.+14     	; 0x96c <__udivmodhi4_ep>

0000095e <__udivmodhi4_loop>:
 95e:	aa 1f       	adc	r26, r26
 960:	bb 1f       	adc	r27, r27
 962:	a6 17       	cp	r26, r22
 964:	b7 07       	cpc	r27, r23
 966:	10 f0       	brcs	.+4      	; 0x96c <__udivmodhi4_ep>
 968:	a6 1b       	sub	r26, r22
 96a:	b7 0b       	sbc	r27, r23

0000096c <__udivmodhi4_ep>:
 96c:	88 1f       	adc	r24, r24
 96e:	99 1f       	adc	r25, r25
 970:	5a 95       	dec	r21
 972:	a9 f7       	brne	.-22     	; 0x95e <__udivmodhi4_loop>
 974:	80 95       	com	r24
 976:	90 95       	com	r25
 978:	bc 01       	movw	r22, r24
 97a:	cd 01       	movw	r24, r26
 97c:	08 95       	ret

0000097e <_exit>:
 97e:	f8 94       	cli

00000980 <__stop_program>:
 980:	ff cf       	rjmp	.-2      	; 0x980 <__stop_program>
