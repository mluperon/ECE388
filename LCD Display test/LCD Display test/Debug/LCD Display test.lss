
LCD Display test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000dec  00000e60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ed4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001636  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000aac  00000000  00000000  000025c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006c2  00000000  00000000  0000306e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  00003730  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e1  00000000  00000000  000038f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bea  00000000  00000000  00003ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00004abb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 9b 00 	jmp	0x136	; 0x136 <__ctors_end>
   4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
   8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
   c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  10:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  14:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  18:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  1c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  20:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  24:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  28:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  2c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  30:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  34:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  38:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  3c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  40:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  44:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  48:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  4c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  50:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  54:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  58:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  5c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  60:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  64:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  68:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  6c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  70:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  74:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  78:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  7c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  80:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  84:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  88:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  8c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  90:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  94:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  98:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  9c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  a0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  a4:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  a8:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  ac:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  b0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__bad_interrupt>
  b4:	07 63       	ori	r16, 0x37	; 55
  b6:	42 36       	cpi	r20, 0x62	; 98
  b8:	b7 9b       	sbis	0x16, 7	; 22
  ba:	d8 a7       	std	Y+40, r29	; 0x28
  bc:	1a 39       	cpi	r17, 0x9A	; 154
  be:	68 56       	subi	r22, 0x68	; 104
  c0:	18 ae       	std	Y+56, r1	; 0x38
  c2:	ba ab       	std	Y+50, r27	; 0x32
  c4:	55 8c       	ldd	r5, Z+29	; 0x1d
  c6:	1d 3c       	cpi	r17, 0xCD	; 205
  c8:	b7 cc       	rjmp	.-1682   	; 0xfffffa38 <__eeprom_end+0xff7efa38>
  ca:	57 63       	ori	r21, 0x37	; 55
  cc:	bd 6d       	ori	r27, 0xDD	; 221
  ce:	ed fd       	.word	0xfded	; ????
  d0:	75 3e       	cpi	r23, 0xE5	; 229
  d2:	f6 17       	cp	r31, r22
  d4:	72 31       	cpi	r23, 0x12	; 18
  d6:	bf 00       	.word	0x00bf	; ????
  d8:	00 00       	nop
  da:	80 3f       	cpi	r24, 0xF0	; 240
  dc:	08 00       	.word	0x0008	; ????
  de:	00 00       	nop
  e0:	be 92       	st	-X, r11
  e2:	24 49       	sbci	r18, 0x94	; 148
  e4:	12 3e       	cpi	r17, 0xE2	; 226
  e6:	ab aa       	std	Y+51, r10	; 0x33
  e8:	aa 2a       	or	r10, r26
  ea:	be cd       	rjmp	.-1156   	; 0xfffffc68 <__eeprom_end+0xff7efc68>
  ec:	cc cc       	rjmp	.-1640   	; 0xfffffa86 <__eeprom_end+0xff7efa86>
  ee:	4c 3e       	cpi	r20, 0xEC	; 236
  f0:	00 00       	nop
  f2:	00 80       	ld	r0, Z
  f4:	be ab       	std	Y+54, r27	; 0x36
  f6:	aa aa       	std	Y+50, r10	; 0x32
  f8:	aa 3e       	cpi	r26, 0xEA	; 234
  fa:	00 00       	nop
  fc:	00 00       	nop
  fe:	bf 00       	.word	0x00bf	; ????
 100:	00 00       	nop
 102:	80 3f       	cpi	r24, 0xF0	; 240
 104:	00 00       	nop
 106:	00 00       	nop
 108:	00 08       	sbc	r0, r0
 10a:	41 78       	andi	r20, 0x81	; 129
 10c:	d3 bb       	out	0x13, r29	; 19
 10e:	43 87       	std	Z+11, r20	; 0x0b
 110:	d1 13       	cpse	r29, r17
 112:	3d 19       	sub	r19, r13
 114:	0e 3c       	cpi	r16, 0xCE	; 206
 116:	c3 bd       	out	0x23, r28	; 35
 118:	42 82       	std	Z+2, r4	; 0x02
 11a:	ad 2b       	or	r26, r29
 11c:	3e 68       	ori	r19, 0x8E	; 142
 11e:	ec 82       	std	Y+4, r14	; 0x04
 120:	76 be       	out	0x36, r7	; 54
 122:	d9 8f       	std	Y+25, r29	; 0x19
 124:	e1 a9       	ldd	r30, Z+49	; 0x31
 126:	3e 4c       	sbci	r19, 0xCE	; 206
 128:	80 ef       	ldi	r24, 0xF0	; 240
 12a:	ff be       	out	0x3f, r15	; 63
 12c:	01 c4       	rjmp	.+2050   	; 0x930 <__stack+0x31>
 12e:	ff 7f       	andi	r31, 0xFF	; 255
 130:	3f 00       	.word	0x003f	; ????
 132:	00 00       	nop
	...

00000136 <__ctors_end>:
 136:	11 24       	eor	r1, r1
 138:	1f be       	out	0x3f, r1	; 63
 13a:	cf ef       	ldi	r28, 0xFF	; 255
 13c:	d8 e0       	ldi	r29, 0x08	; 8
 13e:	de bf       	out	0x3e, r29	; 62
 140:	cd bf       	out	0x3d, r28	; 61

00000142 <__do_copy_data>:
 142:	11 e0       	ldi	r17, 0x01	; 1
 144:	a0 e0       	ldi	r26, 0x00	; 0
 146:	b1 e0       	ldi	r27, 0x01	; 1
 148:	ec ee       	ldi	r30, 0xEC	; 236
 14a:	fd e0       	ldi	r31, 0x0D	; 13
 14c:	02 c0       	rjmp	.+4      	; 0x152 <__do_copy_data+0x10>
 14e:	05 90       	lpm	r0, Z+
 150:	0d 92       	st	X+, r0
 152:	a4 34       	cpi	r26, 0x44	; 68
 154:	b1 07       	cpc	r27, r17
 156:	d9 f7       	brne	.-10     	; 0x14e <__do_copy_data+0xc>
 158:	0e 94 75 02 	call	0x4ea	; 0x4ea <main>
 15c:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <_exit>

00000160 <__bad_interrupt>:
 160:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000164 <lcdCommand>:


//*******************************************************
void lcdCommand( unsigned char cmnd )
{
  LCD_DPRT = cmnd;			
 164:	8b b9       	out	0x0b, r24	; 11
  LCD_CPRT &= ~ (1<<LCD_RS);
 166:	28 98       	cbi	0x05, 0	; 5
  LCD_CPRT &= ~ (1<<LCD_RW);
 168:	29 98       	cbi	0x05, 1	; 5
  LCD_CPRT |= (1<<LCD_EN);	
 16a:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	85 e0       	ldi	r24, 0x05	; 5
 16e:	8a 95       	dec	r24
 170:	f1 f7       	brne	.-4      	; 0x16e <lcdCommand+0xa>
 172:	00 00       	nop
  _delay_us(1);				
  LCD_CPRT &= ~ (1<<LCD_EN);
 174:	2a 98       	cbi	0x05, 2	; 5
 176:	8f e8       	ldi	r24, 0x8F	; 143
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <lcdCommand+0x16>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <lcdCommand+0x1c>
 180:	00 00       	nop
 182:	08 95       	ret

00000184 <lcdData>:
}

//*******************************************************
void lcdData( unsigned char data )
{
  LCD_DPRT = data;			
 184:	8b b9       	out	0x0b, r24	; 11
  LCD_CPRT |= (1<<LCD_RS);	
 186:	28 9a       	sbi	0x05, 0	; 5
  LCD_CPRT &= ~ (1<<LCD_RW);
 188:	29 98       	cbi	0x05, 1	; 5
  LCD_CPRT |= (1<<LCD_EN);	
 18a:	2a 9a       	sbi	0x05, 2	; 5
 18c:	85 e0       	ldi	r24, 0x05	; 5
 18e:	8a 95       	dec	r24
 190:	f1 f7       	brne	.-4      	; 0x18e <lcdData+0xa>
 192:	00 00       	nop
  _delay_us(1);				
  LCD_CPRT &= ~ (1<<LCD_EN);
 194:	2a 98       	cbi	0x05, 2	; 5
 196:	8f e8       	ldi	r24, 0x8F	; 143
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcdData+0x16>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcdData+0x1c>
 1a0:	00 00       	nop
 1a2:	08 95       	ret

000001a4 <lcd_init>:
}

//*******************************************************
void lcd_init()
{
  LCD_DDDR = 0xFF;
 1a4:	8f ef       	ldi	r24, 0xFF	; 255
 1a6:	8a b9       	out	0x0a, r24	; 10
  LCD_CDDR = 0xFF;
 1a8:	84 b9       	out	0x04, r24	; 4
 
  LCD_CPRT &=~(1<<LCD_EN);	
 1aa:	2a 98       	cbi	0x05, 2	; 5
 1ac:	8f e3       	ldi	r24, 0x3F	; 63
 1ae:	9f e1       	ldi	r25, 0x1F	; 31
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_init+0xc>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <lcd_init+0x12>
 1b6:	00 00       	nop
  _delay_us(2000);			
  lcdCommand(0x38);			
 1b8:	88 e3       	ldi	r24, 0x38	; 56
 1ba:	0e 94 b2 00 	call	0x164	; 0x164 <lcdCommand>
  lcdCommand(0x0E);			
 1be:	8e e0       	ldi	r24, 0x0E	; 14
 1c0:	0e 94 b2 00 	call	0x164	; 0x164 <lcdCommand>
  lcdCommand(0x0C);
 1c4:	8c e0       	ldi	r24, 0x0C	; 12
 1c6:	0e 94 b2 00 	call	0x164	; 0x164 <lcdCommand>
  lcdCommand(0x01); //clear
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	0e 94 b2 00 	call	0x164	; 0x164 <lcdCommand>
 1d0:	8f e3       	ldi	r24, 0x3F	; 63
 1d2:	9f e1       	ldi	r25, 0x1F	; 31
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_init+0x30>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <lcd_init+0x36>
 1da:	00 00       	nop
  _delay_us(2000);			
  lcdCommand(0x06);			
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	0e 94 b2 00 	call	0x164	; 0x164 <lcdCommand>
 1e2:	08 95       	ret

000001e4 <lcd_gotoxy>:
}

//*******************************************************
void lcd_gotoxy(unsigned char x, unsigned char y)
{  
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	00 d0       	rcall	.+0      	; 0x1ea <lcd_gotoxy+0x6>
 1ea:	00 d0       	rcall	.+0      	; 0x1ec <lcd_gotoxy+0x8>
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
 unsigned char firstCharAdr[]={0x80,0xC0,0x94,0xD4};//table 12-5  
 1f0:	90 e8       	ldi	r25, 0x80	; 128
 1f2:	99 83       	std	Y+1, r25	; 0x01
 1f4:	90 ec       	ldi	r25, 0xC0	; 192
 1f6:	9a 83       	std	Y+2, r25	; 0x02
 1f8:	94 e9       	ldi	r25, 0x94	; 148
 1fa:	9b 83       	std	Y+3, r25	; 0x03
 1fc:	94 ed       	ldi	r25, 0xD4	; 212
 1fe:	9c 83       	std	Y+4, r25	; 0x04
 lcdCommand(firstCharAdr[y-1] + x - 1);
 200:	fe 01       	movw	r30, r28
 202:	e6 0f       	add	r30, r22
 204:	f1 1d       	adc	r31, r1
 206:	81 50       	subi	r24, 0x01	; 1
 208:	90 81       	ld	r25, Z
 20a:	89 0f       	add	r24, r25
 20c:	0e 94 b2 00 	call	0x164	; 0x164 <lcdCommand>
 210:	8f e8       	ldi	r24, 0x8F	; 143
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <lcd_gotoxy+0x30>
 218:	00 c0       	rjmp	.+0      	; 0x21a <lcd_gotoxy+0x36>
 21a:	00 00       	nop
 _delay_us(100);	
}
 21c:	0f 90       	pop	r0
 21e:	0f 90       	pop	r0
 220:	0f 90       	pop	r0
 222:	0f 90       	pop	r0
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <lcd_print>:

//*******************************************************
void lcd_print( char * str )
{
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	fc 01       	movw	r30, r24
  unsigned char i = 0 ;
  while(str[i]!=0)
 232:	80 81       	ld	r24, Z
 234:	88 23       	and	r24, r24
 236:	59 f0       	breq	.+22     	; 0x24e <lcd_print+0x24>
 238:	8f 01       	movw	r16, r30
 23a:	c0 e0       	ldi	r28, 0x00	; 0
  {
    lcdData(str[i]);
 23c:	0e 94 c2 00 	call	0x184	; 0x184 <lcdData>
    i++ ;
 240:	cf 5f       	subi	r28, 0xFF	; 255

//*******************************************************
void lcd_print( char * str )
{
  unsigned char i = 0 ;
  while(str[i]!=0)
 242:	f8 01       	movw	r30, r16
 244:	ec 0f       	add	r30, r28
 246:	f1 1d       	adc	r31, r1
 248:	80 81       	ld	r24, Z
 24a:	81 11       	cpse	r24, r1
 24c:	f7 cf       	rjmp	.-18     	; 0x23c <lcd_print+0x12>
  {
    lcdData(str[i]);
    i++ ;
  }
}
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	08 95       	ret

00000256 <reverse>:

#ifndef FLOATCONVERT_H_
#define FLOATCONVERT_H_
void reverse(char *str, int len)
{
	int i=0, j=len-1, temp;
 256:	9b 01       	movw	r18, r22
 258:	21 50       	subi	r18, 0x01	; 1
 25a:	31 09       	sbc	r19, r1
	while (i<j)
 25c:	12 16       	cp	r1, r18
 25e:	13 06       	cpc	r1, r19
 260:	84 f4       	brge	.+32     	; 0x282 <reverse+0x2c>
 262:	fc 01       	movw	r30, r24
 264:	e6 0f       	add	r30, r22
 266:	f7 1f       	adc	r31, r23
 268:	dc 01       	movw	r26, r24
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
	{
		temp = str[i];
 26e:	4c 91       	ld	r20, X
		str[i] = str[j];
 270:	52 91       	ld	r21, -Z
 272:	5d 93       	st	X+, r21
		str[j] = temp;
 274:	40 83       	st	Z, r20
		i++; j--;
 276:	01 96       	adiw	r24, 0x01	; 1
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	31 09       	sbc	r19, r1
#ifndef FLOATCONVERT_H_
#define FLOATCONVERT_H_
void reverse(char *str, int len)
{
	int i=0, j=len-1, temp;
	while (i<j)
 27c:	82 17       	cp	r24, r18
 27e:	93 07       	cpc	r25, r19
 280:	b4 f3       	brlt	.-20     	; 0x26e <reverse+0x18>
 282:	08 95       	ret

00000284 <intToStr>:
		i++; j--;
	}
}

int intToStr(int x, char str[], int d)
{
 284:	cf 92       	push	r12
 286:	df 92       	push	r13
 288:	ef 92       	push	r14
 28a:	ff 92       	push	r15
 28c:	0f 93       	push	r16
 28e:	1f 93       	push	r17
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	6b 01       	movw	r12, r22
 296:	8a 01       	movw	r16, r20
	int i = 0;
	while (x)
 298:	00 97       	sbiw	r24, 0x00	; 0
 29a:	99 f0       	breq	.+38     	; 0x2c2 <intToStr+0x3e>
 29c:	eb 01       	movw	r28, r22
 29e:	e0 e0       	ldi	r30, 0x00	; 0
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
	{
		str[i++] = (x%10) + '0';
 2a2:	0f 2e       	mov	r0, r31
 2a4:	fa e0       	ldi	r31, 0x0A	; 10
 2a6:	ef 2e       	mov	r14, r31
 2a8:	f1 2c       	mov	r15, r1
 2aa:	f0 2d       	mov	r31, r0
 2ac:	31 96       	adiw	r30, 0x01	; 1
 2ae:	b7 01       	movw	r22, r14
 2b0:	0e 94 cc 06 	call	0xd98	; 0xd98 <__divmodhi4>
 2b4:	80 5d       	subi	r24, 0xD0	; 208
 2b6:	89 93       	st	Y+, r24
		x = x/10;
 2b8:	86 2f       	mov	r24, r22
 2ba:	97 2f       	mov	r25, r23
}

int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x)
 2bc:	00 97       	sbiw	r24, 0x00	; 0
 2be:	b1 f7       	brne	.-20     	; 0x2ac <intToStr+0x28>
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <intToStr+0x42>
	}
}

int intToStr(int x, char str[], int d)
{
	int i = 0;
 2c2:	e0 e0       	ldi	r30, 0x00	; 0
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
		x = x/10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
 2c6:	e0 17       	cp	r30, r16
 2c8:	f1 07       	cpc	r31, r17
 2ca:	5c f4       	brge	.+22     	; 0x2e2 <intToStr+0x5e>
 2cc:	ec 0d       	add	r30, r12
 2ce:	fd 1d       	adc	r31, r13
 2d0:	96 01       	movw	r18, r12
 2d2:	20 0f       	add	r18, r16
 2d4:	31 1f       	adc	r19, r17
	str[i++] = '0';
 2d6:	80 e3       	ldi	r24, 0x30	; 48
 2d8:	81 93       	st	Z+, r24
		x = x/10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
 2da:	e2 17       	cp	r30, r18
 2dc:	f3 07       	cpc	r31, r19
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <intToStr+0x54>
 2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <intToStr+0x60>
 2e2:	8f 01       	movw	r16, r30
	str[i++] = '0';
	
	reverse(str, i);
 2e4:	b8 01       	movw	r22, r16
 2e6:	c6 01       	movw	r24, r12
 2e8:	0e 94 2b 01 	call	0x256	; 0x256 <reverse>
	str[i] = '\0';
 2ec:	e6 01       	movw	r28, r12
 2ee:	c0 0f       	add	r28, r16
 2f0:	d1 1f       	adc	r29, r17
 2f2:	18 82       	st	Y, r1
	return i;
}
 2f4:	c8 01       	movw	r24, r16
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	ff 90       	pop	r15
 300:	ef 90       	pop	r14
 302:	df 90       	pop	r13
 304:	cf 90       	pop	r12
 306:	08 95       	ret

00000308 <ftoa>:


// Converts a floating point number to string.
void ftoa(float n, char *res, int afterpoint)
{
 308:	2f 92       	push	r2
 30a:	3f 92       	push	r3
 30c:	4f 92       	push	r4
 30e:	5f 92       	push	r5
 310:	6f 92       	push	r6
 312:	7f 92       	push	r7
 314:	8f 92       	push	r8
 316:	9f 92       	push	r9
 318:	af 92       	push	r10
 31a:	bf 92       	push	r11
 31c:	cf 92       	push	r12
 31e:	df 92       	push	r13
 320:	ef 92       	push	r14
 322:	ff 92       	push	r15
 324:	0f 93       	push	r16
 326:	1f 93       	push	r17
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	4b 01       	movw	r8, r22
 32e:	5c 01       	movw	r10, r24
 330:	8a 01       	movw	r16, r20
 332:	e9 01       	movw	r28, r18
	// Extract integer part
	int ipart = (int)n;
 334:	0e 94 a4 03 	call	0x748	; 0x748 <__fixsfsi>
 338:	6b 01       	movw	r12, r22
 33a:	7c 01       	movw	r14, r24
	
	// Extract floating part
	float fpart = n - (float)ipart;
	
	// convert integer part to string
	int i = intToStr(ipart, res, 0);
 33c:	40 e0       	ldi	r20, 0x00	; 0
 33e:	50 e0       	ldi	r21, 0x00	; 0
 340:	b8 01       	movw	r22, r16
 342:	c6 01       	movw	r24, r12
 344:	0e 94 42 01 	call	0x284	; 0x284 <intToStr>
 348:	1c 01       	movw	r2, r24
	
	// check for display option after point
	if (afterpoint != 0)
 34a:	20 97       	sbiw	r28, 0x00	; 0
 34c:	99 f1       	breq	.+102    	; 0x3b4 <ftoa+0xac>
	{
		res[i] = '.';  // add dot
 34e:	f8 01       	movw	r30, r16
 350:	e8 0f       	add	r30, r24
 352:	f9 1f       	adc	r31, r25
 354:	8e e2       	ldi	r24, 0x2E	; 46
 356:	80 83       	st	Z, r24
		
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter is needed
		// to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
 358:	be 01       	movw	r22, r28
 35a:	0d 2e       	mov	r0, r29
 35c:	00 0c       	add	r0, r0
 35e:	88 0b       	sbc	r24, r24
 360:	99 0b       	sbc	r25, r25
 362:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__floatsisf>
 366:	9b 01       	movw	r18, r22
 368:	ac 01       	movw	r20, r24
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	80 e2       	ldi	r24, 0x20	; 32
 370:	91 e4       	ldi	r25, 0x41	; 65
 372:	0e 94 d5 04 	call	0x9aa	; 0x9aa <pow>
 376:	2b 01       	movw	r4, r22
 378:	3c 01       	movw	r6, r24
{
	// Extract integer part
	int ipart = (int)n;
	
	// Extract floating part
	float fpart = n - (float)ipart;
 37a:	b6 01       	movw	r22, r12
 37c:	dd 0c       	add	r13, r13
 37e:	88 0b       	sbc	r24, r24
 380:	99 0b       	sbc	r25, r25
 382:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__floatsisf>
 386:	9b 01       	movw	r18, r22
 388:	ac 01       	movw	r20, r24
 38a:	c5 01       	movw	r24, r10
 38c:	b4 01       	movw	r22, r8
 38e:	0e 94 37 03 	call	0x66e	; 0x66e <__subsf3>
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter is needed
		// to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
		
		intToStr((int)fpart, res + i + 1, afterpoint);
 392:	2f ef       	ldi	r18, 0xFF	; 255
 394:	22 1a       	sub	r2, r18
 396:	32 0a       	sbc	r3, r18
 398:	02 0d       	add	r16, r2
 39a:	13 1d       	adc	r17, r3
 39c:	a3 01       	movw	r20, r6
 39e:	92 01       	movw	r18, r4
 3a0:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__mulsf3>
 3a4:	0e 94 a4 03 	call	0x748	; 0x748 <__fixsfsi>
 3a8:	dc 01       	movw	r26, r24
 3aa:	cb 01       	movw	r24, r22
 3ac:	ae 01       	movw	r20, r28
 3ae:	b8 01       	movw	r22, r16
 3b0:	0e 94 42 01 	call	0x284	; 0x284 <intToStr>
	}
}
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	1f 91       	pop	r17
 3ba:	0f 91       	pop	r16
 3bc:	ff 90       	pop	r15
 3be:	ef 90       	pop	r14
 3c0:	df 90       	pop	r13
 3c2:	cf 90       	pop	r12
 3c4:	bf 90       	pop	r11
 3c6:	af 90       	pop	r10
 3c8:	9f 90       	pop	r9
 3ca:	8f 90       	pop	r8
 3cc:	7f 90       	pop	r7
 3ce:	6f 90       	pop	r6
 3d0:	5f 90       	pop	r5
 3d2:	4f 90       	pop	r4
 3d4:	3f 90       	pop	r3
 3d6:	2f 90       	pop	r2
 3d8:	08 95       	ret

000003da <print_height_angle>:
	print_height_angle(angleConv,heightConv,1); 
	
}

void print_height_angle(char *angleConv, char *heightConv, int heightSelect) // possible way to fix based on state 0=height 1=angle
{
 3da:	ef 92       	push	r14
 3dc:	ff 92       	push	r15
 3de:	0f 93       	push	r16
 3e0:	1f 93       	push	r17
 3e2:	cf 93       	push	r28
 3e4:	df 93       	push	r29
 3e6:	ec 01       	movw	r28, r24
 3e8:	8b 01       	movw	r16, r22
 3ea:	7a 01       	movw	r14, r20
	lcd_gotoxy(1,1);
 3ec:	61 e0       	ldi	r22, 0x01	; 1
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_gotoxy>
	if (heightSelect == 1)
 3f4:	ea 94       	dec	r14
 3f6:	ef 28       	or	r14, r15
 3f8:	29 f4       	brne	.+10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		lcd_print(HEIGHT_SELECT);
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_print>
 402:	04 c0       	rjmp	.+8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	else 
		lcd_print(ANGLE_SELECT);
 404:	81 e1       	ldi	r24, 0x11	; 17
 406:	91 e0       	ldi	r25, 0x01	; 1
 408:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_print>
	//unselect bottom row
	lcd_gotoxy(1,2);
 40c:	62 e0       	ldi	r22, 0x02	; 2
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_gotoxy>
	lcd_print(" ");
 414:	81 e3       	ldi	r24, 0x31	; 49
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_print>
	lcd_print(heightConv);
 41c:	c8 01       	movw	r24, r16
 41e:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_print>
	lcd_print(" ");
 422:	81 e3       	ldi	r24, 0x31	; 49
 424:	91 e0       	ldi	r25, 0x01	; 1
 426:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_print>
	lcd_gotoxy(10,2);
 42a:	62 e0       	ldi	r22, 0x02	; 2
 42c:	8a e0       	ldi	r24, 0x0A	; 10
 42e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_gotoxy>
	lcd_print(" ");
 432:	81 e3       	ldi	r24, 0x31	; 49
 434:	91 e0       	ldi	r25, 0x01	; 1
 436:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_print>
	lcd_print(angleConv);
 43a:	ce 01       	movw	r24, r28
 43c:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_print>
	lcd_print(" ");
 440:	81 e3       	ldi	r24, 0x31	; 49
 442:	91 e0       	ldi	r25, 0x01	; 1
 444:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_print>
}
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	1f 91       	pop	r17
 44e:	0f 91       	pop	r16
 450:	ff 90       	pop	r15
 452:	ef 90       	pop	r14
 454:	08 95       	ret

00000456 <print_height_change>:



void print_height_change(char *conversion)
{
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
 45a:	ec 01       	movw	r28, r24
	//ensure height becomes unselected
	lcd_gotoxy(1,1);
 45c:	61 e0       	ldi	r22, 0x01	; 1
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_gotoxy>
	lcd_print(NO_HS_SELECT);
 464:	82 e2       	ldi	r24, 0x22	; 34
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_print>
	lcd_gotoxy(1,2);
 46c:	62 e0       	ldi	r22, 0x02	; 2
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_gotoxy>
	lcd_print("[");
 474:	83 e3       	ldi	r24, 0x33	; 51
 476:	91 e0       	ldi	r25, 0x01	; 1
 478:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_print>
	lcd_gotoxy(2,2);
 47c:	62 e0       	ldi	r22, 0x02	; 2
 47e:	82 e0       	ldi	r24, 0x02	; 2
 480:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_gotoxy>
	lcd_print(conversion);
 484:	ce 01       	movw	r24, r28
 486:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_print>
	lcd_gotoxy(6,2);
 48a:	62 e0       	ldi	r22, 0x02	; 2
 48c:	86 e0       	ldi	r24, 0x06	; 6
 48e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_gotoxy>
	lcd_print("]");
 492:	80 e2       	ldi	r24, 0x20	; 32
 494:	91 e0       	ldi	r25, 0x01	; 1
 496:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_print>
}
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	08 95       	ret

000004a0 <print_angle_change>:

void print_angle_change(char *conversion)
{
 4a0:	cf 93       	push	r28
 4a2:	df 93       	push	r29
 4a4:	ec 01       	movw	r28, r24
	lcd_gotoxy(1,1);
 4a6:	61 e0       	ldi	r22, 0x01	; 1
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_gotoxy>
	lcd_print(NO_HS_SELECT);
 4ae:	82 e2       	ldi	r24, 0x22	; 34
 4b0:	91 e0       	ldi	r25, 0x01	; 1
 4b2:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_print>
	lcd_gotoxy(10,2);
 4b6:	62 e0       	ldi	r22, 0x02	; 2
 4b8:	8a e0       	ldi	r24, 0x0A	; 10
 4ba:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_gotoxy>
	lcd_print("[");
 4be:	83 e3       	ldi	r24, 0x33	; 51
 4c0:	91 e0       	ldi	r25, 0x01	; 1
 4c2:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_print>
	lcd_gotoxy(11,2);
 4c6:	62 e0       	ldi	r22, 0x02	; 2
 4c8:	8b e0       	ldi	r24, 0x0B	; 11
 4ca:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_gotoxy>
	lcd_print(conversion);
 4ce:	ce 01       	movw	r24, r28
 4d0:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_print>
	lcd_gotoxy(15,2);
 4d4:	62 e0       	ldi	r22, 0x02	; 2
 4d6:	8f e0       	ldi	r24, 0x0F	; 15
 4d8:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_gotoxy>
	lcd_print("]");
 4dc:	80 e2       	ldi	r24, 0x20	; 32
 4de:	91 e0       	ldi	r25, 0x01	; 1
 4e0:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_print>
	
}
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	08 95       	ret

000004ea <main>:
#define NO_HS_SELECT " HEIGHT   ANGLE "
#define DEFAULT_ANGLE " 00.0     00.0"


int main(void)
{
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	cd b7       	in	r28, 0x3d	; 61
 4f0:	de b7       	in	r29, 0x3e	; 62
 4f2:	a0 97       	sbiw	r28, 0x20	; 32
 4f4:	0f b6       	in	r0, 0x3f	; 63
 4f6:	f8 94       	cli
 4f8:	de bf       	out	0x3e, r29	; 62
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	cd bf       	out	0x3d, r28	; 61
	char heightConv[16] = "";
 4fe:	1a 82       	std	Y+2, r1	; 0x02
 500:	19 82       	std	Y+1, r1	; 0x01
 502:	8e e0       	ldi	r24, 0x0E	; 14
 504:	fe 01       	movw	r30, r28
 506:	33 96       	adiw	r30, 0x03	; 3
 508:	df 01       	movw	r26, r30
 50a:	28 2f       	mov	r18, r24
 50c:	1d 92       	st	X+, r1
 50e:	2a 95       	dec	r18
 510:	e9 f7       	brne	.-6      	; 0x50c <main+0x22>
	char angleConv[16] = "";
 512:	1a 8a       	std	Y+18, r1	; 0x12
 514:	19 8a       	std	Y+17, r1	; 0x11
 516:	70 96       	adiw	r30, 0x10	; 16
 518:	df 01       	movw	r26, r30
 51a:	1d 92       	st	X+, r1
 51c:	8a 95       	dec	r24
 51e:	e9 f7       	brne	.-6      	; 0x51a <main+0x30>
	char test[4] = "";
	float height = 10.3;
	float angle = 00.0;
	lcd_init();
 520:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_init>
	angleConv[0]='0';
 524:	80 e3       	ldi	r24, 0x30	; 48
 526:	89 8b       	std	Y+17, r24	; 0x11
	angleConv[1]='0';
 528:	8a 8b       	std	Y+18, r24	; 0x12
	angleConv[2]='.';
 52a:	9e e2       	ldi	r25, 0x2E	; 46
 52c:	9b 8b       	std	Y+19, r25	; 0x13
	angleConv[3]='0';
 52e:	8c 8b       	std	Y+20, r24	; 0x14
	heightConv[0]='0';
 530:	89 83       	std	Y+1, r24	; 0x01
	heightConv[1]='0';
 532:	8a 83       	std	Y+2, r24	; 0x02
	heightConv[2]='.';
 534:	9b 83       	std	Y+3, r25	; 0x03
	heightConv[3]='0';
 536:	8c 83       	std	Y+4, r24	; 0x04
	
	// PRINT DEFAULT STATE
	lcd_gotoxy(1,1);
 538:	61 e0       	ldi	r22, 0x01	; 1
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_gotoxy>
	lcd_print(HEIGHT_SELECT);
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	91 e0       	ldi	r25, 0x01	; 1
 544:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_print>
	lcd_gotoxy(1,2);
 548:	62 e0       	ldi	r22, 0x02	; 2
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_gotoxy>
	lcd_print(DEFAULT_ANGLE);
 550:	85 e3       	ldi	r24, 0x35	; 53
 552:	91 e0       	ldi	r25, 0x01	; 1
 554:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 558:	bf ef       	ldi	r27, 0xFF	; 255
 55a:	27 ea       	ldi	r18, 0xA7	; 167
 55c:	81 e6       	ldi	r24, 0x61	; 97
 55e:	b1 50       	subi	r27, 0x01	; 1
 560:	20 40       	sbci	r18, 0x00	; 0
 562:	80 40       	sbci	r24, 0x00	; 0
 564:	e1 f7       	brne	.-8      	; 0x55e <main+0x74>
 566:	00 c0       	rjmp	.+0      	; 0x568 <main+0x7e>
 568:	00 00       	nop
	
		
	_delay_ms(2000);
	print_height_change(heightConv);
 56a:	ce 01       	movw	r24, r28
 56c:	01 96       	adiw	r24, 0x01	; 1
 56e:	0e 94 2b 02 	call	0x456	; 0x456 <print_height_change>
 572:	9f ef       	ldi	r25, 0xFF	; 255
 574:	a7 ea       	ldi	r26, 0xA7	; 167
 576:	b1 e6       	ldi	r27, 0x61	; 97
 578:	91 50       	subi	r25, 0x01	; 1
 57a:	a0 40       	sbci	r26, 0x00	; 0
 57c:	b0 40       	sbci	r27, 0x00	; 0
 57e:	e1 f7       	brne	.-8      	; 0x578 <main+0x8e>
 580:	00 c0       	rjmp	.+0      	; 0x582 <main+0x98>
 582:	00 00       	nop
	_delay_ms(2000);
	height=33.8;
	ftoa(height,heightConv,1);
 584:	21 e0       	ldi	r18, 0x01	; 1
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	ae 01       	movw	r20, r28
 58a:	4f 5f       	subi	r20, 0xFF	; 255
 58c:	5f 4f       	sbci	r21, 0xFF	; 255
 58e:	63 e3       	ldi	r22, 0x33	; 51
 590:	73 e3       	ldi	r23, 0x33	; 51
 592:	87 e0       	ldi	r24, 0x07	; 7
 594:	92 e4       	ldi	r25, 0x42	; 66
 596:	0e 94 84 01 	call	0x308	; 0x308 <ftoa>
	print_height_change(heightConv);
 59a:	ce 01       	movw	r24, r28
 59c:	01 96       	adiw	r24, 0x01	; 1
 59e:	0e 94 2b 02 	call	0x456	; 0x456 <print_height_change>
 5a2:	2f ef       	ldi	r18, 0xFF	; 255
 5a4:	87 ea       	ldi	r24, 0xA7	; 167
 5a6:	91 e6       	ldi	r25, 0x61	; 97
 5a8:	21 50       	subi	r18, 0x01	; 1
 5aa:	80 40       	sbci	r24, 0x00	; 0
 5ac:	90 40       	sbci	r25, 0x00	; 0
 5ae:	e1 f7       	brne	.-8      	; 0x5a8 <main+0xbe>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <main+0xc8>
 5b2:	00 00       	nop
	
	//BEGIN CHANGING VALUES ETC.
	_delay_ms(2000);
	print_height_angle(angleConv,heightConv, 1); // select height
 5b4:	41 e0       	ldi	r20, 0x01	; 1
 5b6:	50 e0       	ldi	r21, 0x00	; 0
 5b8:	be 01       	movw	r22, r28
 5ba:	6f 5f       	subi	r22, 0xFF	; 255
 5bc:	7f 4f       	sbci	r23, 0xFF	; 255
 5be:	ce 01       	movw	r24, r28
 5c0:	41 96       	adiw	r24, 0x11	; 17
 5c2:	0e 94 ed 01 	call	0x3da	; 0x3da <print_height_angle>
 5c6:	af ef       	ldi	r26, 0xFF	; 255
 5c8:	b7 ea       	ldi	r27, 0xA7	; 167
 5ca:	21 e6       	ldi	r18, 0x61	; 97
 5cc:	a1 50       	subi	r26, 0x01	; 1
 5ce:	b0 40       	sbci	r27, 0x00	; 0
 5d0:	20 40       	sbci	r18, 0x00	; 0
 5d2:	e1 f7       	brne	.-8      	; 0x5cc <main+0xe2>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <main+0xec>
 5d6:	00 00       	nop
	_delay_ms(2000);
	print_height_angle(angleConv,heightConv, 0); //angle select
 5d8:	40 e0       	ldi	r20, 0x00	; 0
 5da:	50 e0       	ldi	r21, 0x00	; 0
 5dc:	be 01       	movw	r22, r28
 5de:	6f 5f       	subi	r22, 0xFF	; 255
 5e0:	7f 4f       	sbci	r23, 0xFF	; 255
 5e2:	ce 01       	movw	r24, r28
 5e4:	41 96       	adiw	r24, 0x11	; 17
 5e6:	0e 94 ed 01 	call	0x3da	; 0x3da <print_height_angle>
 5ea:	8f ef       	ldi	r24, 0xFF	; 255
 5ec:	97 ea       	ldi	r25, 0xA7	; 167
 5ee:	a1 e6       	ldi	r26, 0x61	; 97
 5f0:	81 50       	subi	r24, 0x01	; 1
 5f2:	90 40       	sbci	r25, 0x00	; 0
 5f4:	a0 40       	sbci	r26, 0x00	; 0
 5f6:	e1 f7       	brne	.-8      	; 0x5f0 <main+0x106>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <main+0x110>
 5fa:	00 00       	nop
	_delay_ms(2000);
	print_angle_change(angleConv);
 5fc:	ce 01       	movw	r24, r28
 5fe:	41 96       	adiw	r24, 0x11	; 17
 600:	0e 94 50 02 	call	0x4a0	; 0x4a0 <print_angle_change>
 604:	bf ef       	ldi	r27, 0xFF	; 255
 606:	27 ea       	ldi	r18, 0xA7	; 167
 608:	81 e6       	ldi	r24, 0x61	; 97
 60a:	b1 50       	subi	r27, 0x01	; 1
 60c:	20 40       	sbci	r18, 0x00	; 0
 60e:	80 40       	sbci	r24, 0x00	; 0
 610:	e1 f7       	brne	.-8      	; 0x60a <main+0x120>
 612:	00 c0       	rjmp	.+0      	; 0x614 <main+0x12a>
 614:	00 00       	nop
	_delay_ms(2000);
	angle=37.9;
	ftoa(angle,angleConv,1);
 616:	21 e0       	ldi	r18, 0x01	; 1
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	ae 01       	movw	r20, r28
 61c:	4f 5e       	subi	r20, 0xEF	; 239
 61e:	5f 4f       	sbci	r21, 0xFF	; 255
 620:	6a e9       	ldi	r22, 0x9A	; 154
 622:	79 e9       	ldi	r23, 0x99	; 153
 624:	87 e1       	ldi	r24, 0x17	; 23
 626:	92 e4       	ldi	r25, 0x42	; 66
 628:	0e 94 84 01 	call	0x308	; 0x308 <ftoa>
	print_angle_change(angleConv);
 62c:	ce 01       	movw	r24, r28
 62e:	41 96       	adiw	r24, 0x11	; 17
 630:	0e 94 50 02 	call	0x4a0	; 0x4a0 <print_angle_change>
 634:	9f ef       	ldi	r25, 0xFF	; 255
 636:	a7 ea       	ldi	r26, 0xA7	; 167
 638:	b1 e6       	ldi	r27, 0x61	; 97
 63a:	91 50       	subi	r25, 0x01	; 1
 63c:	a0 40       	sbci	r26, 0x00	; 0
 63e:	b0 40       	sbci	r27, 0x00	; 0
 640:	e1 f7       	brne	.-8      	; 0x63a <main+0x150>
 642:	00 c0       	rjmp	.+0      	; 0x644 <main+0x15a>
 644:	00 00       	nop
	_delay_ms(2000);
	print_height_angle(angleConv,heightConv,1); 
 646:	41 e0       	ldi	r20, 0x01	; 1
 648:	50 e0       	ldi	r21, 0x00	; 0
 64a:	be 01       	movw	r22, r28
 64c:	6f 5f       	subi	r22, 0xFF	; 255
 64e:	7f 4f       	sbci	r23, 0xFF	; 255
 650:	ce 01       	movw	r24, r28
 652:	41 96       	adiw	r24, 0x11	; 17
 654:	0e 94 ed 01 	call	0x3da	; 0x3da <print_height_angle>
	
}
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	a0 96       	adiw	r28, 0x20	; 32
 65e:	0f b6       	in	r0, 0x3f	; 63
 660:	f8 94       	cli
 662:	de bf       	out	0x3e, r29	; 62
 664:	0f be       	out	0x3f, r0	; 63
 666:	cd bf       	out	0x3d, r28	; 61
 668:	df 91       	pop	r29
 66a:	cf 91       	pop	r28
 66c:	08 95       	ret

0000066e <__subsf3>:
 66e:	50 58       	subi	r21, 0x80	; 128

00000670 <__addsf3>:
 670:	bb 27       	eor	r27, r27
 672:	aa 27       	eor	r26, r26
 674:	0e 94 4f 03 	call	0x69e	; 0x69e <__addsf3x>
 678:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__fp_round>
 67c:	0e 94 20 04 	call	0x840	; 0x840 <__fp_pscA>
 680:	38 f0       	brcs	.+14     	; 0x690 <__addsf3+0x20>
 682:	0e 94 27 04 	call	0x84e	; 0x84e <__fp_pscB>
 686:	20 f0       	brcs	.+8      	; 0x690 <__addsf3+0x20>
 688:	39 f4       	brne	.+14     	; 0x698 <__addsf3+0x28>
 68a:	9f 3f       	cpi	r25, 0xFF	; 255
 68c:	19 f4       	brne	.+6      	; 0x694 <__addsf3+0x24>
 68e:	26 f4       	brtc	.+8      	; 0x698 <__addsf3+0x28>
 690:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_nan>
 694:	0e f4       	brtc	.+2      	; 0x698 <__addsf3+0x28>
 696:	e0 95       	com	r30
 698:	e7 fb       	bst	r30, 7
 69a:	0c 94 17 04 	jmp	0x82e	; 0x82e <__fp_inf>

0000069e <__addsf3x>:
 69e:	e9 2f       	mov	r30, r25
 6a0:	0e 94 3f 04 	call	0x87e	; 0x87e <__fp_split3>
 6a4:	58 f3       	brcs	.-42     	; 0x67c <__addsf3+0xc>
 6a6:	ba 17       	cp	r27, r26
 6a8:	62 07       	cpc	r22, r18
 6aa:	73 07       	cpc	r23, r19
 6ac:	84 07       	cpc	r24, r20
 6ae:	95 07       	cpc	r25, r21
 6b0:	20 f0       	brcs	.+8      	; 0x6ba <__addsf3x+0x1c>
 6b2:	79 f4       	brne	.+30     	; 0x6d2 <__addsf3x+0x34>
 6b4:	a6 f5       	brtc	.+104    	; 0x71e <__addsf3x+0x80>
 6b6:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_zero>
 6ba:	0e f4       	brtc	.+2      	; 0x6be <__addsf3x+0x20>
 6bc:	e0 95       	com	r30
 6be:	0b 2e       	mov	r0, r27
 6c0:	ba 2f       	mov	r27, r26
 6c2:	a0 2d       	mov	r26, r0
 6c4:	0b 01       	movw	r0, r22
 6c6:	b9 01       	movw	r22, r18
 6c8:	90 01       	movw	r18, r0
 6ca:	0c 01       	movw	r0, r24
 6cc:	ca 01       	movw	r24, r20
 6ce:	a0 01       	movw	r20, r0
 6d0:	11 24       	eor	r1, r1
 6d2:	ff 27       	eor	r31, r31
 6d4:	59 1b       	sub	r21, r25
 6d6:	99 f0       	breq	.+38     	; 0x6fe <__addsf3x+0x60>
 6d8:	59 3f       	cpi	r21, 0xF9	; 249
 6da:	50 f4       	brcc	.+20     	; 0x6f0 <__addsf3x+0x52>
 6dc:	50 3e       	cpi	r21, 0xE0	; 224
 6de:	68 f1       	brcs	.+90     	; 0x73a <__addsf3x+0x9c>
 6e0:	1a 16       	cp	r1, r26
 6e2:	f0 40       	sbci	r31, 0x00	; 0
 6e4:	a2 2f       	mov	r26, r18
 6e6:	23 2f       	mov	r18, r19
 6e8:	34 2f       	mov	r19, r20
 6ea:	44 27       	eor	r20, r20
 6ec:	58 5f       	subi	r21, 0xF8	; 248
 6ee:	f3 cf       	rjmp	.-26     	; 0x6d6 <__addsf3x+0x38>
 6f0:	46 95       	lsr	r20
 6f2:	37 95       	ror	r19
 6f4:	27 95       	ror	r18
 6f6:	a7 95       	ror	r26
 6f8:	f0 40       	sbci	r31, 0x00	; 0
 6fa:	53 95       	inc	r21
 6fc:	c9 f7       	brne	.-14     	; 0x6f0 <__addsf3x+0x52>
 6fe:	7e f4       	brtc	.+30     	; 0x71e <__addsf3x+0x80>
 700:	1f 16       	cp	r1, r31
 702:	ba 0b       	sbc	r27, r26
 704:	62 0b       	sbc	r22, r18
 706:	73 0b       	sbc	r23, r19
 708:	84 0b       	sbc	r24, r20
 70a:	ba f0       	brmi	.+46     	; 0x73a <__addsf3x+0x9c>
 70c:	91 50       	subi	r25, 0x01	; 1
 70e:	a1 f0       	breq	.+40     	; 0x738 <__addsf3x+0x9a>
 710:	ff 0f       	add	r31, r31
 712:	bb 1f       	adc	r27, r27
 714:	66 1f       	adc	r22, r22
 716:	77 1f       	adc	r23, r23
 718:	88 1f       	adc	r24, r24
 71a:	c2 f7       	brpl	.-16     	; 0x70c <__addsf3x+0x6e>
 71c:	0e c0       	rjmp	.+28     	; 0x73a <__addsf3x+0x9c>
 71e:	ba 0f       	add	r27, r26
 720:	62 1f       	adc	r22, r18
 722:	73 1f       	adc	r23, r19
 724:	84 1f       	adc	r24, r20
 726:	48 f4       	brcc	.+18     	; 0x73a <__addsf3x+0x9c>
 728:	87 95       	ror	r24
 72a:	77 95       	ror	r23
 72c:	67 95       	ror	r22
 72e:	b7 95       	ror	r27
 730:	f7 95       	ror	r31
 732:	9e 3f       	cpi	r25, 0xFE	; 254
 734:	08 f0       	brcs	.+2      	; 0x738 <__addsf3x+0x9a>
 736:	b0 cf       	rjmp	.-160    	; 0x698 <__addsf3+0x28>
 738:	93 95       	inc	r25
 73a:	88 0f       	add	r24, r24
 73c:	08 f0       	brcs	.+2      	; 0x740 <__addsf3x+0xa2>
 73e:	99 27       	eor	r25, r25
 740:	ee 0f       	add	r30, r30
 742:	97 95       	ror	r25
 744:	87 95       	ror	r24
 746:	08 95       	ret

00000748 <__fixsfsi>:
 748:	0e 94 ab 03 	call	0x756	; 0x756 <__fixunssfsi>
 74c:	68 94       	set
 74e:	b1 11       	cpse	r27, r1
 750:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__fp_szero>
 754:	08 95       	ret

00000756 <__fixunssfsi>:
 756:	0e 94 47 04 	call	0x88e	; 0x88e <__fp_splitA>
 75a:	88 f0       	brcs	.+34     	; 0x77e <__fixunssfsi+0x28>
 75c:	9f 57       	subi	r25, 0x7F	; 127
 75e:	98 f0       	brcs	.+38     	; 0x786 <__fixunssfsi+0x30>
 760:	b9 2f       	mov	r27, r25
 762:	99 27       	eor	r25, r25
 764:	b7 51       	subi	r27, 0x17	; 23
 766:	b0 f0       	brcs	.+44     	; 0x794 <__fixunssfsi+0x3e>
 768:	e1 f0       	breq	.+56     	; 0x7a2 <__fixunssfsi+0x4c>
 76a:	66 0f       	add	r22, r22
 76c:	77 1f       	adc	r23, r23
 76e:	88 1f       	adc	r24, r24
 770:	99 1f       	adc	r25, r25
 772:	1a f0       	brmi	.+6      	; 0x77a <__fixunssfsi+0x24>
 774:	ba 95       	dec	r27
 776:	c9 f7       	brne	.-14     	; 0x76a <__fixunssfsi+0x14>
 778:	14 c0       	rjmp	.+40     	; 0x7a2 <__fixunssfsi+0x4c>
 77a:	b1 30       	cpi	r27, 0x01	; 1
 77c:	91 f0       	breq	.+36     	; 0x7a2 <__fixunssfsi+0x4c>
 77e:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__fp_zero>
 782:	b1 e0       	ldi	r27, 0x01	; 1
 784:	08 95       	ret
 786:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_zero>
 78a:	67 2f       	mov	r22, r23
 78c:	78 2f       	mov	r23, r24
 78e:	88 27       	eor	r24, r24
 790:	b8 5f       	subi	r27, 0xF8	; 248
 792:	39 f0       	breq	.+14     	; 0x7a2 <__fixunssfsi+0x4c>
 794:	b9 3f       	cpi	r27, 0xF9	; 249
 796:	cc f3       	brlt	.-14     	; 0x78a <__fixunssfsi+0x34>
 798:	86 95       	lsr	r24
 79a:	77 95       	ror	r23
 79c:	67 95       	ror	r22
 79e:	b3 95       	inc	r27
 7a0:	d9 f7       	brne	.-10     	; 0x798 <__fixunssfsi+0x42>
 7a2:	3e f4       	brtc	.+14     	; 0x7b2 <__fixunssfsi+0x5c>
 7a4:	90 95       	com	r25
 7a6:	80 95       	com	r24
 7a8:	70 95       	com	r23
 7aa:	61 95       	neg	r22
 7ac:	7f 4f       	sbci	r23, 0xFF	; 255
 7ae:	8f 4f       	sbci	r24, 0xFF	; 255
 7b0:	9f 4f       	sbci	r25, 0xFF	; 255
 7b2:	08 95       	ret

000007b4 <__floatunsisf>:
 7b4:	e8 94       	clt
 7b6:	09 c0       	rjmp	.+18     	; 0x7ca <__floatsisf+0x12>

000007b8 <__floatsisf>:
 7b8:	97 fb       	bst	r25, 7
 7ba:	3e f4       	brtc	.+14     	; 0x7ca <__floatsisf+0x12>
 7bc:	90 95       	com	r25
 7be:	80 95       	com	r24
 7c0:	70 95       	com	r23
 7c2:	61 95       	neg	r22
 7c4:	7f 4f       	sbci	r23, 0xFF	; 255
 7c6:	8f 4f       	sbci	r24, 0xFF	; 255
 7c8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ca:	99 23       	and	r25, r25
 7cc:	a9 f0       	breq	.+42     	; 0x7f8 <__floatsisf+0x40>
 7ce:	f9 2f       	mov	r31, r25
 7d0:	96 e9       	ldi	r25, 0x96	; 150
 7d2:	bb 27       	eor	r27, r27
 7d4:	93 95       	inc	r25
 7d6:	f6 95       	lsr	r31
 7d8:	87 95       	ror	r24
 7da:	77 95       	ror	r23
 7dc:	67 95       	ror	r22
 7de:	b7 95       	ror	r27
 7e0:	f1 11       	cpse	r31, r1
 7e2:	f8 cf       	rjmp	.-16     	; 0x7d4 <__floatsisf+0x1c>
 7e4:	fa f4       	brpl	.+62     	; 0x824 <__floatsisf+0x6c>
 7e6:	bb 0f       	add	r27, r27
 7e8:	11 f4       	brne	.+4      	; 0x7ee <__floatsisf+0x36>
 7ea:	60 ff       	sbrs	r22, 0
 7ec:	1b c0       	rjmp	.+54     	; 0x824 <__floatsisf+0x6c>
 7ee:	6f 5f       	subi	r22, 0xFF	; 255
 7f0:	7f 4f       	sbci	r23, 0xFF	; 255
 7f2:	8f 4f       	sbci	r24, 0xFF	; 255
 7f4:	9f 4f       	sbci	r25, 0xFF	; 255
 7f6:	16 c0       	rjmp	.+44     	; 0x824 <__floatsisf+0x6c>
 7f8:	88 23       	and	r24, r24
 7fa:	11 f0       	breq	.+4      	; 0x800 <__floatsisf+0x48>
 7fc:	96 e9       	ldi	r25, 0x96	; 150
 7fe:	11 c0       	rjmp	.+34     	; 0x822 <__floatsisf+0x6a>
 800:	77 23       	and	r23, r23
 802:	21 f0       	breq	.+8      	; 0x80c <__floatsisf+0x54>
 804:	9e e8       	ldi	r25, 0x8E	; 142
 806:	87 2f       	mov	r24, r23
 808:	76 2f       	mov	r23, r22
 80a:	05 c0       	rjmp	.+10     	; 0x816 <__floatsisf+0x5e>
 80c:	66 23       	and	r22, r22
 80e:	71 f0       	breq	.+28     	; 0x82c <__floatsisf+0x74>
 810:	96 e8       	ldi	r25, 0x86	; 134
 812:	86 2f       	mov	r24, r22
 814:	70 e0       	ldi	r23, 0x00	; 0
 816:	60 e0       	ldi	r22, 0x00	; 0
 818:	2a f0       	brmi	.+10     	; 0x824 <__floatsisf+0x6c>
 81a:	9a 95       	dec	r25
 81c:	66 0f       	add	r22, r22
 81e:	77 1f       	adc	r23, r23
 820:	88 1f       	adc	r24, r24
 822:	da f7       	brpl	.-10     	; 0x81a <__floatsisf+0x62>
 824:	88 0f       	add	r24, r24
 826:	96 95       	lsr	r25
 828:	87 95       	ror	r24
 82a:	97 f9       	bld	r25, 7
 82c:	08 95       	ret

0000082e <__fp_inf>:
 82e:	97 f9       	bld	r25, 7
 830:	9f 67       	ori	r25, 0x7F	; 127
 832:	80 e8       	ldi	r24, 0x80	; 128
 834:	70 e0       	ldi	r23, 0x00	; 0
 836:	60 e0       	ldi	r22, 0x00	; 0
 838:	08 95       	ret

0000083a <__fp_nan>:
 83a:	9f ef       	ldi	r25, 0xFF	; 255
 83c:	80 ec       	ldi	r24, 0xC0	; 192
 83e:	08 95       	ret

00000840 <__fp_pscA>:
 840:	00 24       	eor	r0, r0
 842:	0a 94       	dec	r0
 844:	16 16       	cp	r1, r22
 846:	17 06       	cpc	r1, r23
 848:	18 06       	cpc	r1, r24
 84a:	09 06       	cpc	r0, r25
 84c:	08 95       	ret

0000084e <__fp_pscB>:
 84e:	00 24       	eor	r0, r0
 850:	0a 94       	dec	r0
 852:	12 16       	cp	r1, r18
 854:	13 06       	cpc	r1, r19
 856:	14 06       	cpc	r1, r20
 858:	05 06       	cpc	r0, r21
 85a:	08 95       	ret

0000085c <__fp_round>:
 85c:	09 2e       	mov	r0, r25
 85e:	03 94       	inc	r0
 860:	00 0c       	add	r0, r0
 862:	11 f4       	brne	.+4      	; 0x868 <__fp_round+0xc>
 864:	88 23       	and	r24, r24
 866:	52 f0       	brmi	.+20     	; 0x87c <__fp_round+0x20>
 868:	bb 0f       	add	r27, r27
 86a:	40 f4       	brcc	.+16     	; 0x87c <__fp_round+0x20>
 86c:	bf 2b       	or	r27, r31
 86e:	11 f4       	brne	.+4      	; 0x874 <__fp_round+0x18>
 870:	60 ff       	sbrs	r22, 0
 872:	04 c0       	rjmp	.+8      	; 0x87c <__fp_round+0x20>
 874:	6f 5f       	subi	r22, 0xFF	; 255
 876:	7f 4f       	sbci	r23, 0xFF	; 255
 878:	8f 4f       	sbci	r24, 0xFF	; 255
 87a:	9f 4f       	sbci	r25, 0xFF	; 255
 87c:	08 95       	ret

0000087e <__fp_split3>:
 87e:	57 fd       	sbrc	r21, 7
 880:	90 58       	subi	r25, 0x80	; 128
 882:	44 0f       	add	r20, r20
 884:	55 1f       	adc	r21, r21
 886:	59 f0       	breq	.+22     	; 0x89e <__fp_splitA+0x10>
 888:	5f 3f       	cpi	r21, 0xFF	; 255
 88a:	71 f0       	breq	.+28     	; 0x8a8 <__fp_splitA+0x1a>
 88c:	47 95       	ror	r20

0000088e <__fp_splitA>:
 88e:	88 0f       	add	r24, r24
 890:	97 fb       	bst	r25, 7
 892:	99 1f       	adc	r25, r25
 894:	61 f0       	breq	.+24     	; 0x8ae <__fp_splitA+0x20>
 896:	9f 3f       	cpi	r25, 0xFF	; 255
 898:	79 f0       	breq	.+30     	; 0x8b8 <__fp_splitA+0x2a>
 89a:	87 95       	ror	r24
 89c:	08 95       	ret
 89e:	12 16       	cp	r1, r18
 8a0:	13 06       	cpc	r1, r19
 8a2:	14 06       	cpc	r1, r20
 8a4:	55 1f       	adc	r21, r21
 8a6:	f2 cf       	rjmp	.-28     	; 0x88c <__fp_split3+0xe>
 8a8:	46 95       	lsr	r20
 8aa:	f1 df       	rcall	.-30     	; 0x88e <__fp_splitA>
 8ac:	08 c0       	rjmp	.+16     	; 0x8be <__fp_splitA+0x30>
 8ae:	16 16       	cp	r1, r22
 8b0:	17 06       	cpc	r1, r23
 8b2:	18 06       	cpc	r1, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	f1 cf       	rjmp	.-30     	; 0x89a <__fp_splitA+0xc>
 8b8:	86 95       	lsr	r24
 8ba:	71 05       	cpc	r23, r1
 8bc:	61 05       	cpc	r22, r1
 8be:	08 94       	sec
 8c0:	08 95       	ret

000008c2 <__fp_zero>:
 8c2:	e8 94       	clt

000008c4 <__fp_szero>:
 8c4:	bb 27       	eor	r27, r27
 8c6:	66 27       	eor	r22, r22
 8c8:	77 27       	eor	r23, r23
 8ca:	cb 01       	movw	r24, r22
 8cc:	97 f9       	bld	r25, 7
 8ce:	08 95       	ret

000008d0 <__mulsf3>:
 8d0:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__mulsf3x>
 8d4:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__fp_round>
 8d8:	0e 94 20 04 	call	0x840	; 0x840 <__fp_pscA>
 8dc:	38 f0       	brcs	.+14     	; 0x8ec <__mulsf3+0x1c>
 8de:	0e 94 27 04 	call	0x84e	; 0x84e <__fp_pscB>
 8e2:	20 f0       	brcs	.+8      	; 0x8ec <__mulsf3+0x1c>
 8e4:	95 23       	and	r25, r21
 8e6:	11 f0       	breq	.+4      	; 0x8ec <__mulsf3+0x1c>
 8e8:	0c 94 17 04 	jmp	0x82e	; 0x82e <__fp_inf>
 8ec:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_nan>
 8f0:	11 24       	eor	r1, r1
 8f2:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__fp_szero>

000008f6 <__mulsf3x>:
 8f6:	0e 94 3f 04 	call	0x87e	; 0x87e <__fp_split3>
 8fa:	70 f3       	brcs	.-36     	; 0x8d8 <__mulsf3+0x8>

000008fc <__mulsf3_pse>:
 8fc:	95 9f       	mul	r25, r21
 8fe:	c1 f3       	breq	.-16     	; 0x8f0 <__mulsf3+0x20>
 900:	95 0f       	add	r25, r21
 902:	50 e0       	ldi	r21, 0x00	; 0
 904:	55 1f       	adc	r21, r21
 906:	62 9f       	mul	r22, r18
 908:	f0 01       	movw	r30, r0
 90a:	72 9f       	mul	r23, r18
 90c:	bb 27       	eor	r27, r27
 90e:	f0 0d       	add	r31, r0
 910:	b1 1d       	adc	r27, r1
 912:	63 9f       	mul	r22, r19
 914:	aa 27       	eor	r26, r26
 916:	f0 0d       	add	r31, r0
 918:	b1 1d       	adc	r27, r1
 91a:	aa 1f       	adc	r26, r26
 91c:	64 9f       	mul	r22, r20
 91e:	66 27       	eor	r22, r22
 920:	b0 0d       	add	r27, r0
 922:	a1 1d       	adc	r26, r1
 924:	66 1f       	adc	r22, r22
 926:	82 9f       	mul	r24, r18
 928:	22 27       	eor	r18, r18
 92a:	b0 0d       	add	r27, r0
 92c:	a1 1d       	adc	r26, r1
 92e:	62 1f       	adc	r22, r18
 930:	73 9f       	mul	r23, r19
 932:	b0 0d       	add	r27, r0
 934:	a1 1d       	adc	r26, r1
 936:	62 1f       	adc	r22, r18
 938:	83 9f       	mul	r24, r19
 93a:	a0 0d       	add	r26, r0
 93c:	61 1d       	adc	r22, r1
 93e:	22 1f       	adc	r18, r18
 940:	74 9f       	mul	r23, r20
 942:	33 27       	eor	r19, r19
 944:	a0 0d       	add	r26, r0
 946:	61 1d       	adc	r22, r1
 948:	23 1f       	adc	r18, r19
 94a:	84 9f       	mul	r24, r20
 94c:	60 0d       	add	r22, r0
 94e:	21 1d       	adc	r18, r1
 950:	82 2f       	mov	r24, r18
 952:	76 2f       	mov	r23, r22
 954:	6a 2f       	mov	r22, r26
 956:	11 24       	eor	r1, r1
 958:	9f 57       	subi	r25, 0x7F	; 127
 95a:	50 40       	sbci	r21, 0x00	; 0
 95c:	9a f0       	brmi	.+38     	; 0x984 <__stack+0x85>
 95e:	f1 f0       	breq	.+60     	; 0x99c <__stack+0x9d>
 960:	88 23       	and	r24, r24
 962:	4a f0       	brmi	.+18     	; 0x976 <__stack+0x77>
 964:	ee 0f       	add	r30, r30
 966:	ff 1f       	adc	r31, r31
 968:	bb 1f       	adc	r27, r27
 96a:	66 1f       	adc	r22, r22
 96c:	77 1f       	adc	r23, r23
 96e:	88 1f       	adc	r24, r24
 970:	91 50       	subi	r25, 0x01	; 1
 972:	50 40       	sbci	r21, 0x00	; 0
 974:	a9 f7       	brne	.-22     	; 0x960 <__stack+0x61>
 976:	9e 3f       	cpi	r25, 0xFE	; 254
 978:	51 05       	cpc	r21, r1
 97a:	80 f0       	brcs	.+32     	; 0x99c <__stack+0x9d>
 97c:	0c 94 17 04 	jmp	0x82e	; 0x82e <__fp_inf>
 980:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__fp_szero>
 984:	5f 3f       	cpi	r21, 0xFF	; 255
 986:	e4 f3       	brlt	.-8      	; 0x980 <__stack+0x81>
 988:	98 3e       	cpi	r25, 0xE8	; 232
 98a:	d4 f3       	brlt	.-12     	; 0x980 <__stack+0x81>
 98c:	86 95       	lsr	r24
 98e:	77 95       	ror	r23
 990:	67 95       	ror	r22
 992:	b7 95       	ror	r27
 994:	f7 95       	ror	r31
 996:	e7 95       	ror	r30
 998:	9f 5f       	subi	r25, 0xFF	; 255
 99a:	c1 f7       	brne	.-16     	; 0x98c <__stack+0x8d>
 99c:	fe 2b       	or	r31, r30
 99e:	88 0f       	add	r24, r24
 9a0:	91 1d       	adc	r25, r1
 9a2:	96 95       	lsr	r25
 9a4:	87 95       	ror	r24
 9a6:	97 f9       	bld	r25, 7
 9a8:	08 95       	ret

000009aa <pow>:
 9aa:	fa 01       	movw	r30, r20
 9ac:	ee 0f       	add	r30, r30
 9ae:	ff 1f       	adc	r31, r31
 9b0:	30 96       	adiw	r30, 0x00	; 0
 9b2:	21 05       	cpc	r18, r1
 9b4:	31 05       	cpc	r19, r1
 9b6:	a1 f1       	breq	.+104    	; 0xa20 <pow+0x76>
 9b8:	61 15       	cp	r22, r1
 9ba:	71 05       	cpc	r23, r1
 9bc:	61 f4       	brne	.+24     	; 0x9d6 <pow+0x2c>
 9be:	80 38       	cpi	r24, 0x80	; 128
 9c0:	bf e3       	ldi	r27, 0x3F	; 63
 9c2:	9b 07       	cpc	r25, r27
 9c4:	49 f1       	breq	.+82     	; 0xa18 <pow+0x6e>
 9c6:	68 94       	set
 9c8:	90 38       	cpi	r25, 0x80	; 128
 9ca:	81 05       	cpc	r24, r1
 9cc:	61 f0       	breq	.+24     	; 0x9e6 <pow+0x3c>
 9ce:	80 38       	cpi	r24, 0x80	; 128
 9d0:	bf ef       	ldi	r27, 0xFF	; 255
 9d2:	9b 07       	cpc	r25, r27
 9d4:	41 f0       	breq	.+16     	; 0x9e6 <pow+0x3c>
 9d6:	99 23       	and	r25, r25
 9d8:	4a f5       	brpl	.+82     	; 0xa2c <pow+0x82>
 9da:	ff 3f       	cpi	r31, 0xFF	; 255
 9dc:	e1 05       	cpc	r30, r1
 9de:	31 05       	cpc	r19, r1
 9e0:	21 05       	cpc	r18, r1
 9e2:	19 f1       	breq	.+70     	; 0xa2a <pow+0x80>
 9e4:	e8 94       	clt
 9e6:	08 94       	sec
 9e8:	e7 95       	ror	r30
 9ea:	d9 01       	movw	r26, r18
 9ec:	aa 23       	and	r26, r26
 9ee:	29 f4       	brne	.+10     	; 0x9fa <pow+0x50>
 9f0:	ab 2f       	mov	r26, r27
 9f2:	be 2f       	mov	r27, r30
 9f4:	f8 5f       	subi	r31, 0xF8	; 248
 9f6:	d0 f3       	brcs	.-12     	; 0x9ec <pow+0x42>
 9f8:	10 c0       	rjmp	.+32     	; 0xa1a <pow+0x70>
 9fa:	ff 5f       	subi	r31, 0xFF	; 255
 9fc:	70 f4       	brcc	.+28     	; 0xa1a <pow+0x70>
 9fe:	a6 95       	lsr	r26
 a00:	e0 f7       	brcc	.-8      	; 0x9fa <pow+0x50>
 a02:	f7 39       	cpi	r31, 0x97	; 151
 a04:	50 f0       	brcs	.+20     	; 0xa1a <pow+0x70>
 a06:	19 f0       	breq	.+6      	; 0xa0e <pow+0x64>
 a08:	ff 3a       	cpi	r31, 0xAF	; 175
 a0a:	38 f4       	brcc	.+14     	; 0xa1a <pow+0x70>
 a0c:	9f 77       	andi	r25, 0x7F	; 127
 a0e:	9f 93       	push	r25
 a10:	0d d0       	rcall	.+26     	; 0xa2c <pow+0x82>
 a12:	0f 90       	pop	r0
 a14:	07 fc       	sbrc	r0, 7
 a16:	90 58       	subi	r25, 0x80	; 128
 a18:	08 95       	ret
 a1a:	46 f0       	brts	.+16     	; 0xa2c <pow+0x82>
 a1c:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_nan>
 a20:	60 e0       	ldi	r22, 0x00	; 0
 a22:	70 e0       	ldi	r23, 0x00	; 0
 a24:	80 e8       	ldi	r24, 0x80	; 128
 a26:	9f e3       	ldi	r25, 0x3F	; 63
 a28:	08 95       	ret
 a2a:	4f e7       	ldi	r20, 0x7F	; 127
 a2c:	9f 77       	andi	r25, 0x7F	; 127
 a2e:	5f 93       	push	r21
 a30:	4f 93       	push	r20
 a32:	3f 93       	push	r19
 a34:	2f 93       	push	r18
 a36:	0e 94 d0 05 	call	0xba0	; 0xba0 <log>
 a3a:	2f 91       	pop	r18
 a3c:	3f 91       	pop	r19
 a3e:	4f 91       	pop	r20
 a40:	5f 91       	pop	r21
 a42:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__mulsf3>
 a46:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <exp>
 a4a:	29 f4       	brne	.+10     	; 0xa56 <pow+0xac>
 a4c:	16 f0       	brts	.+4      	; 0xa52 <pow+0xa8>
 a4e:	0c 94 17 04 	jmp	0x82e	; 0x82e <__fp_inf>
 a52:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_zero>
 a56:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_nan>

00000a5a <exp>:
 a5a:	0e 94 47 04 	call	0x88e	; 0x88e <__fp_splitA>
 a5e:	a8 f3       	brcs	.-22     	; 0xa4a <pow+0xa0>
 a60:	96 38       	cpi	r25, 0x86	; 134
 a62:	a0 f7       	brcc	.-24     	; 0xa4c <pow+0xa2>
 a64:	07 f8       	bld	r0, 7
 a66:	0f 92       	push	r0
 a68:	e8 94       	clt
 a6a:	2b e3       	ldi	r18, 0x3B	; 59
 a6c:	3a ea       	ldi	r19, 0xAA	; 170
 a6e:	48 eb       	ldi	r20, 0xB8	; 184
 a70:	5f e7       	ldi	r21, 0x7F	; 127
 a72:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__mulsf3_pse>
 a76:	0f 92       	push	r0
 a78:	0f 92       	push	r0
 a7a:	0f 92       	push	r0
 a7c:	4d b7       	in	r20, 0x3d	; 61
 a7e:	5e b7       	in	r21, 0x3e	; 62
 a80:	0f 92       	push	r0
 a82:	0e 94 18 06 	call	0xc30	; 0xc30 <modf>
 a86:	e4 eb       	ldi	r30, 0xB4	; 180
 a88:	f0 e0       	ldi	r31, 0x00	; 0
 a8a:	0e 94 5f 05 	call	0xabe	; 0xabe <__fp_powser>
 a8e:	4f 91       	pop	r20
 a90:	5f 91       	pop	r21
 a92:	ef 91       	pop	r30
 a94:	ff 91       	pop	r31
 a96:	e5 95       	asr	r30
 a98:	ee 1f       	adc	r30, r30
 a9a:	ff 1f       	adc	r31, r31
 a9c:	49 f0       	breq	.+18     	; 0xab0 <exp+0x56>
 a9e:	fe 57       	subi	r31, 0x7E	; 126
 aa0:	e0 68       	ori	r30, 0x80	; 128
 aa2:	44 27       	eor	r20, r20
 aa4:	ee 0f       	add	r30, r30
 aa6:	44 1f       	adc	r20, r20
 aa8:	fa 95       	dec	r31
 aaa:	e1 f7       	brne	.-8      	; 0xaa4 <exp+0x4a>
 aac:	41 95       	neg	r20
 aae:	55 0b       	sbc	r21, r21
 ab0:	0e 94 92 05 	call	0xb24	; 0xb24 <ldexp>
 ab4:	0f 90       	pop	r0
 ab6:	07 fe       	sbrs	r0, 7
 ab8:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <inverse>
 abc:	08 95       	ret

00000abe <__fp_powser>:
 abe:	df 93       	push	r29
 ac0:	cf 93       	push	r28
 ac2:	1f 93       	push	r17
 ac4:	0f 93       	push	r16
 ac6:	ff 92       	push	r15
 ac8:	ef 92       	push	r14
 aca:	df 92       	push	r13
 acc:	7b 01       	movw	r14, r22
 ace:	8c 01       	movw	r16, r24
 ad0:	68 94       	set
 ad2:	06 c0       	rjmp	.+12     	; 0xae0 <__fp_powser+0x22>
 ad4:	da 2e       	mov	r13, r26
 ad6:	ef 01       	movw	r28, r30
 ad8:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__mulsf3x>
 adc:	fe 01       	movw	r30, r28
 ade:	e8 94       	clt
 ae0:	a5 91       	lpm	r26, Z+
 ae2:	25 91       	lpm	r18, Z+
 ae4:	35 91       	lpm	r19, Z+
 ae6:	45 91       	lpm	r20, Z+
 ae8:	55 91       	lpm	r21, Z+
 aea:	a6 f3       	brts	.-24     	; 0xad4 <__fp_powser+0x16>
 aec:	ef 01       	movw	r28, r30
 aee:	0e 94 4f 03 	call	0x69e	; 0x69e <__addsf3x>
 af2:	fe 01       	movw	r30, r28
 af4:	97 01       	movw	r18, r14
 af6:	a8 01       	movw	r20, r16
 af8:	da 94       	dec	r13
 afa:	69 f7       	brne	.-38     	; 0xad6 <__fp_powser+0x18>
 afc:	df 90       	pop	r13
 afe:	ef 90       	pop	r14
 b00:	ff 90       	pop	r15
 b02:	0f 91       	pop	r16
 b04:	1f 91       	pop	r17
 b06:	cf 91       	pop	r28
 b08:	df 91       	pop	r29
 b0a:	08 95       	ret

00000b0c <inverse>:
 b0c:	9b 01       	movw	r18, r22
 b0e:	ac 01       	movw	r20, r24
 b10:	60 e0       	ldi	r22, 0x00	; 0
 b12:	70 e0       	ldi	r23, 0x00	; 0
 b14:	80 e8       	ldi	r24, 0x80	; 128
 b16:	9f e3       	ldi	r25, 0x3F	; 63
 b18:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__divsf3>
 b1c:	0c 94 17 04 	jmp	0x82e	; 0x82e <__fp_inf>
 b20:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__fp_mpack>

00000b24 <ldexp>:
 b24:	0e 94 47 04 	call	0x88e	; 0x88e <__fp_splitA>
 b28:	d8 f3       	brcs	.-10     	; 0xb20 <inverse+0x14>
 b2a:	99 23       	and	r25, r25
 b2c:	c9 f3       	breq	.-14     	; 0xb20 <inverse+0x14>
 b2e:	94 0f       	add	r25, r20
 b30:	51 1d       	adc	r21, r1
 b32:	a3 f3       	brvs	.-24     	; 0xb1c <inverse+0x10>
 b34:	91 50       	subi	r25, 0x01	; 1
 b36:	50 40       	sbci	r21, 0x00	; 0
 b38:	94 f0       	brlt	.+36     	; 0xb5e <ldexp+0x3a>
 b3a:	59 f0       	breq	.+22     	; 0xb52 <ldexp+0x2e>
 b3c:	88 23       	and	r24, r24
 b3e:	32 f0       	brmi	.+12     	; 0xb4c <ldexp+0x28>
 b40:	66 0f       	add	r22, r22
 b42:	77 1f       	adc	r23, r23
 b44:	88 1f       	adc	r24, r24
 b46:	91 50       	subi	r25, 0x01	; 1
 b48:	50 40       	sbci	r21, 0x00	; 0
 b4a:	c1 f7       	brne	.-16     	; 0xb3c <ldexp+0x18>
 b4c:	9e 3f       	cpi	r25, 0xFE	; 254
 b4e:	51 05       	cpc	r21, r1
 b50:	2c f7       	brge	.-54     	; 0xb1c <inverse+0x10>
 b52:	88 0f       	add	r24, r24
 b54:	91 1d       	adc	r25, r1
 b56:	96 95       	lsr	r25
 b58:	87 95       	ror	r24
 b5a:	97 f9       	bld	r25, 7
 b5c:	08 95       	ret
 b5e:	5f 3f       	cpi	r21, 0xFF	; 255
 b60:	ac f0       	brlt	.+42     	; 0xb8c <ldexp+0x68>
 b62:	98 3e       	cpi	r25, 0xE8	; 232
 b64:	9c f0       	brlt	.+38     	; 0xb8c <ldexp+0x68>
 b66:	bb 27       	eor	r27, r27
 b68:	86 95       	lsr	r24
 b6a:	77 95       	ror	r23
 b6c:	67 95       	ror	r22
 b6e:	b7 95       	ror	r27
 b70:	08 f4       	brcc	.+2      	; 0xb74 <ldexp+0x50>
 b72:	b1 60       	ori	r27, 0x01	; 1
 b74:	93 95       	inc	r25
 b76:	c1 f7       	brne	.-16     	; 0xb68 <ldexp+0x44>
 b78:	bb 0f       	add	r27, r27
 b7a:	58 f7       	brcc	.-42     	; 0xb52 <ldexp+0x2e>
 b7c:	11 f4       	brne	.+4      	; 0xb82 <ldexp+0x5e>
 b7e:	60 ff       	sbrs	r22, 0
 b80:	e8 cf       	rjmp	.-48     	; 0xb52 <ldexp+0x2e>
 b82:	6f 5f       	subi	r22, 0xFF	; 255
 b84:	7f 4f       	sbci	r23, 0xFF	; 255
 b86:	8f 4f       	sbci	r24, 0xFF	; 255
 b88:	9f 4f       	sbci	r25, 0xFF	; 255
 b8a:	e3 cf       	rjmp	.-58     	; 0xb52 <ldexp+0x2e>
 b8c:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__fp_szero>
 b90:	16 f0       	brts	.+4      	; 0xb96 <ldexp+0x72>
 b92:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__fp_mpack>
 b96:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_nan>
 b9a:	68 94       	set
 b9c:	0c 94 17 04 	jmp	0x82e	; 0x82e <__fp_inf>

00000ba0 <log>:
 ba0:	0e 94 47 04 	call	0x88e	; 0x88e <__fp_splitA>
 ba4:	a8 f3       	brcs	.-22     	; 0xb90 <ldexp+0x6c>
 ba6:	99 23       	and	r25, r25
 ba8:	c1 f3       	breq	.-16     	; 0xb9a <ldexp+0x76>
 baa:	ae f3       	brts	.-22     	; 0xb96 <ldexp+0x72>
 bac:	df 93       	push	r29
 bae:	cf 93       	push	r28
 bb0:	1f 93       	push	r17
 bb2:	0f 93       	push	r16
 bb4:	ff 92       	push	r15
 bb6:	c9 2f       	mov	r28, r25
 bb8:	dd 27       	eor	r29, r29
 bba:	88 23       	and	r24, r24
 bbc:	2a f0       	brmi	.+10     	; 0xbc8 <log+0x28>
 bbe:	21 97       	sbiw	r28, 0x01	; 1
 bc0:	66 0f       	add	r22, r22
 bc2:	77 1f       	adc	r23, r23
 bc4:	88 1f       	adc	r24, r24
 bc6:	da f7       	brpl	.-10     	; 0xbbe <log+0x1e>
 bc8:	20 e0       	ldi	r18, 0x00	; 0
 bca:	30 e0       	ldi	r19, 0x00	; 0
 bcc:	40 e8       	ldi	r20, 0x80	; 128
 bce:	5f eb       	ldi	r21, 0xBF	; 191
 bd0:	9f e3       	ldi	r25, 0x3F	; 63
 bd2:	88 39       	cpi	r24, 0x98	; 152
 bd4:	20 f0       	brcs	.+8      	; 0xbde <log+0x3e>
 bd6:	80 3e       	cpi	r24, 0xE0	; 224
 bd8:	38 f0       	brcs	.+14     	; 0xbe8 <log+0x48>
 bda:	21 96       	adiw	r28, 0x01	; 1
 bdc:	8f 77       	andi	r24, 0x7F	; 127
 bde:	0e 94 38 03 	call	0x670	; 0x670 <__addsf3>
 be2:	ec ed       	ldi	r30, 0xDC	; 220
 be4:	f0 e0       	ldi	r31, 0x00	; 0
 be6:	04 c0       	rjmp	.+8      	; 0xbf0 <log+0x50>
 be8:	0e 94 38 03 	call	0x670	; 0x670 <__addsf3>
 bec:	e9 e0       	ldi	r30, 0x09	; 9
 bee:	f1 e0       	ldi	r31, 0x01	; 1
 bf0:	0e 94 5f 05 	call	0xabe	; 0xabe <__fp_powser>
 bf4:	8b 01       	movw	r16, r22
 bf6:	be 01       	movw	r22, r28
 bf8:	ec 01       	movw	r28, r24
 bfa:	fb 2e       	mov	r15, r27
 bfc:	6f 57       	subi	r22, 0x7F	; 127
 bfe:	71 09       	sbc	r23, r1
 c00:	75 95       	asr	r23
 c02:	77 1f       	adc	r23, r23
 c04:	88 0b       	sbc	r24, r24
 c06:	99 0b       	sbc	r25, r25
 c08:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__floatsisf>
 c0c:	28 e1       	ldi	r18, 0x18	; 24
 c0e:	32 e7       	ldi	r19, 0x72	; 114
 c10:	41 e3       	ldi	r20, 0x31	; 49
 c12:	5f e3       	ldi	r21, 0x3F	; 63
 c14:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__mulsf3x>
 c18:	af 2d       	mov	r26, r15
 c1a:	98 01       	movw	r18, r16
 c1c:	ae 01       	movw	r20, r28
 c1e:	ff 90       	pop	r15
 c20:	0f 91       	pop	r16
 c22:	1f 91       	pop	r17
 c24:	cf 91       	pop	r28
 c26:	df 91       	pop	r29
 c28:	0e 94 4f 03 	call	0x69e	; 0x69e <__addsf3x>
 c2c:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__fp_round>

00000c30 <modf>:
 c30:	fa 01       	movw	r30, r20
 c32:	dc 01       	movw	r26, r24
 c34:	aa 0f       	add	r26, r26
 c36:	bb 1f       	adc	r27, r27
 c38:	9b 01       	movw	r18, r22
 c3a:	ac 01       	movw	r20, r24
 c3c:	bf 57       	subi	r27, 0x7F	; 127
 c3e:	28 f4       	brcc	.+10     	; 0xc4a <modf+0x1a>
 c40:	22 27       	eor	r18, r18
 c42:	33 27       	eor	r19, r19
 c44:	44 27       	eor	r20, r20
 c46:	50 78       	andi	r21, 0x80	; 128
 c48:	20 c0       	rjmp	.+64     	; 0xc8a <modf+0x5a>
 c4a:	b7 51       	subi	r27, 0x17	; 23
 c4c:	90 f4       	brcc	.+36     	; 0xc72 <modf+0x42>
 c4e:	ab 2f       	mov	r26, r27
 c50:	00 24       	eor	r0, r0
 c52:	46 95       	lsr	r20
 c54:	37 95       	ror	r19
 c56:	27 95       	ror	r18
 c58:	01 1c       	adc	r0, r1
 c5a:	a3 95       	inc	r26
 c5c:	d2 f3       	brmi	.-12     	; 0xc52 <modf+0x22>
 c5e:	00 20       	and	r0, r0
 c60:	71 f0       	breq	.+28     	; 0xc7e <modf+0x4e>
 c62:	22 0f       	add	r18, r18
 c64:	33 1f       	adc	r19, r19
 c66:	44 1f       	adc	r20, r20
 c68:	b3 95       	inc	r27
 c6a:	da f3       	brmi	.-10     	; 0xc62 <modf+0x32>
 c6c:	0e d0       	rcall	.+28     	; 0xc8a <modf+0x5a>
 c6e:	0c 94 37 03 	jmp	0x66e	; 0x66e <__subsf3>
 c72:	61 30       	cpi	r22, 0x01	; 1
 c74:	71 05       	cpc	r23, r1
 c76:	a0 e8       	ldi	r26, 0x80	; 128
 c78:	8a 07       	cpc	r24, r26
 c7a:	b9 46       	sbci	r27, 0x69	; 105
 c7c:	30 f4       	brcc	.+12     	; 0xc8a <modf+0x5a>
 c7e:	9b 01       	movw	r18, r22
 c80:	ac 01       	movw	r20, r24
 c82:	66 27       	eor	r22, r22
 c84:	77 27       	eor	r23, r23
 c86:	88 27       	eor	r24, r24
 c88:	90 78       	andi	r25, 0x80	; 128
 c8a:	30 96       	adiw	r30, 0x00	; 0
 c8c:	21 f0       	breq	.+8      	; 0xc96 <modf+0x66>
 c8e:	20 83       	st	Z, r18
 c90:	31 83       	std	Z+1, r19	; 0x01
 c92:	42 83       	std	Z+2, r20	; 0x02
 c94:	53 83       	std	Z+3, r21	; 0x03
 c96:	08 95       	ret

00000c98 <__divsf3>:
 c98:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__divsf3x>
 c9c:	0c 94 2e 04 	jmp	0x85c	; 0x85c <__fp_round>
 ca0:	0e 94 27 04 	call	0x84e	; 0x84e <__fp_pscB>
 ca4:	58 f0       	brcs	.+22     	; 0xcbc <__divsf3+0x24>
 ca6:	0e 94 20 04 	call	0x840	; 0x840 <__fp_pscA>
 caa:	40 f0       	brcs	.+16     	; 0xcbc <__divsf3+0x24>
 cac:	29 f4       	brne	.+10     	; 0xcb8 <__divsf3+0x20>
 cae:	5f 3f       	cpi	r21, 0xFF	; 255
 cb0:	29 f0       	breq	.+10     	; 0xcbc <__divsf3+0x24>
 cb2:	0c 94 17 04 	jmp	0x82e	; 0x82e <__fp_inf>
 cb6:	51 11       	cpse	r21, r1
 cb8:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__fp_szero>
 cbc:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_nan>

00000cc0 <__divsf3x>:
 cc0:	0e 94 3f 04 	call	0x87e	; 0x87e <__fp_split3>
 cc4:	68 f3       	brcs	.-38     	; 0xca0 <__divsf3+0x8>

00000cc6 <__divsf3_pse>:
 cc6:	99 23       	and	r25, r25
 cc8:	b1 f3       	breq	.-20     	; 0xcb6 <__divsf3+0x1e>
 cca:	55 23       	and	r21, r21
 ccc:	91 f3       	breq	.-28     	; 0xcb2 <__divsf3+0x1a>
 cce:	95 1b       	sub	r25, r21
 cd0:	55 0b       	sbc	r21, r21
 cd2:	bb 27       	eor	r27, r27
 cd4:	aa 27       	eor	r26, r26
 cd6:	62 17       	cp	r22, r18
 cd8:	73 07       	cpc	r23, r19
 cda:	84 07       	cpc	r24, r20
 cdc:	38 f0       	brcs	.+14     	; 0xcec <__divsf3_pse+0x26>
 cde:	9f 5f       	subi	r25, 0xFF	; 255
 ce0:	5f 4f       	sbci	r21, 0xFF	; 255
 ce2:	22 0f       	add	r18, r18
 ce4:	33 1f       	adc	r19, r19
 ce6:	44 1f       	adc	r20, r20
 ce8:	aa 1f       	adc	r26, r26
 cea:	a9 f3       	breq	.-22     	; 0xcd6 <__divsf3_pse+0x10>
 cec:	35 d0       	rcall	.+106    	; 0xd58 <__divsf3_pse+0x92>
 cee:	0e 2e       	mov	r0, r30
 cf0:	3a f0       	brmi	.+14     	; 0xd00 <__divsf3_pse+0x3a>
 cf2:	e0 e8       	ldi	r30, 0x80	; 128
 cf4:	32 d0       	rcall	.+100    	; 0xd5a <__divsf3_pse+0x94>
 cf6:	91 50       	subi	r25, 0x01	; 1
 cf8:	50 40       	sbci	r21, 0x00	; 0
 cfa:	e6 95       	lsr	r30
 cfc:	00 1c       	adc	r0, r0
 cfe:	ca f7       	brpl	.-14     	; 0xcf2 <__divsf3_pse+0x2c>
 d00:	2b d0       	rcall	.+86     	; 0xd58 <__divsf3_pse+0x92>
 d02:	fe 2f       	mov	r31, r30
 d04:	29 d0       	rcall	.+82     	; 0xd58 <__divsf3_pse+0x92>
 d06:	66 0f       	add	r22, r22
 d08:	77 1f       	adc	r23, r23
 d0a:	88 1f       	adc	r24, r24
 d0c:	bb 1f       	adc	r27, r27
 d0e:	26 17       	cp	r18, r22
 d10:	37 07       	cpc	r19, r23
 d12:	48 07       	cpc	r20, r24
 d14:	ab 07       	cpc	r26, r27
 d16:	b0 e8       	ldi	r27, 0x80	; 128
 d18:	09 f0       	breq	.+2      	; 0xd1c <__divsf3_pse+0x56>
 d1a:	bb 0b       	sbc	r27, r27
 d1c:	80 2d       	mov	r24, r0
 d1e:	bf 01       	movw	r22, r30
 d20:	ff 27       	eor	r31, r31
 d22:	93 58       	subi	r25, 0x83	; 131
 d24:	5f 4f       	sbci	r21, 0xFF	; 255
 d26:	3a f0       	brmi	.+14     	; 0xd36 <__divsf3_pse+0x70>
 d28:	9e 3f       	cpi	r25, 0xFE	; 254
 d2a:	51 05       	cpc	r21, r1
 d2c:	78 f0       	brcs	.+30     	; 0xd4c <__divsf3_pse+0x86>
 d2e:	0c 94 17 04 	jmp	0x82e	; 0x82e <__fp_inf>
 d32:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__fp_szero>
 d36:	5f 3f       	cpi	r21, 0xFF	; 255
 d38:	e4 f3       	brlt	.-8      	; 0xd32 <__divsf3_pse+0x6c>
 d3a:	98 3e       	cpi	r25, 0xE8	; 232
 d3c:	d4 f3       	brlt	.-12     	; 0xd32 <__divsf3_pse+0x6c>
 d3e:	86 95       	lsr	r24
 d40:	77 95       	ror	r23
 d42:	67 95       	ror	r22
 d44:	b7 95       	ror	r27
 d46:	f7 95       	ror	r31
 d48:	9f 5f       	subi	r25, 0xFF	; 255
 d4a:	c9 f7       	brne	.-14     	; 0xd3e <__divsf3_pse+0x78>
 d4c:	88 0f       	add	r24, r24
 d4e:	91 1d       	adc	r25, r1
 d50:	96 95       	lsr	r25
 d52:	87 95       	ror	r24
 d54:	97 f9       	bld	r25, 7
 d56:	08 95       	ret
 d58:	e1 e0       	ldi	r30, 0x01	; 1
 d5a:	66 0f       	add	r22, r22
 d5c:	77 1f       	adc	r23, r23
 d5e:	88 1f       	adc	r24, r24
 d60:	bb 1f       	adc	r27, r27
 d62:	62 17       	cp	r22, r18
 d64:	73 07       	cpc	r23, r19
 d66:	84 07       	cpc	r24, r20
 d68:	ba 07       	cpc	r27, r26
 d6a:	20 f0       	brcs	.+8      	; 0xd74 <__divsf3_pse+0xae>
 d6c:	62 1b       	sub	r22, r18
 d6e:	73 0b       	sbc	r23, r19
 d70:	84 0b       	sbc	r24, r20
 d72:	ba 0b       	sbc	r27, r26
 d74:	ee 1f       	adc	r30, r30
 d76:	88 f7       	brcc	.-30     	; 0xd5a <__divsf3_pse+0x94>
 d78:	e0 95       	com	r30
 d7a:	08 95       	ret

00000d7c <__fp_mpack>:
 d7c:	9f 3f       	cpi	r25, 0xFF	; 255
 d7e:	31 f0       	breq	.+12     	; 0xd8c <__fp_mpack_finite+0xc>

00000d80 <__fp_mpack_finite>:
 d80:	91 50       	subi	r25, 0x01	; 1
 d82:	20 f4       	brcc	.+8      	; 0xd8c <__fp_mpack_finite+0xc>
 d84:	87 95       	ror	r24
 d86:	77 95       	ror	r23
 d88:	67 95       	ror	r22
 d8a:	b7 95       	ror	r27
 d8c:	88 0f       	add	r24, r24
 d8e:	91 1d       	adc	r25, r1
 d90:	96 95       	lsr	r25
 d92:	87 95       	ror	r24
 d94:	97 f9       	bld	r25, 7
 d96:	08 95       	ret

00000d98 <__divmodhi4>:
 d98:	97 fb       	bst	r25, 7
 d9a:	07 2e       	mov	r0, r23
 d9c:	16 f4       	brtc	.+4      	; 0xda2 <__divmodhi4+0xa>
 d9e:	00 94       	com	r0
 da0:	07 d0       	rcall	.+14     	; 0xdb0 <__divmodhi4_neg1>
 da2:	77 fd       	sbrc	r23, 7
 da4:	09 d0       	rcall	.+18     	; 0xdb8 <__divmodhi4_neg2>
 da6:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__udivmodhi4>
 daa:	07 fc       	sbrc	r0, 7
 dac:	05 d0       	rcall	.+10     	; 0xdb8 <__divmodhi4_neg2>
 dae:	3e f4       	brtc	.+14     	; 0xdbe <__divmodhi4_exit>

00000db0 <__divmodhi4_neg1>:
 db0:	90 95       	com	r25
 db2:	81 95       	neg	r24
 db4:	9f 4f       	sbci	r25, 0xFF	; 255
 db6:	08 95       	ret

00000db8 <__divmodhi4_neg2>:
 db8:	70 95       	com	r23
 dba:	61 95       	neg	r22
 dbc:	7f 4f       	sbci	r23, 0xFF	; 255

00000dbe <__divmodhi4_exit>:
 dbe:	08 95       	ret

00000dc0 <__udivmodhi4>:
 dc0:	aa 1b       	sub	r26, r26
 dc2:	bb 1b       	sub	r27, r27
 dc4:	51 e1       	ldi	r21, 0x11	; 17
 dc6:	07 c0       	rjmp	.+14     	; 0xdd6 <__udivmodhi4_ep>

00000dc8 <__udivmodhi4_loop>:
 dc8:	aa 1f       	adc	r26, r26
 dca:	bb 1f       	adc	r27, r27
 dcc:	a6 17       	cp	r26, r22
 dce:	b7 07       	cpc	r27, r23
 dd0:	10 f0       	brcs	.+4      	; 0xdd6 <__udivmodhi4_ep>
 dd2:	a6 1b       	sub	r26, r22
 dd4:	b7 0b       	sbc	r27, r23

00000dd6 <__udivmodhi4_ep>:
 dd6:	88 1f       	adc	r24, r24
 dd8:	99 1f       	adc	r25, r25
 dda:	5a 95       	dec	r21
 ddc:	a9 f7       	brne	.-22     	; 0xdc8 <__udivmodhi4_loop>
 dde:	80 95       	com	r24
 de0:	90 95       	com	r25
 de2:	bc 01       	movw	r22, r24
 de4:	cd 01       	movw	r24, r26
 de6:	08 95       	ret

00000de8 <_exit>:
 de8:	f8 94       	cli

00000dea <__stop_program>:
 dea:	ff cf       	rjmp	.-2      	; 0xdea <__stop_program>
